
Thermal_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002750  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002810  08002810  00003810  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800284c  0800284c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800284c  0800284c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800284c  0800284c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800284c  0800284c  0000384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002850  08002850  00003850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002854  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  08002860  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002860  000041e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134b0  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d8  00000000  00000000  000174e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000078dd  00000000  00000000  00019dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  000216a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba0  00000000  00000000  00022208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001008a  00000000  00000000  00022da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161e5  00000000  00000000  00032e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005c601  00000000  00000000  00049017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a5618  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002024  00000000  00000000  000a565c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000a7680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027f8 	.word	0x080027f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080027f8 	.word	0x080027f8

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_fmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	464f      	mov	r7, r9
 8000238:	4646      	mov	r6, r8
 800023a:	46d6      	mov	lr, sl
 800023c:	0243      	lsls	r3, r0, #9
 800023e:	0a5b      	lsrs	r3, r3, #9
 8000240:	0045      	lsls	r5, r0, #1
 8000242:	b5c0      	push	{r6, r7, lr}
 8000244:	4699      	mov	r9, r3
 8000246:	1c0f      	adds	r7, r1, #0
 8000248:	0e2d      	lsrs	r5, r5, #24
 800024a:	0fc6      	lsrs	r6, r0, #31
 800024c:	2d00      	cmp	r5, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_fmul+0x1e>
 8000250:	e088      	b.n	8000364 <__aeabi_fmul+0x130>
 8000252:	2dff      	cmp	r5, #255	@ 0xff
 8000254:	d100      	bne.n	8000258 <__aeabi_fmul+0x24>
 8000256:	e08d      	b.n	8000374 <__aeabi_fmul+0x140>
 8000258:	2280      	movs	r2, #128	@ 0x80
 800025a:	00db      	lsls	r3, r3, #3
 800025c:	04d2      	lsls	r2, r2, #19
 800025e:	431a      	orrs	r2, r3
 8000260:	2300      	movs	r3, #0
 8000262:	4691      	mov	r9, r2
 8000264:	4698      	mov	r8, r3
 8000266:	469a      	mov	sl, r3
 8000268:	3d7f      	subs	r5, #127	@ 0x7f
 800026a:	027c      	lsls	r4, r7, #9
 800026c:	007b      	lsls	r3, r7, #1
 800026e:	0a64      	lsrs	r4, r4, #9
 8000270:	0e1b      	lsrs	r3, r3, #24
 8000272:	0fff      	lsrs	r7, r7, #31
 8000274:	2b00      	cmp	r3, #0
 8000276:	d068      	beq.n	800034a <__aeabi_fmul+0x116>
 8000278:	2bff      	cmp	r3, #255	@ 0xff
 800027a:	d021      	beq.n	80002c0 <__aeabi_fmul+0x8c>
 800027c:	2280      	movs	r2, #128	@ 0x80
 800027e:	00e4      	lsls	r4, r4, #3
 8000280:	04d2      	lsls	r2, r2, #19
 8000282:	4314      	orrs	r4, r2
 8000284:	4642      	mov	r2, r8
 8000286:	3b7f      	subs	r3, #127	@ 0x7f
 8000288:	195b      	adds	r3, r3, r5
 800028a:	2100      	movs	r1, #0
 800028c:	1c5d      	adds	r5, r3, #1
 800028e:	2a0a      	cmp	r2, #10
 8000290:	dc2e      	bgt.n	80002f0 <__aeabi_fmul+0xbc>
 8000292:	407e      	eors	r6, r7
 8000294:	4642      	mov	r2, r8
 8000296:	2a02      	cmp	r2, #2
 8000298:	dc23      	bgt.n	80002e2 <__aeabi_fmul+0xae>
 800029a:	3a01      	subs	r2, #1
 800029c:	2a01      	cmp	r2, #1
 800029e:	d900      	bls.n	80002a2 <__aeabi_fmul+0x6e>
 80002a0:	e0bd      	b.n	800041e <__aeabi_fmul+0x1ea>
 80002a2:	2902      	cmp	r1, #2
 80002a4:	d06e      	beq.n	8000384 <__aeabi_fmul+0x150>
 80002a6:	2901      	cmp	r1, #1
 80002a8:	d12c      	bne.n	8000304 <__aeabi_fmul+0xd0>
 80002aa:	2000      	movs	r0, #0
 80002ac:	2200      	movs	r2, #0
 80002ae:	05c0      	lsls	r0, r0, #23
 80002b0:	07f6      	lsls	r6, r6, #31
 80002b2:	4310      	orrs	r0, r2
 80002b4:	4330      	orrs	r0, r6
 80002b6:	bce0      	pop	{r5, r6, r7}
 80002b8:	46ba      	mov	sl, r7
 80002ba:	46b1      	mov	r9, r6
 80002bc:	46a8      	mov	r8, r5
 80002be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c0:	002b      	movs	r3, r5
 80002c2:	33ff      	adds	r3, #255	@ 0xff
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	d065      	beq.n	8000394 <__aeabi_fmul+0x160>
 80002c8:	2203      	movs	r2, #3
 80002ca:	4641      	mov	r1, r8
 80002cc:	4311      	orrs	r1, r2
 80002ce:	0032      	movs	r2, r6
 80002d0:	3501      	adds	r5, #1
 80002d2:	4688      	mov	r8, r1
 80002d4:	407a      	eors	r2, r7
 80002d6:	35ff      	adds	r5, #255	@ 0xff
 80002d8:	290a      	cmp	r1, #10
 80002da:	dd00      	ble.n	80002de <__aeabi_fmul+0xaa>
 80002dc:	e0d8      	b.n	8000490 <__aeabi_fmul+0x25c>
 80002de:	0016      	movs	r6, r2
 80002e0:	2103      	movs	r1, #3
 80002e2:	4640      	mov	r0, r8
 80002e4:	2201      	movs	r2, #1
 80002e6:	4082      	lsls	r2, r0
 80002e8:	20a6      	movs	r0, #166	@ 0xa6
 80002ea:	00c0      	lsls	r0, r0, #3
 80002ec:	4202      	tst	r2, r0
 80002ee:	d020      	beq.n	8000332 <__aeabi_fmul+0xfe>
 80002f0:	4653      	mov	r3, sl
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d046      	beq.n	8000384 <__aeabi_fmul+0x150>
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d100      	bne.n	80002fc <__aeabi_fmul+0xc8>
 80002fa:	e0bb      	b.n	8000474 <__aeabi_fmul+0x240>
 80002fc:	4651      	mov	r1, sl
 80002fe:	464c      	mov	r4, r9
 8000300:	2901      	cmp	r1, #1
 8000302:	d0d2      	beq.n	80002aa <__aeabi_fmul+0x76>
 8000304:	002b      	movs	r3, r5
 8000306:	337f      	adds	r3, #127	@ 0x7f
 8000308:	2b00      	cmp	r3, #0
 800030a:	dd70      	ble.n	80003ee <__aeabi_fmul+0x1ba>
 800030c:	0762      	lsls	r2, r4, #29
 800030e:	d004      	beq.n	800031a <__aeabi_fmul+0xe6>
 8000310:	220f      	movs	r2, #15
 8000312:	4022      	ands	r2, r4
 8000314:	2a04      	cmp	r2, #4
 8000316:	d000      	beq.n	800031a <__aeabi_fmul+0xe6>
 8000318:	3404      	adds	r4, #4
 800031a:	0122      	lsls	r2, r4, #4
 800031c:	d503      	bpl.n	8000326 <__aeabi_fmul+0xf2>
 800031e:	4b63      	ldr	r3, [pc, #396]	@ (80004ac <__aeabi_fmul+0x278>)
 8000320:	401c      	ands	r4, r3
 8000322:	002b      	movs	r3, r5
 8000324:	3380      	adds	r3, #128	@ 0x80
 8000326:	2bfe      	cmp	r3, #254	@ 0xfe
 8000328:	dc2c      	bgt.n	8000384 <__aeabi_fmul+0x150>
 800032a:	01a2      	lsls	r2, r4, #6
 800032c:	0a52      	lsrs	r2, r2, #9
 800032e:	b2d8      	uxtb	r0, r3
 8000330:	e7bd      	b.n	80002ae <__aeabi_fmul+0x7a>
 8000332:	2090      	movs	r0, #144	@ 0x90
 8000334:	0080      	lsls	r0, r0, #2
 8000336:	4202      	tst	r2, r0
 8000338:	d127      	bne.n	800038a <__aeabi_fmul+0x156>
 800033a:	38b9      	subs	r0, #185	@ 0xb9
 800033c:	38ff      	subs	r0, #255	@ 0xff
 800033e:	4210      	tst	r0, r2
 8000340:	d06d      	beq.n	800041e <__aeabi_fmul+0x1ea>
 8000342:	003e      	movs	r6, r7
 8000344:	46a1      	mov	r9, r4
 8000346:	468a      	mov	sl, r1
 8000348:	e7d2      	b.n	80002f0 <__aeabi_fmul+0xbc>
 800034a:	2c00      	cmp	r4, #0
 800034c:	d141      	bne.n	80003d2 <__aeabi_fmul+0x19e>
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	431a      	orrs	r2, r3
 8000354:	4690      	mov	r8, r2
 8000356:	002b      	movs	r3, r5
 8000358:	4642      	mov	r2, r8
 800035a:	2101      	movs	r1, #1
 800035c:	1c5d      	adds	r5, r3, #1
 800035e:	2a0a      	cmp	r2, #10
 8000360:	dd97      	ble.n	8000292 <__aeabi_fmul+0x5e>
 8000362:	e7c5      	b.n	80002f0 <__aeabi_fmul+0xbc>
 8000364:	2b00      	cmp	r3, #0
 8000366:	d126      	bne.n	80003b6 <__aeabi_fmul+0x182>
 8000368:	2304      	movs	r3, #4
 800036a:	4698      	mov	r8, r3
 800036c:	3b03      	subs	r3, #3
 800036e:	2500      	movs	r5, #0
 8000370:	469a      	mov	sl, r3
 8000372:	e77a      	b.n	800026a <__aeabi_fmul+0x36>
 8000374:	2b00      	cmp	r3, #0
 8000376:	d118      	bne.n	80003aa <__aeabi_fmul+0x176>
 8000378:	2308      	movs	r3, #8
 800037a:	4698      	mov	r8, r3
 800037c:	3b06      	subs	r3, #6
 800037e:	25ff      	movs	r5, #255	@ 0xff
 8000380:	469a      	mov	sl, r3
 8000382:	e772      	b.n	800026a <__aeabi_fmul+0x36>
 8000384:	20ff      	movs	r0, #255	@ 0xff
 8000386:	2200      	movs	r2, #0
 8000388:	e791      	b.n	80002ae <__aeabi_fmul+0x7a>
 800038a:	2280      	movs	r2, #128	@ 0x80
 800038c:	2600      	movs	r6, #0
 800038e:	20ff      	movs	r0, #255	@ 0xff
 8000390:	03d2      	lsls	r2, r2, #15
 8000392:	e78c      	b.n	80002ae <__aeabi_fmul+0x7a>
 8000394:	4641      	mov	r1, r8
 8000396:	2202      	movs	r2, #2
 8000398:	3501      	adds	r5, #1
 800039a:	4311      	orrs	r1, r2
 800039c:	4688      	mov	r8, r1
 800039e:	35ff      	adds	r5, #255	@ 0xff
 80003a0:	290a      	cmp	r1, #10
 80003a2:	dca5      	bgt.n	80002f0 <__aeabi_fmul+0xbc>
 80003a4:	2102      	movs	r1, #2
 80003a6:	407e      	eors	r6, r7
 80003a8:	e774      	b.n	8000294 <__aeabi_fmul+0x60>
 80003aa:	230c      	movs	r3, #12
 80003ac:	4698      	mov	r8, r3
 80003ae:	3b09      	subs	r3, #9
 80003b0:	25ff      	movs	r5, #255	@ 0xff
 80003b2:	469a      	mov	sl, r3
 80003b4:	e759      	b.n	800026a <__aeabi_fmul+0x36>
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 f8c6 	bl	8000548 <__clzsi2>
 80003bc:	464a      	mov	r2, r9
 80003be:	1f43      	subs	r3, r0, #5
 80003c0:	2576      	movs	r5, #118	@ 0x76
 80003c2:	409a      	lsls	r2, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	426d      	negs	r5, r5
 80003c8:	4691      	mov	r9, r2
 80003ca:	4698      	mov	r8, r3
 80003cc:	469a      	mov	sl, r3
 80003ce:	1a2d      	subs	r5, r5, r0
 80003d0:	e74b      	b.n	800026a <__aeabi_fmul+0x36>
 80003d2:	0020      	movs	r0, r4
 80003d4:	f000 f8b8 	bl	8000548 <__clzsi2>
 80003d8:	4642      	mov	r2, r8
 80003da:	1f43      	subs	r3, r0, #5
 80003dc:	409c      	lsls	r4, r3
 80003de:	1a2b      	subs	r3, r5, r0
 80003e0:	3b76      	subs	r3, #118	@ 0x76
 80003e2:	2100      	movs	r1, #0
 80003e4:	1c5d      	adds	r5, r3, #1
 80003e6:	2a0a      	cmp	r2, #10
 80003e8:	dc00      	bgt.n	80003ec <__aeabi_fmul+0x1b8>
 80003ea:	e752      	b.n	8000292 <__aeabi_fmul+0x5e>
 80003ec:	e780      	b.n	80002f0 <__aeabi_fmul+0xbc>
 80003ee:	2201      	movs	r2, #1
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	2b1b      	cmp	r3, #27
 80003f4:	dd00      	ble.n	80003f8 <__aeabi_fmul+0x1c4>
 80003f6:	e758      	b.n	80002aa <__aeabi_fmul+0x76>
 80003f8:	359e      	adds	r5, #158	@ 0x9e
 80003fa:	0022      	movs	r2, r4
 80003fc:	40ac      	lsls	r4, r5
 80003fe:	40da      	lsrs	r2, r3
 8000400:	1e63      	subs	r3, r4, #1
 8000402:	419c      	sbcs	r4, r3
 8000404:	4322      	orrs	r2, r4
 8000406:	0753      	lsls	r3, r2, #29
 8000408:	d004      	beq.n	8000414 <__aeabi_fmul+0x1e0>
 800040a:	230f      	movs	r3, #15
 800040c:	4013      	ands	r3, r2
 800040e:	2b04      	cmp	r3, #4
 8000410:	d000      	beq.n	8000414 <__aeabi_fmul+0x1e0>
 8000412:	3204      	adds	r2, #4
 8000414:	0153      	lsls	r3, r2, #5
 8000416:	d537      	bpl.n	8000488 <__aeabi_fmul+0x254>
 8000418:	2001      	movs	r0, #1
 800041a:	2200      	movs	r2, #0
 800041c:	e747      	b.n	80002ae <__aeabi_fmul+0x7a>
 800041e:	0c21      	lsrs	r1, r4, #16
 8000420:	464a      	mov	r2, r9
 8000422:	0424      	lsls	r4, r4, #16
 8000424:	0c24      	lsrs	r4, r4, #16
 8000426:	0027      	movs	r7, r4
 8000428:	0c10      	lsrs	r0, r2, #16
 800042a:	0412      	lsls	r2, r2, #16
 800042c:	0c12      	lsrs	r2, r2, #16
 800042e:	4344      	muls	r4, r0
 8000430:	4357      	muls	r7, r2
 8000432:	4348      	muls	r0, r1
 8000434:	4351      	muls	r1, r2
 8000436:	0c3a      	lsrs	r2, r7, #16
 8000438:	1909      	adds	r1, r1, r4
 800043a:	1852      	adds	r2, r2, r1
 800043c:	4294      	cmp	r4, r2
 800043e:	d903      	bls.n	8000448 <__aeabi_fmul+0x214>
 8000440:	2180      	movs	r1, #128	@ 0x80
 8000442:	0249      	lsls	r1, r1, #9
 8000444:	468c      	mov	ip, r1
 8000446:	4460      	add	r0, ip
 8000448:	043f      	lsls	r7, r7, #16
 800044a:	0411      	lsls	r1, r2, #16
 800044c:	0c3f      	lsrs	r7, r7, #16
 800044e:	19c9      	adds	r1, r1, r7
 8000450:	018c      	lsls	r4, r1, #6
 8000452:	1e67      	subs	r7, r4, #1
 8000454:	41bc      	sbcs	r4, r7
 8000456:	0c12      	lsrs	r2, r2, #16
 8000458:	0e89      	lsrs	r1, r1, #26
 800045a:	1812      	adds	r2, r2, r0
 800045c:	430c      	orrs	r4, r1
 800045e:	0192      	lsls	r2, r2, #6
 8000460:	4314      	orrs	r4, r2
 8000462:	0112      	lsls	r2, r2, #4
 8000464:	d50e      	bpl.n	8000484 <__aeabi_fmul+0x250>
 8000466:	2301      	movs	r3, #1
 8000468:	0862      	lsrs	r2, r4, #1
 800046a:	401c      	ands	r4, r3
 800046c:	4314      	orrs	r4, r2
 800046e:	e749      	b.n	8000304 <__aeabi_fmul+0xd0>
 8000470:	003e      	movs	r6, r7
 8000472:	46a1      	mov	r9, r4
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	464b      	mov	r3, r9
 8000478:	03d2      	lsls	r2, r2, #15
 800047a:	431a      	orrs	r2, r3
 800047c:	0252      	lsls	r2, r2, #9
 800047e:	20ff      	movs	r0, #255	@ 0xff
 8000480:	0a52      	lsrs	r2, r2, #9
 8000482:	e714      	b.n	80002ae <__aeabi_fmul+0x7a>
 8000484:	001d      	movs	r5, r3
 8000486:	e73d      	b.n	8000304 <__aeabi_fmul+0xd0>
 8000488:	0192      	lsls	r2, r2, #6
 800048a:	2000      	movs	r0, #0
 800048c:	0a52      	lsrs	r2, r2, #9
 800048e:	e70e      	b.n	80002ae <__aeabi_fmul+0x7a>
 8000490:	290f      	cmp	r1, #15
 8000492:	d1ed      	bne.n	8000470 <__aeabi_fmul+0x23c>
 8000494:	2280      	movs	r2, #128	@ 0x80
 8000496:	464b      	mov	r3, r9
 8000498:	03d2      	lsls	r2, r2, #15
 800049a:	4213      	tst	r3, r2
 800049c:	d0ea      	beq.n	8000474 <__aeabi_fmul+0x240>
 800049e:	4214      	tst	r4, r2
 80004a0:	d1e8      	bne.n	8000474 <__aeabi_fmul+0x240>
 80004a2:	003e      	movs	r6, r7
 80004a4:	20ff      	movs	r0, #255	@ 0xff
 80004a6:	4322      	orrs	r2, r4
 80004a8:	e701      	b.n	80002ae <__aeabi_fmul+0x7a>
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	f7ffffff 	.word	0xf7ffffff

080004b0 <__aeabi_i2f>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d013      	beq.n	80004de <__aeabi_i2f+0x2e>
 80004b6:	17c3      	asrs	r3, r0, #31
 80004b8:	18c5      	adds	r5, r0, r3
 80004ba:	405d      	eors	r5, r3
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	0028      	movs	r0, r5
 80004c0:	f000 f842 	bl	8000548 <__clzsi2>
 80004c4:	239e      	movs	r3, #158	@ 0x9e
 80004c6:	0001      	movs	r1, r0
 80004c8:	1a1b      	subs	r3, r3, r0
 80004ca:	2b96      	cmp	r3, #150	@ 0x96
 80004cc:	dc0f      	bgt.n	80004ee <__aeabi_i2f+0x3e>
 80004ce:	2808      	cmp	r0, #8
 80004d0:	d034      	beq.n	800053c <__aeabi_i2f+0x8c>
 80004d2:	3908      	subs	r1, #8
 80004d4:	408d      	lsls	r5, r1
 80004d6:	026d      	lsls	r5, r5, #9
 80004d8:	0a6d      	lsrs	r5, r5, #9
 80004da:	b2d8      	uxtb	r0, r3
 80004dc:	e002      	b.n	80004e4 <__aeabi_i2f+0x34>
 80004de:	2400      	movs	r4, #0
 80004e0:	2000      	movs	r0, #0
 80004e2:	2500      	movs	r5, #0
 80004e4:	05c0      	lsls	r0, r0, #23
 80004e6:	4328      	orrs	r0, r5
 80004e8:	07e4      	lsls	r4, r4, #31
 80004ea:	4320      	orrs	r0, r4
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
 80004ee:	2b99      	cmp	r3, #153	@ 0x99
 80004f0:	dc16      	bgt.n	8000520 <__aeabi_i2f+0x70>
 80004f2:	1f42      	subs	r2, r0, #5
 80004f4:	2805      	cmp	r0, #5
 80004f6:	d000      	beq.n	80004fa <__aeabi_i2f+0x4a>
 80004f8:	4095      	lsls	r5, r2
 80004fa:	002a      	movs	r2, r5
 80004fc:	4811      	ldr	r0, [pc, #68]	@ (8000544 <__aeabi_i2f+0x94>)
 80004fe:	4002      	ands	r2, r0
 8000500:	076e      	lsls	r6, r5, #29
 8000502:	d009      	beq.n	8000518 <__aeabi_i2f+0x68>
 8000504:	260f      	movs	r6, #15
 8000506:	4035      	ands	r5, r6
 8000508:	2d04      	cmp	r5, #4
 800050a:	d005      	beq.n	8000518 <__aeabi_i2f+0x68>
 800050c:	3204      	adds	r2, #4
 800050e:	0155      	lsls	r5, r2, #5
 8000510:	d502      	bpl.n	8000518 <__aeabi_i2f+0x68>
 8000512:	239f      	movs	r3, #159	@ 0x9f
 8000514:	4002      	ands	r2, r0
 8000516:	1a5b      	subs	r3, r3, r1
 8000518:	0192      	lsls	r2, r2, #6
 800051a:	0a55      	lsrs	r5, r2, #9
 800051c:	b2d8      	uxtb	r0, r3
 800051e:	e7e1      	b.n	80004e4 <__aeabi_i2f+0x34>
 8000520:	2205      	movs	r2, #5
 8000522:	1a12      	subs	r2, r2, r0
 8000524:	0028      	movs	r0, r5
 8000526:	40d0      	lsrs	r0, r2
 8000528:	0002      	movs	r2, r0
 800052a:	0008      	movs	r0, r1
 800052c:	301b      	adds	r0, #27
 800052e:	4085      	lsls	r5, r0
 8000530:	0028      	movs	r0, r5
 8000532:	1e45      	subs	r5, r0, #1
 8000534:	41a8      	sbcs	r0, r5
 8000536:	4302      	orrs	r2, r0
 8000538:	0015      	movs	r5, r2
 800053a:	e7de      	b.n	80004fa <__aeabi_i2f+0x4a>
 800053c:	026d      	lsls	r5, r5, #9
 800053e:	2096      	movs	r0, #150	@ 0x96
 8000540:	0a6d      	lsrs	r5, r5, #9
 8000542:	e7cf      	b.n	80004e4 <__aeabi_i2f+0x34>
 8000544:	fbffffff 	.word	0xfbffffff

08000548 <__clzsi2>:
 8000548:	211c      	movs	r1, #28
 800054a:	2301      	movs	r3, #1
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	4298      	cmp	r0, r3
 8000550:	d301      	bcc.n	8000556 <__clzsi2+0xe>
 8000552:	0c00      	lsrs	r0, r0, #16
 8000554:	3910      	subs	r1, #16
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	4298      	cmp	r0, r3
 800055a:	d301      	bcc.n	8000560 <__clzsi2+0x18>
 800055c:	0a00      	lsrs	r0, r0, #8
 800055e:	3908      	subs	r1, #8
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	4298      	cmp	r0, r3
 8000564:	d301      	bcc.n	800056a <__clzsi2+0x22>
 8000566:	0900      	lsrs	r0, r0, #4
 8000568:	3904      	subs	r1, #4
 800056a:	a202      	add	r2, pc, #8	@ (adr r2, 8000574 <__clzsi2+0x2c>)
 800056c:	5c10      	ldrb	r0, [r2, r0]
 800056e:	1840      	adds	r0, r0, r1
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	02020304 	.word	0x02020304
 8000578:	01010101 	.word	0x01010101
	...

08000584 <ADC_Incremental_Write>:
 * @param[in]			- Amount of registers which need to be written
 *
 * @return				- none
 */
uint8_t ADC_Incremental_Write(ADC_Handle_t *pADC, uint8_t RegisterAddress, uint8_t AmountADCRegistersToWrite)
{
 8000584:	0003      	movs	r3, r0
 8000586:	b570      	push	{r4, r5, r6, lr}
	// Check if the parameters which were given to the function are correct
	// 1. Check if initial address is okey
	if (RegisterAddress < ADCDATA_ADDRESS || RegisterAddress > CRCCFG_ADDRESS)
 8000588:	290f      	cmp	r1, #15
 800058a:	d82e      	bhi.n	80005ea <ADC_Incremental_Write+0x66>
	{
		// Generate Error
		return 1;
	}
	// 2. Check if amount to write is not too long
	if (AmountADCRegistersToWrite > (0xE - RegisterAddress))
 800058c:	200e      	movs	r0, #14
 800058e:	1a40      	subs	r0, r0, r1
 8000590:	4282      	cmp	r2, r0
 8000592:	dc2a      	bgt.n	80005ea <ADC_Incremental_Write+0x66>
	// Forming Fast Command for incremental writing
	// Adding Device address to the bits [7:6];
	FastCommandByte = ADC_DEVICE_ADDRESS << 6;

	// Adding address (bits [5:2]) of ADC's register address we want to start writing to
	FastCommandByte += RegisterAddress << 2;
 8000594:	0088      	lsls	r0, r1, #2

	// Adding "Increment writing" command (bits [1:0])
	FastCommandByte += COMMAND_INCREMENTAL_WRITE;
 8000596:	4c3b      	ldr	r4, [pc, #236]	@ (8000684 <ADC_Incremental_Write+0x100>)
 8000598:	3042      	adds	r0, #66	@ 0x42
 800059a:	b2c0      	uxtb	r0, r0
 800059c:	7020      	strb	r0, [r4, #0]
	// Assign first byte for sending SPI writing command with desirable address
	SPIMessage[0] = FastCommandByte;

	// Variable will be responsible for creating exact length of the SPI message
	// Initial value "1" because it will be first byte with system information (previous assignment)
	uint8_t SPIAmountofBytes = 1;
 800059e:	2401      	movs	r4, #1
	SPIMessage[0] = FastCommandByte;
 80005a0:	4d39      	ldr	r5, [pc, #228]	@ (8000688 <ADC_Incremental_Write+0x104>)
 80005a2:	7028      	strb	r0, [r5, #0]
	 *
	 * for loop will go through register which needs to be processed
	 * Switch will decide amount of bytes for each particular register
	 */

	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister <= AmountADCRegistersToWrite; CurrentRegister++)
 80005a4:	4291      	cmp	r1, r2
 80005a6:	d913      	bls.n	80005d0 <ADC_Incremental_Write+0x4c>
				return 1;			//???????????????    Return error for the function    ???????????????????
		}

	}

	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 80005a8:	2090      	movs	r0, #144	@ 0x90
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	05c0      	lsls	r0, r0, #23
 80005b0:	f000 fd72 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, SPIMessage, SPIAmountofBytes, 10);
 80005b4:	230a      	movs	r3, #10
 80005b6:	0022      	movs	r2, r4
 80005b8:	0029      	movs	r1, r5
 80005ba:	4834      	ldr	r0, [pc, #208]	@ (800068c <ADC_Incremental_Write+0x108>)
 80005bc:	f001 fc9a 	bl	8001ef4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 80005c0:	2090      	movs	r0, #144	@ 0x90
 80005c2:	2201      	movs	r2, #1
 80005c4:	05c0      	lsls	r0, r0, #23
 80005c6:	2110      	movs	r1, #16
 80005c8:	f000 fd66 	bl	8001098 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);




	return 0;
 80005cc:	2000      	movs	r0, #0
 80005ce:	e00d      	b.n	80005ec <ADC_Incremental_Write+0x68>
		switch (CurrentRegister)
 80005d0:	1e48      	subs	r0, r1, #1
 80005d2:	280d      	cmp	r0, #13
 80005d4:	d809      	bhi.n	80005ea <ADC_Incremental_Write+0x66>
 80005d6:	1c66      	adds	r6, r4, #1
 80005d8:	f7ff fd96 	bl	8000108 <__gnu_thumb1_case_uqi>
 80005dc:	13110f09 	.word	0x13110f09
 80005e0:	25191715 	.word	0x25191715
 80005e4:	453c332c 	.word	0x453c332c
 80005e8:	4a48      	.short	0x4a48
		return 1;
 80005ea:	2001      	movs	r0, #1
}
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
				SPIMessage[SPIAmountofBytes] = *pTemp;
 80005ee:	7918      	ldrb	r0, [r3, #4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 80005f0:	5528      	strb	r0, [r5, r4]
				SPIAmountofBytes++;
 80005f2:	b2f4      	uxtb	r4, r6
	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister <= AmountADCRegistersToWrite; CurrentRegister++)
 80005f4:	3101      	adds	r1, #1
 80005f6:	b2c9      	uxtb	r1, r1
 80005f8:	e7d4      	b.n	80005a4 <ADC_Incremental_Write+0x20>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 80005fa:	7958      	ldrb	r0, [r3, #5]
 80005fc:	e7f8      	b.n	80005f0 <ADC_Incremental_Write+0x6c>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 80005fe:	7998      	ldrb	r0, [r3, #6]
 8000600:	e7f6      	b.n	80005f0 <ADC_Incremental_Write+0x6c>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000602:	79d8      	ldrb	r0, [r3, #7]
 8000604:	e7f4      	b.n	80005f0 <ADC_Incremental_Write+0x6c>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000606:	7a18      	ldrb	r0, [r3, #8]
 8000608:	e7f2      	b.n	80005f0 <ADC_Incremental_Write+0x6c>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800060a:	7a58      	ldrb	r0, [r3, #9]
 800060c:	e7f0      	b.n	80005f0 <ADC_Incremental_Write+0x6c>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800060e:	7a98      	ldrb	r0, [r3, #10]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000610:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000612:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000614:	7ad8      	ldrb	r0, [r3, #11]
 8000616:	55a8      	strb	r0, [r5, r6]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000618:	7b1e      	ldrb	r6, [r3, #12]
				SPIAmountofBytes++;
 800061a:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800061c:	b2c0      	uxtb	r0, r0
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800061e:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000620:	3403      	adds	r4, #3
				SPIAmountofBytes++;
 8000622:	b2e4      	uxtb	r4, r4
				break;
 8000624:	e7e6      	b.n	80005f4 <ADC_Incremental_Write+0x70>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000626:	7c18      	ldrb	r0, [r3, #16]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000628:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800062a:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800062c:	7c58      	ldrb	r0, [r3, #17]
 800062e:	55a8      	strb	r0, [r5, r6]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000630:	7c9e      	ldrb	r6, [r3, #18]
 8000632:	e7f2      	b.n	800061a <ADC_Incremental_Write+0x96>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000634:	7d18      	ldrb	r0, [r3, #20]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000636:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000638:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800063a:	7d58      	ldrb	r0, [r3, #21]
 800063c:	55a8      	strb	r0, [r5, r6]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800063e:	7d9e      	ldrb	r6, [r3, #22]
 8000640:	e7eb      	b.n	800061a <ADC_Incremental_Write+0x96>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000642:	7e18      	ldrb	r0, [r3, #24]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000644:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000646:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000648:	7e58      	ldrb	r0, [r3, #25]
 800064a:	55a8      	strb	r0, [r5, r6]
				SPIAmountofBytes++;
 800064c:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800064e:	7e9e      	ldrb	r6, [r3, #26]
 8000650:	b2c0      	uxtb	r0, r0
 8000652:	e7e4      	b.n	800061e <ADC_Incremental_Write+0x9a>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000654:	7f18      	ldrb	r0, [r3, #28]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000656:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000658:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800065a:	7f58      	ldrb	r0, [r3, #29]
 800065c:	55a8      	strb	r0, [r5, r6]
				SPIAmountofBytes++;
 800065e:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000660:	7f9e      	ldrb	r6, [r3, #30]
 8000662:	b2c0      	uxtb	r0, r0
 8000664:	e7db      	b.n	800061e <ADC_Incremental_Write+0x9a>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000666:	1c58      	adds	r0, r3, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000668:	7fc0      	ldrb	r0, [r0, #31]
 800066a:	e7c1      	b.n	80005f0 <ADC_Incremental_Write+0x6c>
 800066c:	1c98      	adds	r0, r3, #2
 800066e:	e7fb      	b.n	8000668 <ADC_Incremental_Write+0xe4>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000670:	1cd8      	adds	r0, r3, #3
 8000672:	7fc0      	ldrb	r0, [r0, #31]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000674:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000676:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000678:	1d18      	adds	r0, r3, #4
 800067a:	7fc0      	ldrb	r0, [r0, #31]
				SPIAmountofBytes++;
 800067c:	3402      	adds	r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 800067e:	55a8      	strb	r0, [r5, r6]
				SPIAmountofBytes++;
 8000680:	e7cf      	b.n	8000622 <ADC_Incremental_Write+0x9e>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000048 	.word	0x20000048
 8000688:	20000049 	.word	0x20000049
 800068c:	20000124 	.word	0x20000124

08000690 <ADC_Init>:
	pADC->RESERVED1 = 0x900000;
 8000690:	2390      	movs	r3, #144	@ 0x90
	pADC->RESERVED2 = 0x50;
 8000692:	2250      	movs	r2, #80	@ 0x50
	pADC->RESERVED1 = 0x900000;
 8000694:	041b      	lsls	r3, r3, #16
{
 8000696:	b510      	push	{r4, lr}
	pADC->RESERVED1 = 0x900000;
 8000698:	61c3      	str	r3, [r0, #28]
	pADC->RESERVED2 = 0x50;
 800069a:	1c43      	adds	r3, r0, #1
 800069c:	77da      	strb	r2, [r3, #31]
	pADC->RESERVED3 = 0x0009;
 800069e:	2309      	movs	r3, #9
 80006a0:	8443      	strh	r3, [r0, #34]	@ 0x22
	pADC->SCAN.RESERVED = 0x00;
 80006a2:	7b03      	ldrb	r3, [r0, #12]
 80006a4:	3a40      	subs	r2, #64	@ 0x40
 80006a6:	4393      	bics	r3, r2
 80006a8:	7303      	strb	r3, [r0, #12]
	pADC->Config0.CONFIG0 = 0x03;
 80006aa:	8882      	ldrh	r2, [r0, #4]
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <ADC_Init+0x3c>)
	ADC_Incremental_Write(pADC, CONFIG0_ADDRESS, INITIALIZATION_AMOUNT_OF_REGISTERS);
 80006ae:	2101      	movs	r1, #1
	pADC->Config0.CONFIG0 = 0x03;
 80006b0:	401a      	ands	r2, r3
 80006b2:	23c0      	movs	r3, #192	@ 0xc0
 80006b4:	4313      	orrs	r3, r2
 80006b6:	8083      	strh	r3, [r0, #4]
	pADC->Config2.RESERVED = 0x03;
 80006b8:	2303      	movs	r3, #3
 80006ba:	7982      	ldrb	r2, [r0, #6]
 80006bc:	4313      	orrs	r3, r2
 80006be:	7183      	strb	r3, [r0, #6]
	ADC_Incremental_Write(pADC, CONFIG0_ADDRESS, INITIALIZATION_AMOUNT_OF_REGISTERS);
 80006c0:	220d      	movs	r2, #13
 80006c2:	f7ff ff5f 	bl	8000584 <ADC_Incremental_Write>
}
 80006c6:	2000      	movs	r0, #0
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	fffffc3f 	.word	0xfffffc3f

080006d0 <ADC_Start_Conversion>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- none
 */
void ADC_Start_Conversion(ADC_Handle_t *pADC)
{
 80006d0:	b570      	push	{r4, r5, r6, lr}
	// Adding command, bits [5:0]
	FastCommandByte += FC_START_CONVERSION;

	//Start_SPI3_TransmitReceive(&FastCommandByte, SPIDUMMYData, 1);
	// Transfer this via SPI
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 80006d2:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += FC_START_CONVERSION;
 80006d4:	2368      	movs	r3, #104	@ 0x68
 80006d6:	4c0a      	ldr	r4, [pc, #40]	@ (8000700 <ADC_Start_Conversion+0x30>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 80006d8:	05ed      	lsls	r5, r5, #23
 80006da:	0028      	movs	r0, r5
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
	FastCommandByte += FC_START_CONVERSION;
 80006e0:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 80006e2:	f000 fcd9 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);
 80006e6:	230a      	movs	r3, #10
 80006e8:	0021      	movs	r1, r4
 80006ea:	2201      	movs	r2, #1
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <ADC_Start_Conversion+0x34>)
 80006ee:	f001 fc01 	bl	8001ef4 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_IT(&SPI, &FastCommandByte, 1);
	// HAL_SPI_Transmit_DMA(&SPI, &FastCommandByte, 1);
	//__HAL_DMA_DISABLE_IT(&hdma_spi3_tx, DMA_IT_HT);
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 80006f2:	0028      	movs	r0, r5
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	f000 fcce 	bl	8001098 <HAL_GPIO_WritePin>
}
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	20000048 	.word	0x20000048
 8000704:	20000124 	.word	0x20000124

08000708 <ADC_Full_Reset>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- none
 */
void ADC_Full_Reset(ADC_Handle_t *pADC)
{
 8000708:	b570      	push	{r4, r5, r6, lr}

	// Adding command, bits [5:0]
	FastCommandByte += FC_DEVICE_FULL_RESET;

	// Transfer this via SPI
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 800070a:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += FC_DEVICE_FULL_RESET;
 800070c:	2378      	movs	r3, #120	@ 0x78
 800070e:	4c0a      	ldr	r4, [pc, #40]	@ (8000738 <ADC_Full_Reset+0x30>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000710:	05ed      	lsls	r5, r5, #23
 8000712:	0028      	movs	r0, r5
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
	FastCommandByte += FC_DEVICE_FULL_RESET;
 8000718:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 800071a:	f000 fcbd 	bl	8001098 <HAL_GPIO_WritePin>
	//Start_SPI_Transmit(&FastCommandByte, 1);
	HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);
 800071e:	230a      	movs	r3, #10
 8000720:	0021      	movs	r1, r4
 8000722:	2201      	movs	r2, #1
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <ADC_Full_Reset+0x34>)
 8000726:	f001 fbe5 	bl	8001ef4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 800072a:	0028      	movs	r0, r5
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	f000 fcb2 	bl	8001098 <HAL_GPIO_WritePin>
}
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	20000048 	.word	0x20000048
 800073c:	20000124 	.word	0x20000124

08000740 <ADC_Get_Measured_DATA>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- Analog value
 */
float ADC_Get_Measured_DATA(ADC_Handle_t *pADC)
{
 8000740:	b513      	push	{r0, r1, r4, lr}
	// Adding "Increment writing" command (bits [1:0])
	FastCommandByte += COMMAND_STATIC_READ;

	// Initiate SPI reading

	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000742:	2490      	movs	r4, #144	@ 0x90
	FastCommandByte += COMMAND_STATIC_READ;
 8000744:	2241      	movs	r2, #65	@ 0x41
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <ADC_Get_Measured_DATA+0x34>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000748:	05e4      	lsls	r4, r4, #23
 800074a:	0020      	movs	r0, r4
	FastCommandByte += COMMAND_STATIC_READ;
 800074c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 800074e:	2110      	movs	r1, #16
 8000750:	2200      	movs	r2, #0
 8000752:	f000 fca1 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&SPI, SPIMessage, ADCReceivedData, 3, 10);
 8000756:	230a      	movs	r3, #10
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <ADC_Get_Measured_DATA+0x38>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4907      	ldr	r1, [pc, #28]	@ (800077c <ADC_Get_Measured_DATA+0x3c>)
 800075e:	3b07      	subs	r3, #7
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <ADC_Get_Measured_DATA+0x40>)
 8000762:	f001 fc89 	bl	8002078 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000766:	0020      	movs	r0, r4
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	f000 fc94 	bl	8001098 <HAL_GPIO_WritePin>
	return 0;
}
 8000770:	2000      	movs	r0, #0
 8000772:	bd16      	pop	{r1, r2, r4, pc}
 8000774:	20000048 	.word	0x20000048
 8000778:	2000002a 	.word	0x2000002a
 800077c:	20000049 	.word	0x20000049
 8000780:	20000124 	.word	0x20000124

08000784 <ADC_Proccess_Data>:
{

}

void ADC_Proccess_Data(void)
{
 8000784:	b510      	push	{r4, lr}
	// Check errors
	ADC_Check_Errors(ADCReceivedData[0]);
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <ADC_Proccess_Data+0x34>)

	// Check if new data available
	if (!(ADCReceivedData[0] & ADC_STATUS_DATA_READY_MASK))
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	0752      	lsls	r2, r2, #29
 800078c:	d412      	bmi.n	80007b4 <ADC_Proccess_Data+0x30>
	{
		//Transfer array of bytes to the 32 bit variable:
		ReadData = ADCReceivedData[1];
		ReadData <<= 8;
		ReadData += ADCReceivedData[2];
 800078e:	7898      	ldrb	r0, [r3, #2]
 8000790:	785a      	ldrb	r2, [r3, #1]
 8000792:	0200      	lsls	r0, r0, #8
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <ADC_Proccess_Data+0x38>)
 8000796:	4310      	orrs	r0, r2
 8000798:	ba42      	rev16	r2, r0
 800079a:	801a      	strh	r2, [r3, #0]
 800079c:	bac0      	revsh	r0, r0

		// Calculating real Voltage
		Voltage =  VREF * ReadData / 32768;
 800079e:	f7ff fe87 	bl	80004b0 <__aeabi_i2f>
 80007a2:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <ADC_Proccess_Data+0x3c>)
 80007a4:	f7ff fd46 	bl	8000234 <__aeabi_fmul>
 80007a8:	21e0      	movs	r1, #224	@ 0xe0
 80007aa:	0589      	lsls	r1, r1, #22
 80007ac:	f7ff fd42 	bl	8000234 <__aeabi_fmul>
 80007b0:	4c04      	ldr	r4, [pc, #16]	@ (80007c4 <ADC_Proccess_Data+0x40>)
 80007b2:	6020      	str	r0, [r4, #0]
	{
		// if no new data available, just return previous value
	}
	// Check if new data available to read from ADC:

}
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	2000002a 	.word	0x2000002a
 80007bc:	20000028 	.word	0x20000028
 80007c0:	40400000 	.word	0x40400000
 80007c4:	20000064 	.word	0x20000064

080007c8 <Expander_Init>:
 * @return				- none
 */
void Expander_Init(Expander_Handle_t *pExpander)
{
	//temporary variable to create an I2C message
	uint8_t temp[2] = {0};
 80007c8:	2300      	movs	r3, #0
{
 80007ca:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Reset Output register
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
	temp[1] = 0;
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 80007cc:	270a      	movs	r7, #10
{
 80007ce:	b085      	sub	sp, #20
	uint8_t temp[2] = {0};
 80007d0:	ac03      	add	r4, sp, #12
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 80007d2:	4e11      	ldr	r6, [pc, #68]	@ (8000818 <Expander_Init+0x50>)
	uint8_t temp[2] = {0};
 80007d4:	8023      	strh	r3, [r4, #0]
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 80007d6:	3301      	adds	r3, #1
{
 80007d8:	0005      	movs	r5, r0
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 80007da:	7801      	ldrb	r1, [r0, #0]
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 80007dc:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 80007de:	0022      	movs	r2, r4
 80007e0:	0030      	movs	r0, r6
 80007e2:	9700      	str	r7, [sp, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	f000 fdf9 	bl	80013dc <HAL_I2C_Master_Transmit>

	// Sending configuration register to the Device
	temp[0] = COMMAND_CONFIGURATION_REGISTER;
 80007ea:	2303      	movs	r3, #3
 80007ec:	7023      	strb	r3, [r4, #0]
	temp[1] = pExpander->ConfigReg;
 80007ee:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 80007f0:	7829      	ldrb	r1, [r5, #0]
	temp[1] = pExpander->ConfigReg;
 80007f2:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 80007f4:	0022      	movs	r2, r4
 80007f6:	2302      	movs	r3, #2
 80007f8:	0030      	movs	r0, r6
 80007fa:	9700      	str	r7, [sp, #0]
 80007fc:	f000 fdee 	bl	80013dc <HAL_I2C_Master_Transmit>

	// Sending polarity register to the Device
	temp[0] = COMMAND_POLARITY_INVERSION_REGISTER;
 8000800:	2302      	movs	r3, #2
 8000802:	7023      	strb	r3, [r4, #0]
	temp[1] = pExpander->PolarityPortReg;
 8000804:	78ea      	ldrb	r2, [r5, #3]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000806:	7829      	ldrb	r1, [r5, #0]
	temp[1] = pExpander->PolarityPortReg;
 8000808:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 800080a:	0030      	movs	r0, r6
 800080c:	0022      	movs	r2, r4
 800080e:	9700      	str	r7, [sp, #0]
 8000810:	f000 fde4 	bl	80013dc <HAL_I2C_Master_Transmit>



}
 8000814:	b005      	add	sp, #20
 8000816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000818:	20000188 	.word	0x20000188

0800081c <Expander_Write_Single_Bit>:

 *
 * @return				- Error if the pin is configure as an input and user try to assign value to this pin
 */
DeviceState Expander_Write_Single_Bit(Expander_Handle_t *pExpander, uint8_t BitNumber, PinState State)
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Before writing to the GPIO pin,
	// we need to make sure that this particular bin was configure as an output
	if (!((pExpander->ConfigReg) & (1 << BitNumber)))
 800081e:	7903      	ldrb	r3, [r0, #4]
 8000820:	2501      	movs	r5, #1
 8000822:	410b      	asrs	r3, r1
{
 8000824:	0004      	movs	r4, r0
 8000826:	0016      	movs	r6, r2
			return DEVICE_OK;
		}
	}
	else
	{
		return DEVICE_ERROR;
 8000828:	0028      	movs	r0, r5
{
 800082a:	b085      	sub	sp, #20
	if (!((pExpander->ConfigReg) & (1 << BitNumber)))
 800082c:	422b      	tst	r3, r5
 800082e:	d112      	bne.n	8000856 <Expander_Write_Single_Bit+0x3a>
			pExpander->OutputPortReg |= 1 << BitNumber;
 8000830:	002f      	movs	r7, r5
 8000832:	78a3      	ldrb	r3, [r4, #2]
 8000834:	408f      	lsls	r7, r1
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <Expander_Write_Single_Bit+0x48>)
			HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000838:	7821      	ldrb	r1, [r4, #0]
 800083a:	aa03      	add	r2, sp, #12
		if (State == PIN_SET)
 800083c:	42ae      	cmp	r6, r5
 800083e:	d10c      	bne.n	800085a <Expander_Write_Single_Bit+0x3e>
			pExpander->OutputPortReg |= 1 << BitNumber;
 8000840:	433b      	orrs	r3, r7
 8000842:	b2db      	uxtb	r3, r3
 8000844:	70a3      	strb	r3, [r4, #2]
			temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000846:	7016      	strb	r6, [r2, #0]
			temp[1] = pExpander->OutputPortReg;
 8000848:	7053      	strb	r3, [r2, #1]
			HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 800084a:	230a      	movs	r3, #10
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	3b08      	subs	r3, #8
 8000850:	f000 fdc4 	bl	80013dc <HAL_I2C_Master_Transmit>
			return DEVICE_OK;
 8000854:	2000      	movs	r0, #0
	}

}
 8000856:	b005      	add	sp, #20
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pExpander->OutputPortReg &=~(1 << BitNumber);
 800085a:	43bb      	bics	r3, r7
 800085c:	70a3      	strb	r3, [r4, #2]
			temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 800085e:	7015      	strb	r5, [r2, #0]
 8000860:	e7f2      	b.n	8000848 <Expander_Write_Single_Bit+0x2c>
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000188 	.word	0x20000188

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086a:	2610      	movs	r6, #16
{
 800086c:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	222c      	movs	r2, #44	@ 0x2c
 8000870:	2100      	movs	r1, #0
 8000872:	a809      	add	r0, sp, #36	@ 0x24
 8000874:	f001 ff94 	bl	80027a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	0032      	movs	r2, r6
 800087a:	2100      	movs	r1, #0
 800087c:	4668      	mov	r0, sp
 800087e:	f001 ff8f 	bl	80027a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000882:	0032      	movs	r2, r6
 8000884:	2100      	movs	r1, #0
 8000886:	a804      	add	r0, sp, #16
 8000888:	f001 ff8a 	bl	80027a0 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800088c:	23a0      	movs	r3, #160	@ 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000892:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000896:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	950b      	str	r5, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	960c      	str	r6, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800089e:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f000 fe86 	bl	80015b0 <HAL_RCC_OscConfig>
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	e7fe      	b.n	80008aa <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b0:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b2:	0029      	movs	r1, r5
 80008b4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	f001 f89d 	bl	80019f8 <HAL_RCC_ClockConfig>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x5e>
 80008c2:	b672      	cpsid	i
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <SystemClock_Config+0x5c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80008c6:	2321      	movs	r3, #33	@ 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008c8:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008ca:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80008ce:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f001 f926 	bl	8001b20 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x74>
 80008d8:	b672      	cpsid	i
  while (1)
 80008da:	e7fe      	b.n	80008da <SystemClock_Config+0x72>
}
 80008dc:	b014      	add	sp, #80	@ 0x50
 80008de:	bd70      	pop	{r4, r5, r6, pc}

080008e0 <main>:
{
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 80008e4:	f000 fa7a 	bl	8000ddc <HAL_Init>
  SystemClock_Config();
 80008e8:	f7ff ffbe 	bl	8000868 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	2214      	movs	r2, #20
 80008ee:	2100      	movs	r1, #0
 80008f0:	a805      	add	r0, sp, #20
 80008f2:	f001 ff55 	bl	80027a0 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	4b8d      	ldr	r3, [pc, #564]	@ (8000b30 <main+0x250>)
 80008fa:	03c9      	lsls	r1, r1, #15
 80008fc:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 80008fe:	488d      	ldr	r0, [pc, #564]	@ (8000b34 <main+0x254>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2600      	movs	r6, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000908:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090c:	9202      	str	r2, [sp, #8]
 800090e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	0289      	lsls	r1, r1, #10
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	9203      	str	r2, [sp, #12]
 8000922:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	02c9      	lsls	r1, r1, #11
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	400b      	ands	r3, r1
 8000932:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 8000934:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 8000938:	f000 fbae 	bl	8001098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FAN_3_EN_GPIO_Port, FAN_3_EN_Pin, GPIO_PIN_RESET);
 800093c:	2090      	movs	r0, #144	@ 0x90
 800093e:	2200      	movs	r2, #0
 8000940:	2102      	movs	r1, #2
 8000942:	05c0      	lsls	r0, r0, #23
 8000944:	f000 fba8 	bl	8001098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000948:	2090      	movs	r0, #144	@ 0x90
 800094a:	2201      	movs	r2, #1
 800094c:	2110      	movs	r1, #16
 800094e:	05c0      	lsls	r0, r0, #23
 8000950:	f000 fba2 	bl	8001098 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FAN_1_EN_Pin|FAN_2_EN_Pin;
 8000954:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000956:	4877      	ldr	r0, [pc, #476]	@ (8000b34 <main+0x254>)
 8000958:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = FAN_1_EN_Pin|FAN_2_EN_Pin;
 800095a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095c:	2484      	movs	r4, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000964:	f000 fae0 	bl	8000f28 <HAL_GPIO_Init>
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8000968:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096a:	03a4      	lsls	r4, r4, #14
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 800096c:	a905      	add	r1, sp, #20
 800096e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000970:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = IOEXPANDER_INT_L_Pin;
 8000972:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8000976:	f000 fad7 	bl	8000f28 <HAL_GPIO_Init>
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 800097a:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = FAN_3_EN_Pin;
 800097c:	2202      	movs	r2, #2
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 800097e:	a905      	add	r1, sp, #20
 8000980:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = FAN_3_EN_Pin;
 8000982:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 800098a:	f000 facd 	bl	8000f28 <HAL_GPIO_Init>
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 800098e:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 8000992:	2710      	movs	r7, #16
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000994:	a905      	add	r1, sp, #20
 8000996:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 800099a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f000 fac2 	bl	8000f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 80009a4:	2202      	movs	r2, #2
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009a6:	4864      	ldr	r0, [pc, #400]	@ (8000b38 <main+0x258>)
 80009a8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 80009aa:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f000 faba 	bl	8000f28 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009b4:	0031      	movs	r1, r6
 80009b6:	0032      	movs	r2, r6
 80009b8:	2005      	movs	r0, #5
 80009ba:	f000 fa43 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009be:	2005      	movs	r0, #5
 80009c0:	f000 fa6a 	bl	8000e98 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80009c4:	4c5d      	ldr	r4, [pc, #372]	@ (8000b3c <main+0x25c>)
 80009c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000b40 <main+0x260>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c8:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 80009ca:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80009cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000b44 <main+0x264>)
  hi2c1.Init.OwnAddress1 = 0;
 80009ce:	60a6      	str	r6, [r4, #8]
  hi2c1.Init.Timing = 0x2000090E;
 80009d0:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d4:	6126      	str	r6, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	6166      	str	r6, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	61a6      	str	r6, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	61e6      	str	r6, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	6226      	str	r6, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	f000 fc9f 	bl	8001320 <HAL_I2C_Init>
 80009e2:	0001      	movs	r1, r0
 80009e4:	42b0      	cmp	r0, r6
 80009e6:	d001      	beq.n	80009ec <main+0x10c>
 80009e8:	b672      	cpsid	i
  while (1)
 80009ea:	e7fe      	b.n	80009ea <main+0x10a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ec:	0020      	movs	r0, r4
 80009ee:	f000 fd95 	bl	800151c <HAL_I2CEx_ConfigAnalogFilter>
 80009f2:	1e01      	subs	r1, r0, #0
 80009f4:	d001      	beq.n	80009fa <main+0x11a>
 80009f6:	b672      	cpsid	i
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <main+0x118>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fa:	0020      	movs	r0, r4
 80009fc:	f000 fdb4 	bl	8001568 <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <main+0x128>
 8000a04:	b672      	cpsid	i
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <main+0x126>
  hspi1.Instance = SPI1;
 8000a08:	484f      	ldr	r0, [pc, #316]	@ (8000b48 <main+0x268>)
 8000a0a:	4a50      	ldr	r2, [pc, #320]	@ (8000b4c <main+0x26c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0c:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 8000a0e:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a10:	2282      	movs	r2, #130	@ 0x82
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a16:	22e0      	movs	r2, #224	@ 0xe0
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a1c:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a22:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a26:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a28:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2a:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8000a30:	3afa      	subs	r2, #250	@ 0xfa
 8000a32:	3aff      	subs	r2, #255	@ 0xff
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a34:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a36:	61c7      	str	r7, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000a38:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a3a:	f001 f9e3 	bl	8001e04 <HAL_SPI_Init>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <main+0x166>
 8000a42:	b672      	cpsid	i
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x164>
  huart1.Instance = USART1;
 8000a46:	4842      	ldr	r0, [pc, #264]	@ (8000b50 <main+0x270>)
 8000a48:	4a42      	ldr	r2, [pc, #264]	@ (8000b54 <main+0x274>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 8000a4c:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8000a4e:	2296      	movs	r2, #150	@ 0x96
 8000a50:	0212      	lsls	r2, r2, #8
 8000a52:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a56:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a58:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a60:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a64:	f001 fe6a 	bl	800273c <HAL_UART_Init>
 8000a68:	1e07      	subs	r7, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <main+0x190>
 8000a6c:	b672      	cpsid	i
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <main+0x18e>
  HAL_Delay(1000);
 8000a70:	20fa      	movs	r0, #250	@ 0xfa
 8000a72:	0080      	lsls	r0, r0, #2
 8000a74:	f000 f9d4 	bl	8000e20 <HAL_Delay>
	MyExpander.ExpanderAddress = 0x40;			//0b1000000
 8000a78:	2340      	movs	r3, #64	@ 0x40
 8000a7a:	4e37      	ldr	r6, [pc, #220]	@ (8000b58 <main+0x278>)
	Expander_Init(&MyExpander);
 8000a7c:	0030      	movs	r0, r6
	MyExpander.ExpanderAddress = 0x40;			//0b1000000
 8000a7e:	7033      	strb	r3, [r6, #0]
	MyExpander.ConfigReg = 0xF0;				//0b11110000
 8000a80:	33b0      	adds	r3, #176	@ 0xb0
 8000a82:	7133      	strb	r3, [r6, #4]
	MyExpander.PolarityPortReg = 0xF0;			//0b11110000
 8000a84:	70f3      	strb	r3, [r6, #3]
	Expander_Init(&MyExpander);
 8000a86:	f7ff fe9f 	bl	80007c8 <Expander_Init>
	Expander_Write_Single_Bit(&MyExpander, LED_BLUE, PIN_RESET);
 8000a8a:	003a      	movs	r2, r7
 8000a8c:	0039      	movs	r1, r7
 8000a8e:	0030      	movs	r0, r6
 8000a90:	f7ff fec4 	bl	800081c <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_RED, PIN_RESET);
 8000a94:	003a      	movs	r2, r7
 8000a96:	0029      	movs	r1, r5
 8000a98:	0030      	movs	r0, r6
 8000a9a:	f7ff febf 	bl	800081c <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_WHITE, PIN_RESET);
 8000a9e:	003a      	movs	r2, r7
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	0030      	movs	r0, r6
 8000aa4:	f7ff feba 	bl	800081c <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_AMBER, PIN_RESET);
 8000aa8:	003a      	movs	r2, r7
 8000aaa:	2103      	movs	r1, #3
 8000aac:	0030      	movs	r0, r6
 8000aae:	f7ff feb5 	bl	800081c <Expander_Write_Single_Bit>
	MyDAC.DACAddress = 0x63;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <main+0x27c>)
 8000ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8000b60 <main+0x280>)
	if (HAL_I2C_Master_Transmit(&I2C, MyDAC.DACAddress<<1, &MyDAC.Command, 3, 10) == HAL_OK)
 8000ab6:	21c6      	movs	r1, #198	@ 0xc6
	MyDAC.DACAddress = 0x63;
 8000ab8:	801a      	strh	r2, [r3, #0]
	MyDAC.DACValue = 0x0080;    // 0x80 - 1.5V
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	805a      	strh	r2, [r3, #2]
	if (HAL_I2C_Master_Transmit(&I2C, MyDAC.DACAddress<<1, &MyDAC.Command, 3, 10) == HAL_OK)
 8000abe:	230a      	movs	r3, #10
 8000ac0:	4a28      	ldr	r2, [pc, #160]	@ (8000b64 <main+0x284>)
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	3b07      	subs	r3, #7
 8000ac8:	f000 fc88 	bl	80013dc <HAL_I2C_Master_Transmit>
		Expander_Write_Single_Bit(&MyExpander, LED_WHITE, PIN_SET);
 8000acc:	002a      	movs	r2, r5
 8000ace:	2102      	movs	r1, #2
	if (HAL_I2C_Master_Transmit(&I2C, MyDAC.DACAddress<<1, &MyDAC.Command, 3, 10) == HAL_OK)
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d000      	beq.n	8000ad6 <main+0x1f6>
		Expander_Write_Single_Bit(&MyExpander, LED_RED, PIN_SET);
 8000ad4:	0029      	movs	r1, r5
 8000ad6:	0030      	movs	r0, r6
 8000ad8:	f7ff fea0 	bl	800081c <Expander_Write_Single_Bit>
	MyADC.Config0.ADCMode = ADC_STANDBY_MODE;
 8000adc:	23c0      	movs	r3, #192	@ 0xc0
 8000ade:	4c22      	ldr	r4, [pc, #136]	@ (8000b68 <main+0x288>)
 8000ae0:	6862      	ldr	r2, [r4, #4]
	ADC_Full_Reset(&MyADC);
 8000ae2:	0020      	movs	r0, r4
	MyADC.Config0.ADCMode = ADC_STANDBY_MODE;
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <main+0x28c>)
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6063      	str	r3, [r4, #4]
	MyADC.IRQ.EN_STP = CONVERSATION_START_INTERRUPT_DISABLED;
 8000aec:	23f0      	movs	r3, #240	@ 0xf0
 8000aee:	8922      	ldrh	r2, [r4, #8]
 8000af0:	401a      	ands	r2, r3
 8000af2:	3316      	adds	r3, #22
 8000af4:	4313      	orrs	r3, r2
	MyADC.LOCK = 0xA5;
 8000af6:	22a5      	movs	r2, #165	@ 0xa5
	MyADC.IRQ.EN_STP = CONVERSATION_START_INTERRUPT_DISABLED;
 8000af8:	8123      	strh	r3, [r4, #8]
	MyADC.LOCK = 0xA5;
 8000afa:	1ca3      	adds	r3, r4, #2
 8000afc:	77da      	strb	r2, [r3, #31]
	ADC_Full_Reset(&MyADC);
 8000afe:	f7ff fe03 	bl	8000708 <ADC_Full_Reset>
	ADC_Init(&MyADC);
 8000b02:	0020      	movs	r0, r4
	  HAL_Delay(500);
 8000b04:	24fa      	movs	r4, #250	@ 0xfa
	ADC_Init(&MyADC);
 8000b06:	f7ff fdc3 	bl	8000690 <ADC_Init>
	  HAL_Delay(500);
 8000b0a:	0064      	lsls	r4, r4, #1
	  Expander_Write_Single_Bit(&MyExpander, LED_BLUE, PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0030      	movs	r0, r6
 8000b12:	f7ff fe83 	bl	800081c <Expander_Write_Single_Bit>
	  HAL_Delay(500);
 8000b16:	0020      	movs	r0, r4
 8000b18:	f000 f982 	bl	8000e20 <HAL_Delay>
	  Expander_Write_Single_Bit(&MyExpander, LED_BLUE, PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0030      	movs	r0, r6
 8000b20:	0011      	movs	r1, r2
 8000b22:	f7ff fe7b 	bl	800081c <Expander_Write_Single_Bit>
	  HAL_Delay(500);
 8000b26:	0020      	movs	r0, r4
 8000b28:	f000 f97a 	bl	8000e20 <HAL_Delay>
  while (1)
 8000b2c:	e7ee      	b.n	8000b0c <main+0x22c>
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48001400 	.word	0x48001400
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	20000188 	.word	0x20000188
 8000b40:	40005400 	.word	0x40005400
 8000b44:	2000090e 	.word	0x2000090e
 8000b48:	20000124 	.word	0x20000124
 8000b4c:	40013000 	.word	0x40013000
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	40013800 	.word	0x40013800
 8000b58:	20000068 	.word	0x20000068
 8000b5c:	2000006e 	.word	0x2000006e
 8000b60:	00005963 	.word	0x00005963
 8000b64:	2000006f 	.word	0x2000006f
 8000b68:	20000074 	.word	0x20000074
 8000b6c:	a08bcc02 	.word	0xa08bcc02

08000b70 <HAL_GPIO_EXTI_Callback>:
{
 8000b70:	b510      	push	{r4, lr}
	if (GPIO_Pin == IOEXPANDER_INT_L_Pin)
 8000b72:	2801      	cmp	r0, #1
 8000b74:	d103      	bne.n	8000b7e <HAL_GPIO_EXTI_Callback+0xe>
		ADC_Start_Conversion(&MyADC);
 8000b76:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b78:	f7ff fdaa 	bl	80006d0 <ADC_Start_Conversion>
}
 8000b7c:	bd10      	pop	{r4, pc}
	else if (GPIO_Pin == ADC_IRQ_Pin)
 8000b7e:	2802      	cmp	r0, #2
 8000b80:	d1fc      	bne.n	8000b7c <HAL_GPIO_EXTI_Callback+0xc>
		Expander_Write_Single_Bit(&MyExpander, LED_AMBER, PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2103      	movs	r1, #3
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b88:	f7ff fe48 	bl	800081c <Expander_Write_Single_Bit>
		ADC_Get_Measured_DATA(&MyADC);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b8e:	f7ff fdd7 	bl	8000740 <ADC_Get_Measured_DATA>
		ADC_Proccess_Data();
 8000b92:	f7ff fdf7 	bl	8000784 <ADC_Proccess_Data>
}
 8000b96:	e7f1      	b.n	8000b7c <HAL_GPIO_EXTI_Callback+0xc>
 8000b98:	20000074 	.word	0x20000074
 8000b9c:	20000068 	.word	0x20000068

08000ba0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_MspInit+0x2c>)
{
 8000ba4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	619a      	str	r2, [r3, #24]
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	69da      	ldr	r2, [r3, #28]
 8000bb8:	0549      	lsls	r1, r1, #21
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	61da      	str	r2, [r3, #28]
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	400b      	ands	r3, r1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	b002      	add	sp, #8
 8000bc8:	4770      	bx	lr
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	0004      	movs	r4, r0
 8000bd4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	2100      	movs	r1, #0
 8000bda:	a803      	add	r0, sp, #12
 8000bdc:	f001 fde0 	bl	80027a0 <memset>
  if(hi2c->Instance==I2C1)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <HAL_I2C_MspInit+0x60>)
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d120      	bne.n	8000c2a <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	4c12      	ldr	r4, [pc, #72]	@ (8000c34 <HAL_I2C_MspInit+0x64>)
 8000bec:	0292      	lsls	r2, r2, #10
 8000bee:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	6163      	str	r3, [r4, #20]
 8000bf6:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c00:	23c0      	movs	r3, #192	@ 0xc0
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c06:	2312      	movs	r3, #18
 8000c08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0a:	3b0f      	subs	r3, #15
 8000c0c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c10:	3301      	adds	r3, #1
 8000c12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f000 f988 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c18:	2280      	movs	r2, #128	@ 0x80
 8000c1a:	69e3      	ldr	r3, [r4, #28]
 8000c1c:	0392      	lsls	r2, r2, #14
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61e3      	str	r3, [r4, #28]
 8000c22:	69e3      	ldr	r3, [r4, #28]
 8000c24:	4013      	ands	r3, r2
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2a:	b008      	add	sp, #32
 8000c2c:	bd10      	pop	{r4, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	2214      	movs	r2, #20
 8000c40:	2100      	movs	r1, #0
 8000c42:	a803      	add	r0, sp, #12
 8000c44:	f001 fdac 	bl	80027a0 <memset>
  if(hspi->Instance==SPI1)
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_SPI_MspInit+0x68>)
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d125      	bne.n	8000c9c <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_SPI_MspInit+0x6c>)
 8000c54:	0149      	lsls	r1, r1, #5
 8000c56:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	619a      	str	r2, [r3, #24]
 8000c5e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	0289      	lsls	r1, r1, #10
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	400b      	ands	r3, r1
 8000c76:	9302      	str	r3, [sp, #8]
 8000c78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c7a:	23e0      	movs	r3, #224	@ 0xe0
 8000c7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	3bde      	subs	r3, #222	@ 0xde
 8000c80:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	3301      	adds	r3, #1
 8000c86:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f000 f94e 	bl	8000f28 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2019      	movs	r0, #25
 8000c90:	0011      	movs	r1, r2
 8000c92:	f000 f8d7 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c96:	2019      	movs	r0, #25
 8000c98:	f000 f8fe 	bl	8000e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9c:	b008      	add	sp, #32
 8000c9e:	bd10      	pop	{r4, pc}
 8000ca0:	40013000 	.word	0x40013000
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b510      	push	{r4, lr}
 8000caa:	0004      	movs	r4, r0
 8000cac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	2214      	movs	r2, #20
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	a803      	add	r0, sp, #12
 8000cb4:	f001 fd74 	bl	80027a0 <memset>
  if(huart->Instance==USART1)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_UART_MspInit+0x5c>)
 8000cba:	6822      	ldr	r2, [r4, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d11f      	bne.n	8000d00 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_UART_MspInit+0x60>)
 8000cc4:	01c9      	lsls	r1, r1, #7
 8000cc6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	619a      	str	r2, [r3, #24]
 8000cce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	695a      	ldr	r2, [r3, #20]
 8000cdc:	0289      	lsls	r1, r1, #10
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	400b      	ands	r3, r1
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cea:	230c      	movs	r3, #12
 8000cec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	3b0a      	subs	r3, #10
 8000cf0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cf8:	3b02      	subs	r3, #2
 8000cfa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f000 f914 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d00:	b008      	add	sp, #32
 8000d02:	bd10      	pop	{r4, pc}
 8000d04:	40013800 	.word	0x40013800
 8000d08:	40021000 	.word	0x40021000

08000d0c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler>

08000d0e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler>

08000d10 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f000 f871 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bd10      	pop	{r4, pc}

08000d1c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOEXPANDER_INT_L_Pin);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 f9c0 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADC_IRQ_Pin);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 f9bd 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d2a:	bd10      	pop	{r4, pc}

08000d2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d2e:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <SPI1_IRQHandler+0xc>)
 8000d30:	f001 faae 	bl	8002290 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	20000124 	.word	0x20000124

08000d3c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d3c:	4770      	bx	lr
	...

08000d40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d40:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d44:	f7ff fffa 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6e:	f001 fd1f 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff fdb5 	bl	80008e0 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   r0, =_estack
 8000d78:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d84:	08002854 	.word	0x08002854
  ldr r2, =_sbss
 8000d88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d8c:	200001e0 	.word	0x200001e0

08000d90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_IRQHandler>
	...

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	20fa      	movs	r0, #250	@ 0xfa
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_InitTick+0x3c>)
 8000d9c:	0080      	lsls	r0, r0, #2
 8000d9e:	7819      	ldrb	r1, [r3, #0]
 8000da0:	f7ff f9bc 	bl	800011c <__udivsi3>
 8000da4:	4c0b      	ldr	r4, [pc, #44]	@ (8000dd4 <HAL_InitTick+0x40>)
 8000da6:	0001      	movs	r1, r0
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	f7ff f9b7 	bl	800011c <__udivsi3>
 8000dae:	f000 f87f 	bl	8000eb0 <HAL_SYSTICK_Config>
 8000db2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d109      	bne.n	8000dce <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	2d03      	cmp	r5, #3
 8000dbc:	d807      	bhi.n	8000dce <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	0022      	movs	r2, r4
 8000dc2:	0029      	movs	r1, r5
 8000dc4:	f000 f83e 	bl	8000e44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	0020      	movs	r0, r4
 8000dca:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_InitTick+0x44>)
 8000dcc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	2310      	movs	r3, #16
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_Init+0x1c>)
{
 8000de0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	f7ff ffd3 	bl	8000d94 <HAL_InitTick>
  HAL_MspInit();
 8000dee:	f7ff fed7 	bl	8000ba0 <HAL_MspInit>
}
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	@ (8000e0c <HAL_IncTick+0x10>)
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <HAL_IncTick+0x14>)
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	185b      	adds	r3, r3, r1
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	4770      	bx	lr
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	200001dc 	.word	0x200001dc
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e14:	4b01      	ldr	r3, [pc, #4]	@ (8000e1c <HAL_GetTick+0x8>)
 8000e16:	6818      	ldr	r0, [r3, #0]
}
 8000e18:	4770      	bx	lr
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	200001dc 	.word	0x200001dc

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff6 	bl	8000e14 <HAL_GetTick>
 8000e28:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	1c63      	adds	r3, r4, #1
 8000e2c:	d002      	beq.n	8000e34 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <HAL_Delay+0x20>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	1b40      	subs	r0, r0, r5
 8000e3a:	42a0      	cmp	r0, r4
 8000e3c:	d3fa      	bcc.n	8000e34 <HAL_Delay+0x14>
  {
  }
}
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e46:	24ff      	movs	r4, #255	@ 0xff
 8000e48:	2203      	movs	r2, #3
 8000e4a:	000b      	movs	r3, r1
 8000e4c:	0021      	movs	r1, r4
 8000e4e:	4002      	ands	r2, r0
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e54:	019b      	lsls	r3, r3, #6
 8000e56:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	db0a      	blt.n	8000e76 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	24c0      	movs	r4, #192	@ 0xc0
 8000e62:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_NVIC_SetPriority+0x4c>)
 8000e64:	0880      	lsrs	r0, r0, #2
 8000e66:	0080      	lsls	r0, r0, #2
 8000e68:	1880      	adds	r0, r0, r2
 8000e6a:	00a4      	lsls	r4, r4, #2
 8000e6c:	5902      	ldr	r2, [r0, r4]
 8000e6e:	400a      	ands	r2, r1
 8000e70:	4313      	orrs	r3, r2
 8000e72:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e74:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e76:	220f      	movs	r2, #15
 8000e78:	4010      	ands	r0, r2
 8000e7a:	3808      	subs	r0, #8
 8000e7c:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <HAL_NVIC_SetPriority+0x50>)
 8000e7e:	0880      	lsrs	r0, r0, #2
 8000e80:	0080      	lsls	r0, r0, #2
 8000e82:	1880      	adds	r0, r0, r2
 8000e84:	69c2      	ldr	r2, [r0, #28]
 8000e86:	4011      	ands	r1, r2
 8000e88:	4319      	orrs	r1, r3
 8000e8a:	61c1      	str	r1, [r0, #28]
 8000e8c:	e7f2      	b.n	8000e74 <HAL_NVIC_SetPriority+0x30>
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	db05      	blt.n	8000ea8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9c:	231f      	movs	r3, #31
 8000e9e:	4018      	ands	r0, r3
 8000ea0:	3b1e      	subs	r3, #30
 8000ea2:	4083      	lsls	r3, r0
 8000ea4:	4a01      	ldr	r2, [pc, #4]	@ (8000eac <HAL_NVIC_EnableIRQ+0x14>)
 8000ea6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ea8:	4770      	bx	lr
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	1e43      	subs	r3, r0, #1
 8000eb4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d20d      	bcs.n	8000ed8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	6a03      	ldr	r3, [r0, #32]
 8000ec6:	0609      	lsls	r1, r1, #24
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ed8:	4770      	bx	lr
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	e000e010 	.word	0xe000e010
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ee6:	1c84      	adds	r4, r0, #2
 8000ee8:	7fe3      	ldrb	r3, [r4, #31]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d003      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	6383      	str	r3, [r0, #56]	@ 0x38

    status = HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ef6:	210e      	movs	r1, #14
 8000ef8:	6803      	ldr	r3, [r0, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	438a      	bics	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f00:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f02:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	4391      	bics	r1, r2
 8000f08:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f0a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8000f0c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000f0e:	408d      	lsls	r5, r1
 8000f10:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f12:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000f14:	1883      	adds	r3, r0, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8000f1a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d000      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8000f20:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	e7e6      	b.n	8000ef4 <HAL_DMA_Abort_IT+0x10>
	...

08000f28 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000f28:	2300      	movs	r3, #0
{
 8000f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	680a      	ldr	r2, [r1, #0]
 8000f30:	0014      	movs	r4, r2
 8000f32:	40dc      	lsrs	r4, r3
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000f36:	b007      	add	sp, #28
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3a:	2501      	movs	r5, #1
 8000f3c:	0014      	movs	r4, r2
 8000f3e:	409d      	lsls	r5, r3
 8000f40:	402c      	ands	r4, r5
 8000f42:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000f44:	422a      	tst	r2, r5
 8000f46:	d100      	bne.n	8000f4a <HAL_GPIO_Init+0x22>
 8000f48:	e098      	b.n	800107c <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f4a:	684a      	ldr	r2, [r1, #4]
 8000f4c:	005f      	lsls	r7, r3, #1
 8000f4e:	4694      	mov	ip, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	4664      	mov	r4, ip
 8000f54:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f56:	2403      	movs	r4, #3
 8000f58:	40bc      	lsls	r4, r7
 8000f5a:	43e4      	mvns	r4, r4
 8000f5c:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f5e:	1e54      	subs	r4, r2, #1
 8000f60:	2c01      	cmp	r4, #1
 8000f62:	d82e      	bhi.n	8000fc2 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000f64:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f66:	9c01      	ldr	r4, [sp, #4]
 8000f68:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f6a:	68cc      	ldr	r4, [r1, #12]
 8000f6c:	40bc      	lsls	r4, r7
 8000f6e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000f70:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f72:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f74:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f76:	43ac      	bics	r4, r5
 8000f78:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	4664      	mov	r4, ip
 8000f7c:	0924      	lsrs	r4, r4, #4
 8000f7e:	4034      	ands	r4, r6
 8000f80:	409c      	lsls	r4, r3
 8000f82:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000f84:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000f86:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f88:	9c01      	ldr	r4, [sp, #4]
 8000f8a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8c:	688c      	ldr	r4, [r1, #8]
 8000f8e:	40bc      	lsls	r4, r7
 8000f90:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000f92:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f94:	2a02      	cmp	r2, #2
 8000f96:	d116      	bne.n	8000fc6 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f98:	2507      	movs	r5, #7
 8000f9a:	260f      	movs	r6, #15
 8000f9c:	401d      	ands	r5, r3
 8000f9e:	00ad      	lsls	r5, r5, #2
 8000fa0:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000fa2:	08dc      	lsrs	r4, r3, #3
 8000fa4:	00a4      	lsls	r4, r4, #2
 8000fa6:	1904      	adds	r4, r0, r4
 8000fa8:	9402      	str	r4, [sp, #8]
 8000faa:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fac:	9603      	str	r6, [sp, #12]
 8000fae:	0026      	movs	r6, r4
 8000fb0:	9c03      	ldr	r4, [sp, #12]
 8000fb2:	43a6      	bics	r6, r4
 8000fb4:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	690e      	ldr	r6, [r1, #16]
 8000fb8:	40ae      	lsls	r6, r5
 8000fba:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000fbc:	9c02      	ldr	r4, [sp, #8]
 8000fbe:	6226      	str	r6, [r4, #32]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	2a03      	cmp	r2, #3
 8000fc4:	d1df      	bne.n	8000f86 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000fc8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fca:	9d01      	ldr	r5, [sp, #4]
 8000fcc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fce:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd0:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000fd2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	02a4      	lsls	r4, r4, #10
 8000fd8:	4222      	tst	r2, r4
 8000fda:	d04f      	beq.n	800107c <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fdc:	2501      	movs	r5, #1
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe0:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe4:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	432c      	orrs	r4, r5
 8000fe8:	6194      	str	r4, [r2, #24]
 8000fea:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fec:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	402a      	ands	r2, r5
 8000ff0:	9205      	str	r2, [sp, #20]
 8000ff2:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff4:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <HAL_GPIO_Init+0x15c>)
 8000ff6:	00a4      	lsls	r4, r4, #2
 8000ff8:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	3502      	adds	r5, #2
 8000ffe:	401d      	ands	r5, r3
 8001000:	00ad      	lsls	r5, r5, #2
 8001002:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001004:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001006:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001008:	2200      	movs	r2, #0
 800100a:	42b8      	cmp	r0, r7
 800100c:	d00c      	beq.n	8001028 <HAL_GPIO_Init+0x100>
 800100e:	4f1e      	ldr	r7, [pc, #120]	@ (8001088 <HAL_GPIO_Init+0x160>)
 8001010:	3201      	adds	r2, #1
 8001012:	42b8      	cmp	r0, r7
 8001014:	d008      	beq.n	8001028 <HAL_GPIO_Init+0x100>
 8001016:	4f1d      	ldr	r7, [pc, #116]	@ (800108c <HAL_GPIO_Init+0x164>)
 8001018:	3201      	adds	r2, #1
 800101a:	42b8      	cmp	r0, r7
 800101c:	d004      	beq.n	8001028 <HAL_GPIO_Init+0x100>
 800101e:	4f1c      	ldr	r7, [pc, #112]	@ (8001090 <HAL_GPIO_Init+0x168>)
 8001020:	3203      	adds	r2, #3
 8001022:	42b8      	cmp	r0, r7
 8001024:	d100      	bne.n	8001028 <HAL_GPIO_Init+0x100>
 8001026:	3a02      	subs	r2, #2
 8001028:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102a:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001030:	4a18      	ldr	r2, [pc, #96]	@ (8001094 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8001032:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001034:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001036:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001038:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800103a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	02ff      	lsls	r7, r7, #11
 800103e:	d401      	bmi.n	8001044 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8001040:	0035      	movs	r5, r6
 8001042:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001044:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001046:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001048:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800104a:	9d00      	ldr	r5, [sp, #0]
 800104c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104e:	02bf      	lsls	r7, r7, #10
 8001050:	d401      	bmi.n	8001056 <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8001052:	0035      	movs	r5, r6
 8001054:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001056:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8001058:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800105a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800105c:	9d00      	ldr	r5, [sp, #0]
 800105e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001060:	03bf      	lsls	r7, r7, #14
 8001062:	d401      	bmi.n	8001068 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8001064:	0035      	movs	r5, r6
 8001066:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001068:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800106a:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800106c:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800106e:	9e00      	ldr	r6, [sp, #0]
 8001070:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001072:	03ff      	lsls	r7, r7, #15
 8001074:	d401      	bmi.n	800107a <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 8001076:	4025      	ands	r5, r4
 8001078:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800107a:	6016      	str	r6, [r2, #0]
    position++;
 800107c:	3301      	adds	r3, #1
 800107e:	e756      	b.n	8000f2e <HAL_GPIO_Init+0x6>
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001098:	2a00      	cmp	r2, #0
 800109a:	d001      	beq.n	80010a0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800109e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80010a2:	e7fc      	b.n	800109e <HAL_GPIO_WritePin+0x6>

080010a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80010a6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	4210      	tst	r0, r2
 80010ac:	d002      	beq.n	80010b4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010b0:	f7ff fd5e 	bl	8000b70 <HAL_GPIO_EXTI_Callback>
  }
}
 80010b4:	bd10      	pop	{r4, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	40010400 	.word	0x40010400

080010bc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	699a      	ldr	r2, [r3, #24]
 80010c0:	0792      	lsls	r2, r2, #30
 80010c2:	d501      	bpl.n	80010c8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80010c4:	2200      	movs	r2, #0
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010c8:	2201      	movs	r2, #1
 80010ca:	6999      	ldr	r1, [r3, #24]
 80010cc:	4211      	tst	r1, r2
 80010ce:	d102      	bne.n	80010d6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80010d0:	6999      	ldr	r1, [r3, #24]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	619a      	str	r2, [r3, #24]
  }
}
 80010d6:	4770      	bx	lr

080010d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80010d8:	b530      	push	{r4, r5, lr}
 80010da:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80010dc:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010de:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010e0:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010e2:	0589      	lsls	r1, r1, #22
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <I2C_TransferConfig+0x28>)
 80010ea:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010ec:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80010ee:	0d64      	lsrs	r4, r4, #21
 80010f0:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010f2:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80010f4:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010f6:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80010f8:	432a      	orrs	r2, r5
 80010fa:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80010fc:	bd30      	pop	{r4, r5, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	03ff63ff 	.word	0x03ff63ff

08001104 <I2C_IsErrorOccurred>:
{
 8001104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001106:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001108:	6802      	ldr	r2, [r0, #0]
{
 800110a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800110c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800110e:	2310      	movs	r3, #16
 8001110:	000f      	movs	r7, r1
{
 8001112:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001114:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001118:	4219      	tst	r1, r3
 800111a:	d00d      	beq.n	8001138 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800111e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001120:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	2120      	movs	r1, #32
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	420a      	tst	r2, r1
 800112a:	d15f      	bne.n	80011ec <I2C_IsErrorOccurred+0xe8>
 800112c:	2f00      	cmp	r7, #0
 800112e:	d031      	beq.n	8001194 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8001130:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001132:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8001134:	9b01      	ldr	r3, [sp, #4]
 8001136:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001138:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 800113a:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800113c:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 800113e:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001140:	4213      	tst	r3, r2
 8001142:	d002      	beq.n	800114a <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8001144:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001146:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001148:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800114a:	2280      	movs	r2, #128	@ 0x80
 800114c:	00d2      	lsls	r2, r2, #3
 800114e:	4213      	tst	r3, r2
 8001150:	d003      	beq.n	800115a <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8001152:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8001154:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8001156:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001158:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4213      	tst	r3, r2
 8001160:	d049      	beq.n	80011f6 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001162:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001164:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8001166:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8001168:	0020      	movs	r0, r4
 800116a:	f7ff ffa7 	bl	80010bc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800116e:	686b      	ldr	r3, [r5, #4]
 8001170:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8001172:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001174:	4013      	ands	r3, r2
 8001176:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8001178:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800117a:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800117c:	433b      	orrs	r3, r7
 800117e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001180:	0023      	movs	r3, r4
 8001182:	3341      	adds	r3, #65	@ 0x41
 8001184:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001186:	0022      	movs	r2, r4
 8001188:	2300      	movs	r3, #0
 800118a:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 800118c:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800118e:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001190:	7023      	strb	r3, [r4, #0]
 8001192:	e032      	b.n	80011fa <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8001194:	1c72      	adds	r2, r6, #1
 8001196:	d0c5      	beq.n	8001124 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001198:	f7ff fe3c 	bl	8000e14 <HAL_GetTick>
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	42b0      	cmp	r0, r6
 80011a0:	d801      	bhi.n	80011a6 <I2C_IsErrorOccurred+0xa2>
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	d1bd      	bne.n	8001122 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 80011a6:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80011a8:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80011aa:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80011ac:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80011ae:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80011b0:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 80011b2:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80011b4:	0412      	lsls	r2, r2, #16
 80011b6:	d50b      	bpl.n	80011d0 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80011bc:	4210      	tst	r0, r2
 80011be:	d107      	bne.n	80011d0 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 80011c0:	2920      	cmp	r1, #32
 80011c2:	d005      	beq.n	80011d0 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80011ca:	f7ff fe23 	bl	8000e14 <HAL_GetTick>
 80011ce:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011d0:	2220      	movs	r2, #32
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4213      	tst	r3, r2
 80011d8:	d1a3      	bne.n	8001122 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80011da:	f7ff fe1b 	bl	8000e14 <HAL_GetTick>
 80011de:	1b40      	subs	r0, r0, r5
 80011e0:	2819      	cmp	r0, #25
 80011e2:	d9f5      	bls.n	80011d0 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80011e4:	2320      	movs	r3, #32
              status = HAL_ERROR;
 80011e6:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	e79a      	b.n	8001122 <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 80011ec:	2f00      	cmp	r7, #0
 80011ee:	d19f      	bne.n	8001130 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011f0:	2220      	movs	r2, #32
 80011f2:	61da      	str	r2, [r3, #28]
 80011f4:	e79c      	b.n	8001130 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d1b6      	bne.n	8001168 <I2C_IsErrorOccurred+0x64>
}
 80011fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80011fc:	fe00e800 	.word	0xfe00e800

08001200 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1
 8001206:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001208:	2702      	movs	r7, #2
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	423b      	tst	r3, r7
 8001210:	d001      	beq.n	8001216 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001212:	2000      	movs	r0, #0
 8001214:	e021      	b.n	800125a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001216:	0032      	movs	r2, r6
 8001218:	0029      	movs	r1, r5
 800121a:	0020      	movs	r0, r4
 800121c:	f7ff ff72 	bl	8001104 <I2C_IsErrorOccurred>
 8001220:	2800      	cmp	r0, #0
 8001222:	d119      	bne.n	8001258 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8001224:	1c6b      	adds	r3, r5, #1
 8001226:	d0f0      	beq.n	800120a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001228:	f7ff fdf4 	bl	8000e14 <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	42a8      	cmp	r0, r5
 8001230:	d801      	bhi.n	8001236 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001232:	2d00      	cmp	r5, #0
 8001234:	d1e9      	bne.n	800120a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	6999      	ldr	r1, [r3, #24]
 800123a:	2302      	movs	r3, #2
 800123c:	000a      	movs	r2, r1
 800123e:	401a      	ands	r2, r3
 8001240:	4219      	tst	r1, r3
 8001242:	d1e2      	bne.n	800120a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001244:	2120      	movs	r1, #32
 8001246:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001248:	430b      	orrs	r3, r1
 800124a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800124c:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 800124e:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8001250:	3341      	adds	r3, #65	@ 0x41
 8001252:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001254:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8001256:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
}
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800125c <I2C_WaitOnFlagUntilTimeout>:
{
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	0004      	movs	r4, r0
 8001260:	000d      	movs	r5, r1
 8001262:	0017      	movs	r7, r2
 8001264:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	402b      	ands	r3, r5
 800126c:	1b5b      	subs	r3, r3, r5
 800126e:	425a      	negs	r2, r3
 8001270:	4153      	adcs	r3, r2
 8001272:	42bb      	cmp	r3, r7
 8001274:	d001      	beq.n	800127a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001276:	2000      	movs	r0, #0
 8001278:	e026      	b.n	80012c8 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800127a:	0031      	movs	r1, r6
 800127c:	0020      	movs	r0, r4
 800127e:	9a06      	ldr	r2, [sp, #24]
 8001280:	f7ff ff40 	bl	8001104 <I2C_IsErrorOccurred>
 8001284:	2800      	cmp	r0, #0
 8001286:	d11e      	bne.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001288:	1c73      	adds	r3, r6, #1
 800128a:	d0ec      	beq.n	8001266 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800128c:	f7ff fdc2 	bl	8000e14 <HAL_GetTick>
 8001290:	9b06      	ldr	r3, [sp, #24]
 8001292:	1ac0      	subs	r0, r0, r3
 8001294:	42b0      	cmp	r0, r6
 8001296:	d801      	bhi.n	800129c <I2C_WaitOnFlagUntilTimeout+0x40>
 8001298:	2e00      	cmp	r6, #0
 800129a:	d1e4      	bne.n	8001266 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	402b      	ands	r3, r5
 80012a2:	1b5b      	subs	r3, r3, r5
 80012a4:	425a      	negs	r2, r3
 80012a6:	4153      	adcs	r3, r2
 80012a8:	42bb      	cmp	r3, r7
 80012aa:	d1dc      	bne.n	8001266 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ac:	2220      	movs	r2, #32
 80012ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	0023      	movs	r3, r4
 80012b6:	3341      	adds	r3, #65	@ 0x41
 80012b8:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ba:	0022      	movs	r2, r4
 80012bc:	2300      	movs	r3, #0
 80012be:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 80012c0:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c2:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80012c4:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80012c6:	2001      	movs	r0, #1
}
 80012c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012ca <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80012ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012cc:	0004      	movs	r4, r0
 80012ce:	000e      	movs	r6, r1
 80012d0:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012d2:	2520      	movs	r5, #32
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	422b      	tst	r3, r5
 80012da:	d001      	beq.n	80012e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
 80012de:	e01d      	b.n	800131c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e0:	003a      	movs	r2, r7
 80012e2:	0031      	movs	r1, r6
 80012e4:	0020      	movs	r0, r4
 80012e6:	f7ff ff0d 	bl	8001104 <I2C_IsErrorOccurred>
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d115      	bne.n	800131a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ee:	f7ff fd91 	bl	8000e14 <HAL_GetTick>
 80012f2:	1bc0      	subs	r0, r0, r7
 80012f4:	42b0      	cmp	r0, r6
 80012f6:	d801      	bhi.n	80012fc <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d1eb      	bne.n	80012d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	001a      	movs	r2, r3
 8001302:	402a      	ands	r2, r5
 8001304:	422b      	tst	r3, r5
 8001306:	d1e5      	bne.n	80012d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001308:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800130a:	432b      	orrs	r3, r5
 800130c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800130e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8001310:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001312:	3341      	adds	r3, #65	@ 0x41
 8001314:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001316:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001318:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
}
 800131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001320 <HAL_I2C_Init>:
{
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001326:	2c00      	cmp	r4, #0
 8001328:	d04e      	beq.n	80013c8 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132a:	0025      	movs	r5, r4
 800132c:	3541      	adds	r5, #65	@ 0x41
 800132e:	782b      	ldrb	r3, [r5, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001336:	0023      	movs	r3, r4
 8001338:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800133a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800133c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800133e:	f7ff fc47 	bl	8000bd0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001342:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001344:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001346:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001348:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800134a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800134c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800134e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001350:	438a      	bics	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001354:	491d      	ldr	r1, [pc, #116]	@ (80013cc <HAL_I2C_Init+0xac>)
 8001356:	6862      	ldr	r2, [r4, #4]
 8001358:	400a      	ands	r2, r1
 800135a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	491c      	ldr	r1, [pc, #112]	@ (80013d0 <HAL_I2C_Init+0xb0>)
 8001360:	400a      	ands	r2, r1
 8001362:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001364:	2801      	cmp	r0, #1
 8001366:	d107      	bne.n	8001378 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	0212      	lsls	r2, r2, #8
 800136c:	4332      	orrs	r2, r6
 800136e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <HAL_I2C_Init+0xb4>)
 8001374:	4002      	ands	r2, r0
 8001376:	e009      	b.n	800138c <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001378:	2284      	movs	r2, #132	@ 0x84
 800137a:	0212      	lsls	r2, r2, #8
 800137c:	4332      	orrs	r2, r6
 800137e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001380:	2802      	cmp	r0, #2
 8001382:	d1f5      	bne.n	8001370 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	6858      	ldr	r0, [r3, #4]
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800138c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800138e:	6858      	ldr	r0, [r3, #4]
 8001390:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <HAL_I2C_Init+0xb8>)
 8001392:	4302      	orrs	r2, r0
 8001394:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001396:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800139a:	400a      	ands	r2, r1
 800139c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800139e:	6961      	ldr	r1, [r4, #20]
 80013a0:	6922      	ldr	r2, [r4, #16]
 80013a2:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013a4:	69a1      	ldr	r1, [r4, #24]
 80013a6:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a8:	430a      	orrs	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ac:	6a21      	ldr	r1, [r4, #32]
 80013ae:	69e2      	ldr	r2, [r4, #28]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80013b4:	2201      	movs	r2, #1
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013be:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013c2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	3442      	adds	r4, #66	@ 0x42
 80013c6:	7020      	strb	r0, [r4, #0]
}
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	f0ffffff 	.word	0xf0ffffff
 80013d0:	ffff7fff 	.word	0xffff7fff
 80013d4:	fffff7ff 	.word	0xfffff7ff
 80013d8:	02008000 	.word	0x02008000

080013dc <HAL_I2C_Master_Transmit>:
{
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013de:	0006      	movs	r6, r0
{
 80013e0:	b085      	sub	sp, #20
 80013e2:	9202      	str	r2, [sp, #8]
 80013e4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e6:	3641      	adds	r6, #65	@ 0x41
 80013e8:	7833      	ldrb	r3, [r6, #0]
{
 80013ea:	0004      	movs	r4, r0
 80013ec:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 80013ee:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d114      	bne.n	800141e <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 80013f4:	0023      	movs	r3, r4
 80013f6:	3340      	adds	r3, #64	@ 0x40
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	2a01      	cmp	r2, #1
 80013fc:	d00f      	beq.n	800141e <HAL_I2C_Master_Transmit+0x42>
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001402:	f7ff fd07 	bl	8000e14 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001406:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8001408:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800140a:	9000      	str	r0, [sp, #0]
 800140c:	2319      	movs	r3, #25
 800140e:	2201      	movs	r2, #1
 8001410:	0020      	movs	r0, r4
 8001412:	0209      	lsls	r1, r1, #8
 8001414:	f7ff ff22 	bl	800125c <I2C_WaitOnFlagUntilTimeout>
 8001418:	2800      	cmp	r0, #0
 800141a:	d002      	beq.n	8001422 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 800141c:	2001      	movs	r0, #1
}
 800141e:	b005      	add	sp, #20
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001422:	2321      	movs	r3, #33	@ 0x21
 8001424:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001426:	0023      	movs	r3, r4
 8001428:	2210      	movs	r2, #16
 800142a:	3342      	adds	r3, #66	@ 0x42
 800142c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr  = pData;
 800142e:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001432:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001434:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8001436:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8001438:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800143a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800143c:	2bff      	cmp	r3, #255	@ 0xff
 800143e:	d834      	bhi.n	80014aa <HAL_I2C_Master_Transmit+0xce>
      xfermode = I2C_AUTOEND_MODE;
 8001440:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001442:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8001444:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001446:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 8001448:	4932      	ldr	r1, [pc, #200]	@ (8001514 <HAL_I2C_Master_Transmit+0x138>)
 800144a:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 800144c:	2a00      	cmp	r2, #0
 800144e:	d00f      	beq.n	8001470 <HAL_I2C_Master_Transmit+0x94>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001450:	9e02      	ldr	r6, [sp, #8]
 8001452:	6820      	ldr	r0, [r4, #0]
 8001454:	7836      	ldrb	r6, [r6, #0]
      hi2c->XferSize--;
 8001456:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001458:	6286      	str	r6, [r0, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800145a:	9802      	ldr	r0, [sp, #8]
      hi2c->XferSize--;
 800145c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800145e:	3001      	adds	r0, #1
 8001460:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001462:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001464:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001466:	3801      	subs	r0, #1
 8001468:	b280      	uxth	r0, r0
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800146a:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800146c:	8560      	strh	r0, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800146e:	b2d2      	uxtb	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001470:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001472:	0039      	movs	r1, r7
 8001474:	0020      	movs	r0, r4
 8001476:	f7ff fe2f 	bl	80010d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800147a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147c:	002a      	movs	r2, r5
 800147e:	0020      	movs	r0, r4
 8001480:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001482:	2b00      	cmp	r3, #0
 8001484:	d115      	bne.n	80014b2 <HAL_I2C_Master_Transmit+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001486:	f7ff ff20 	bl	80012ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800148a:	2800      	cmp	r0, #0
 800148c:	d1c6      	bne.n	800141c <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800148e:	2120      	movs	r1, #32
 8001490:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001492:	4d21      	ldr	r5, [pc, #132]	@ (8001518 <HAL_I2C_Master_Transmit+0x13c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001494:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	402a      	ands	r2, r5
 800149a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800149c:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800149e:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80014a0:	3341      	adds	r3, #65	@ 0x41
 80014a2:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014a4:	7058      	strb	r0, [r3, #1]
    __HAL_UNLOCK(hi2c);
 80014a6:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80014a8:	e7b9      	b.n	800141e <HAL_I2C_Master_Transmit+0x42>
      xfermode = I2C_RELOAD_MODE;
 80014aa:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ac:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80014ae:	045b      	lsls	r3, r3, #17
 80014b0:	e7ca      	b.n	8001448 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b2:	f7ff fea5 	bl	8001200 <I2C_WaitOnTXISFlagUntilTimeout>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1b0      	bne.n	800141c <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80014bc:	6822      	ldr	r2, [r4, #0]
 80014be:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80014c0:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014c2:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80014c4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80014c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80014c8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80014d0:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80014d4:	b292      	uxth	r2, r2
 80014d6:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ce      	beq.n	800147a <HAL_I2C_Master_Transmit+0x9e>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1cc      	bne.n	800147a <HAL_I2C_Master_Transmit+0x9e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	0020      	movs	r0, r4
 80014e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80014e6:	9500      	str	r5, [sp, #0]
 80014e8:	f7ff feb8 	bl	800125c <I2C_WaitOnFlagUntilTimeout>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d000      	beq.n	80014f2 <HAL_I2C_Master_Transmit+0x116>
 80014f0:	e794      	b.n	800141c <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80014f4:	2bff      	cmp	r3, #255	@ 0xff
 80014f6:	d905      	bls.n	8001504 <HAL_I2C_Master_Transmit+0x128>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f8:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014fa:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014fc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014fe:	045b      	lsls	r3, r3, #17
 8001500:	9000      	str	r0, [sp, #0]
 8001502:	e7b6      	b.n	8001472 <HAL_I2C_Master_Transmit+0x96>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001504:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001506:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001508:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800150a:	b292      	uxth	r2, r2
 800150c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	9000      	str	r0, [sp, #0]
 8001512:	e7ae      	b.n	8001472 <HAL_I2C_Master_Transmit+0x96>
 8001514:	80002000 	.word	0x80002000
 8001518:	fe00e800 	.word	0xfe00e800

0800151c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151e:	0004      	movs	r4, r0
 8001520:	3441      	adds	r4, #65	@ 0x41
 8001522:	7822      	ldrb	r2, [r4, #0]
{
 8001524:	0003      	movs	r3, r0
 8001526:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001528:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	b2d6      	uxtb	r6, r2
 800152c:	2a20      	cmp	r2, #32
 800152e:	d118      	bne.n	8001562 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001530:	001d      	movs	r5, r3
 8001532:	3540      	adds	r5, #64	@ 0x40
 8001534:	782a      	ldrb	r2, [r5, #0]
 8001536:	2a01      	cmp	r2, #1
 8001538:	d013      	beq.n	8001562 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800153a:	2224      	movs	r2, #36	@ 0x24
 800153c:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3a23      	subs	r2, #35	@ 0x23
 8001542:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001546:	4391      	bics	r1, r2
 8001548:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001550:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	4339      	orrs	r1, r7
 8001556:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800155e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001560:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	ffffefff 	.word	0xffffefff

08001568 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001568:	0002      	movs	r2, r0
{
 800156a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800156c:	3241      	adds	r2, #65	@ 0x41
 800156e:	7814      	ldrb	r4, [r2, #0]
{
 8001570:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001572:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001574:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001576:	2c20      	cmp	r4, #32
 8001578:	d117      	bne.n	80015aa <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800157a:	001c      	movs	r4, r3
 800157c:	3440      	adds	r4, #64	@ 0x40
 800157e:	7826      	ldrb	r6, [r4, #0]
 8001580:	2e01      	cmp	r6, #1
 8001582:	d012      	beq.n	80015aa <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001584:	3022      	adds	r0, #34	@ 0x22
 8001586:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3823      	subs	r0, #35	@ 0x23
 800158c:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800158e:	4f07      	ldr	r7, [pc, #28]	@ (80015ac <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001590:	4386      	bics	r6, r0
 8001592:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001594:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001596:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001598:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800159a:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800159c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	4308      	orrs	r0, r1
 80015a2:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80015a8:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ac:	fffff0ff 	.word	0xfffff0ff

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	0004      	movs	r4, r0
 80015b4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d045      	beq.n	8001646 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	6803      	ldr	r3, [r0, #0]
 80015bc:	07db      	lsls	r3, r3, #31
 80015be:	d42f      	bmi.n	8001620 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	079b      	lsls	r3, r3, #30
 80015c4:	d500      	bpl.n	80015c8 <HAL_RCC_OscConfig+0x18>
 80015c6:	e081      	b.n	80016cc <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	071b      	lsls	r3, r3, #28
 80015cc:	d500      	bpl.n	80015d0 <HAL_RCC_OscConfig+0x20>
 80015ce:	e0bc      	b.n	800174a <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	075b      	lsls	r3, r3, #29
 80015d4:	d500      	bpl.n	80015d8 <HAL_RCC_OscConfig+0x28>
 80015d6:	e0df      	b.n	8001798 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	06db      	lsls	r3, r3, #27
 80015dc:	d51a      	bpl.n	8001614 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015de:	6962      	ldr	r2, [r4, #20]
 80015e0:	2304      	movs	r3, #4
 80015e2:	4db4      	ldr	r5, [pc, #720]	@ (80018b4 <HAL_RCC_OscConfig+0x304>)
 80015e4:	2a01      	cmp	r2, #1
 80015e6:	d000      	beq.n	80015ea <HAL_RCC_OscConfig+0x3a>
 80015e8:	e148      	b.n	800187c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015ea:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ec:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80015ee:	430b      	orrs	r3, r1
 80015f0:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 80015f2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80015f4:	431a      	orrs	r2, r3
 80015f6:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80015f8:	f7ff fc0c 	bl	8000e14 <HAL_GetTick>
 80015fc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015fe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001600:	423b      	tst	r3, r7
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x56>
 8001604:	e133      	b.n	800186e <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001606:	21f8      	movs	r1, #248	@ 0xf8
 8001608:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800160a:	69a3      	ldr	r3, [r4, #24]
 800160c:	438a      	bics	r2, r1
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4313      	orrs	r3, r2
 8001612:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001614:	6a23      	ldr	r3, [r4, #32]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d000      	beq.n	800161c <HAL_RCC_OscConfig+0x6c>
 800161a:	e157      	b.n	80018cc <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 800161c:	2000      	movs	r0, #0
 800161e:	e02a      	b.n	8001676 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001620:	220c      	movs	r2, #12
 8001622:	4da4      	ldr	r5, [pc, #656]	@ (80018b4 <HAL_RCC_OscConfig+0x304>)
 8001624:	686b      	ldr	r3, [r5, #4]
 8001626:	4013      	ands	r3, r2
 8001628:	2b04      	cmp	r3, #4
 800162a:	d006      	beq.n	800163a <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800162c:	686b      	ldr	r3, [r5, #4]
 800162e:	4013      	ands	r3, r2
 8001630:	2b08      	cmp	r3, #8
 8001632:	d10a      	bne.n	800164a <HAL_RCC_OscConfig+0x9a>
 8001634:	686b      	ldr	r3, [r5, #4]
 8001636:	03db      	lsls	r3, r3, #15
 8001638:	d507      	bpl.n	800164a <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	039b      	lsls	r3, r3, #14
 800163e:	d5bf      	bpl.n	80015c0 <HAL_RCC_OscConfig+0x10>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1bc      	bne.n	80015c0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d114      	bne.n	800167a <HAL_RCC_OscConfig+0xca>
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	682a      	ldr	r2, [r5, #0]
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	4313      	orrs	r3, r2
 8001658:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800165a:	f7ff fbdb 	bl	8000e14 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001660:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	02bf      	lsls	r7, r7, #10
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	423b      	tst	r3, r7
 8001668:	d1aa      	bne.n	80015c0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166a:	f7ff fbd3 	bl	8000e14 <HAL_GetTick>
 800166e:	1b80      	subs	r0, r0, r6
 8001670:	2864      	cmp	r0, #100	@ 0x64
 8001672:	d9f7      	bls.n	8001664 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8001674:	2003      	movs	r0, #3
}
 8001676:	b005      	add	sp, #20
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	2b00      	cmp	r3, #0
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0xfc>
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	4a8d      	ldr	r2, [pc, #564]	@ (80018b8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	4013      	ands	r3, r2
 8001686:	602b      	str	r3, [r5, #0]
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	4a8c      	ldr	r2, [pc, #560]	@ (80018bc <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168c:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168e:	4013      	ands	r3, r2
 8001690:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001692:	f7ff fbbf 	bl	8000e14 <HAL_GetTick>
 8001696:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	423b      	tst	r3, r7
 800169c:	d100      	bne.n	80016a0 <HAL_RCC_OscConfig+0xf0>
 800169e:	e78f      	b.n	80015c0 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fbb8 	bl	8000e14 <HAL_GetTick>
 80016a4:	1b80      	subs	r0, r0, r6
 80016a6:	2864      	cmp	r0, #100	@ 0x64
 80016a8:	d9f6      	bls.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016aa:	e7e3      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0x10c>
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	682a      	ldr	r2, [r5, #0]
 80016b4:	02db      	lsls	r3, r3, #11
 80016b6:	4313      	orrs	r3, r2
 80016b8:	602b      	str	r3, [r5, #0]
 80016ba:	e7c9      	b.n	8001650 <HAL_RCC_OscConfig+0xa0>
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	4a7e      	ldr	r2, [pc, #504]	@ (80018b8 <HAL_RCC_OscConfig+0x308>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	4a7d      	ldr	r2, [pc, #500]	@ (80018bc <HAL_RCC_OscConfig+0x30c>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	e7c5      	b.n	8001658 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016cc:	220c      	movs	r2, #12
 80016ce:	4d79      	ldr	r5, [pc, #484]	@ (80018b4 <HAL_RCC_OscConfig+0x304>)
 80016d0:	686b      	ldr	r3, [r5, #4]
 80016d2:	4213      	tst	r3, r2
 80016d4:	d006      	beq.n	80016e4 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016d6:	686b      	ldr	r3, [r5, #4]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d110      	bne.n	8001700 <HAL_RCC_OscConfig+0x150>
 80016de:	686b      	ldr	r3, [r5, #4]
 80016e0:	03db      	lsls	r3, r3, #15
 80016e2:	d40d      	bmi.n	8001700 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e4:	682b      	ldr	r3, [r5, #0]
 80016e6:	079b      	lsls	r3, r3, #30
 80016e8:	d502      	bpl.n	80016f0 <HAL_RCC_OscConfig+0x140>
 80016ea:	68e3      	ldr	r3, [r4, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d1aa      	bne.n	8001646 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	21f8      	movs	r1, #248	@ 0xf8
 80016f2:	682a      	ldr	r2, [r5, #0]
 80016f4:	6923      	ldr	r3, [r4, #16]
 80016f6:	438a      	bics	r2, r1
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	602b      	str	r3, [r5, #0]
 80016fe:	e763      	b.n	80015c8 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001700:	68e2      	ldr	r2, [r4, #12]
 8001702:	2301      	movs	r3, #1
 8001704:	2a00      	cmp	r2, #0
 8001706:	d00f      	beq.n	8001728 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001708:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800170c:	4313      	orrs	r3, r2
 800170e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001710:	f7ff fb80 	bl	8000e14 <HAL_GetTick>
 8001714:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	423b      	tst	r3, r7
 800171a:	d1e9      	bne.n	80016f0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fb7a 	bl	8000e14 <HAL_GetTick>
 8001720:	1b80      	subs	r0, r0, r6
 8001722:	2802      	cmp	r0, #2
 8001724:	d9f7      	bls.n	8001716 <HAL_RCC_OscConfig+0x166>
 8001726:	e7a5      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8001728:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800172c:	439a      	bics	r2, r3
 800172e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001730:	f7ff fb70 	bl	8000e14 <HAL_GetTick>
 8001734:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	423b      	tst	r3, r7
 800173a:	d100      	bne.n	800173e <HAL_RCC_OscConfig+0x18e>
 800173c:	e744      	b.n	80015c8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fb69 	bl	8000e14 <HAL_GetTick>
 8001742:	1b80      	subs	r0, r0, r6
 8001744:	2802      	cmp	r0, #2
 8001746:	d9f6      	bls.n	8001736 <HAL_RCC_OscConfig+0x186>
 8001748:	e794      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	69e2      	ldr	r2, [r4, #28]
 800174c:	2301      	movs	r3, #1
 800174e:	4d59      	ldr	r5, [pc, #356]	@ (80018b4 <HAL_RCC_OscConfig+0x304>)
 8001750:	2a00      	cmp	r2, #0
 8001752:	d010      	beq.n	8001776 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001754:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001758:	4313      	orrs	r3, r2
 800175a:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800175c:	f7ff fb5a 	bl	8000e14 <HAL_GetTick>
 8001760:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001764:	423b      	tst	r3, r7
 8001766:	d000      	beq.n	800176a <HAL_RCC_OscConfig+0x1ba>
 8001768:	e732      	b.n	80015d0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fb53 	bl	8000e14 <HAL_GetTick>
 800176e:	1b80      	subs	r0, r0, r6
 8001770:	2802      	cmp	r0, #2
 8001772:	d9f6      	bls.n	8001762 <HAL_RCC_OscConfig+0x1b2>
 8001774:	e77e      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8001776:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800177a:	439a      	bics	r2, r3
 800177c:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800177e:	f7ff fb49 	bl	8000e14 <HAL_GetTick>
 8001782:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001786:	423b      	tst	r3, r7
 8001788:	d100      	bne.n	800178c <HAL_RCC_OscConfig+0x1dc>
 800178a:	e721      	b.n	80015d0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fb42 	bl	8000e14 <HAL_GetTick>
 8001790:	1b80      	subs	r0, r0, r6
 8001792:	2802      	cmp	r0, #2
 8001794:	d9f6      	bls.n	8001784 <HAL_RCC_OscConfig+0x1d4>
 8001796:	e76d      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001798:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179c:	4d45      	ldr	r5, [pc, #276]	@ (80018b4 <HAL_RCC_OscConfig+0x304>)
 800179e:	0552      	lsls	r2, r2, #21
 80017a0:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80017a2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a4:	4213      	tst	r3, r2
 80017a6:	d108      	bne.n	80017ba <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	69eb      	ldr	r3, [r5, #28]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61eb      	str	r3, [r5, #28]
 80017ae:	69eb      	ldr	r3, [r5, #28]
 80017b0:	4013      	ands	r3, r2
 80017b2:	9303      	str	r3, [sp, #12]
 80017b4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	2780      	movs	r7, #128	@ 0x80
 80017bc:	4e40      	ldr	r6, [pc, #256]	@ (80018c0 <HAL_RCC_OscConfig+0x310>)
 80017be:	007f      	lsls	r7, r7, #1
 80017c0:	6833      	ldr	r3, [r6, #0]
 80017c2:	423b      	tst	r3, r7
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	68a3      	ldr	r3, [r4, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d122      	bne.n	8001812 <HAL_RCC_OscConfig+0x262>
 80017cc:	6a2a      	ldr	r2, [r5, #32]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80017d2:	f7ff fb1f 	bl	8000e14 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d6:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80017d8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	6a2b      	ldr	r3, [r5, #32]
 80017dc:	423b      	tst	r3, r7
 80017de:	d03f      	beq.n	8001860 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 80017e0:	9b00      	ldr	r3, [sp, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d000      	beq.n	80017e8 <HAL_RCC_OscConfig+0x238>
 80017e6:	e6f7      	b.n	80015d8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	69eb      	ldr	r3, [r5, #28]
 80017ea:	4a36      	ldr	r2, [pc, #216]	@ (80018c4 <HAL_RCC_OscConfig+0x314>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	61eb      	str	r3, [r5, #28]
 80017f0:	e6f2      	b.n	80015d8 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	6833      	ldr	r3, [r6, #0]
 80017f4:	433b      	orrs	r3, r7
 80017f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb0c 	bl	8000e14 <HAL_GetTick>
 80017fc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	6833      	ldr	r3, [r6, #0]
 8001800:	423b      	tst	r3, r7
 8001802:	d1e0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001804:	f7ff fb06 	bl	8000e14 <HAL_GetTick>
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	1ac0      	subs	r0, r0, r3
 800180c:	2864      	cmp	r0, #100	@ 0x64
 800180e:	d9f6      	bls.n	80017fe <HAL_RCC_OscConfig+0x24e>
 8001810:	e730      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	2201      	movs	r2, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d114      	bne.n	8001842 <HAL_RCC_OscConfig+0x292>
 8001818:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	4393      	bics	r3, r2
 800181e:	622b      	str	r3, [r5, #32]
 8001820:	6a2b      	ldr	r3, [r5, #32]
 8001822:	3203      	adds	r2, #3
 8001824:	4393      	bics	r3, r2
 8001826:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001828:	f7ff faf4 	bl	8000e14 <HAL_GetTick>
 800182c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	6a2b      	ldr	r3, [r5, #32]
 8001830:	423b      	tst	r3, r7
 8001832:	d0d5      	beq.n	80017e0 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff faee 	bl	8000e14 <HAL_GetTick>
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <HAL_RCC_OscConfig+0x318>)
 800183a:	1b80      	subs	r0, r0, r6
 800183c:	4298      	cmp	r0, r3
 800183e:	d9f6      	bls.n	800182e <HAL_RCC_OscConfig+0x27e>
 8001840:	e718      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	2b05      	cmp	r3, #5
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x2a2>
 8001846:	6a29      	ldr	r1, [r5, #32]
 8001848:	3b01      	subs	r3, #1
 800184a:	430b      	orrs	r3, r1
 800184c:	622b      	str	r3, [r5, #32]
 800184e:	6a2b      	ldr	r3, [r5, #32]
 8001850:	e7bd      	b.n	80017ce <HAL_RCC_OscConfig+0x21e>
 8001852:	6a2b      	ldr	r3, [r5, #32]
 8001854:	4393      	bics	r3, r2
 8001856:	2204      	movs	r2, #4
 8001858:	622b      	str	r3, [r5, #32]
 800185a:	6a2b      	ldr	r3, [r5, #32]
 800185c:	4393      	bics	r3, r2
 800185e:	e7b7      	b.n	80017d0 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fad8 	bl	8000e14 <HAL_GetTick>
 8001864:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_RCC_OscConfig+0x318>)
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	4298      	cmp	r0, r3
 800186a:	d9b6      	bls.n	80017da <HAL_RCC_OscConfig+0x22a>
 800186c:	e702      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800186e:	f7ff fad1 	bl	8000e14 <HAL_GetTick>
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	2802      	cmp	r0, #2
 8001876:	d800      	bhi.n	800187a <HAL_RCC_OscConfig+0x2ca>
 8001878:	e6c1      	b.n	80015fe <HAL_RCC_OscConfig+0x4e>
 800187a:	e6fb      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800187c:	3205      	adds	r2, #5
 800187e:	d103      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001880:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001882:	439a      	bics	r2, r3
 8001884:	636a      	str	r2, [r5, #52]	@ 0x34
 8001886:	e6be      	b.n	8001606 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001888:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800188a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800188c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800188e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001890:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001892:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001894:	4393      	bics	r3, r2
 8001896:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001898:	f7ff fabc 	bl	8000e14 <HAL_GetTick>
 800189c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800189e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80018a0:	423b      	tst	r3, r7
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2f6>
 80018a4:	e6b6      	b.n	8001614 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018a6:	f7ff fab5 	bl	8000e14 <HAL_GetTick>
 80018aa:	1b80      	subs	r0, r0, r6
 80018ac:	2802      	cmp	r0, #2
 80018ae:	d9f6      	bls.n	800189e <HAL_RCC_OscConfig+0x2ee>
 80018b0:	e6e0      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000
 80018b8:	fffeffff 	.word	0xfffeffff
 80018bc:	fffbffff 	.word	0xfffbffff
 80018c0:	40007000 	.word	0x40007000
 80018c4:	efffffff 	.word	0xefffffff
 80018c8:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	210c      	movs	r1, #12
 80018ce:	4d34      	ldr	r5, [pc, #208]	@ (80019a0 <HAL_RCC_OscConfig+0x3f0>)
 80018d0:	686a      	ldr	r2, [r5, #4]
 80018d2:	400a      	ands	r2, r1
 80018d4:	2a08      	cmp	r2, #8
 80018d6:	d047      	beq.n	8001968 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d8:	4a32      	ldr	r2, [pc, #200]	@ (80019a4 <HAL_RCC_OscConfig+0x3f4>)
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d132      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 80018de:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4013      	ands	r3, r2
 80018e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018e6:	f7ff fa95 	bl	8000e14 <HAL_GetTick>
 80018ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	04bf      	lsls	r7, r7, #18
 80018ee:	682b      	ldr	r3, [r5, #0]
 80018f0:	423b      	tst	r3, r7
 80018f2:	d121      	bne.n	8001938 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	220f      	movs	r2, #15
 80018f6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fa:	4393      	bics	r3, r2
 80018fc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fe:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001900:	4313      	orrs	r3, r2
 8001902:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001904:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001906:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001908:	686a      	ldr	r2, [r5, #4]
 800190a:	430b      	orrs	r3, r1
 800190c:	4926      	ldr	r1, [pc, #152]	@ (80019a8 <HAL_RCC_OscConfig+0x3f8>)
 800190e:	400a      	ands	r2, r1
 8001910:	4313      	orrs	r3, r2
 8001912:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	682a      	ldr	r2, [r5, #0]
 8001918:	045b      	lsls	r3, r3, #17
 800191a:	4313      	orrs	r3, r2
 800191c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800191e:	f7ff fa79 	bl	8000e14 <HAL_GetTick>
 8001922:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	4233      	tst	r3, r6
 8001928:	d000      	beq.n	800192c <HAL_RCC_OscConfig+0x37c>
 800192a:	e677      	b.n	800161c <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fa72 	bl	8000e14 <HAL_GetTick>
 8001930:	1b00      	subs	r0, r0, r4
 8001932:	2802      	cmp	r0, #2
 8001934:	d9f6      	bls.n	8001924 <HAL_RCC_OscConfig+0x374>
 8001936:	e69d      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff fa6c 	bl	8000e14 <HAL_GetTick>
 800193c:	1b80      	subs	r0, r0, r6
 800193e:	2802      	cmp	r0, #2
 8001940:	d9d5      	bls.n	80018ee <HAL_RCC_OscConfig+0x33e>
 8001942:	e697      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8001944:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001948:	4013      	ands	r3, r2
 800194a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800194c:	f7ff fa62 	bl	8000e14 <HAL_GetTick>
 8001950:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	04b6      	lsls	r6, r6, #18
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	4233      	tst	r3, r6
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x3ac>
 800195a:	e65f      	b.n	800161c <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fa5a 	bl	8000e14 <HAL_GetTick>
 8001960:	1b00      	subs	r0, r0, r4
 8001962:	2802      	cmp	r0, #2
 8001964:	d9f6      	bls.n	8001954 <HAL_RCC_OscConfig+0x3a4>
 8001966:	e685      	b.n	8001674 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	2b01      	cmp	r3, #1
 800196a:	d100      	bne.n	800196e <HAL_RCC_OscConfig+0x3be>
 800196c:	e66b      	b.n	8001646 <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8001970:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001974:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001976:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001978:	4002      	ands	r2, r0
 800197a:	428a      	cmp	r2, r1
 800197c:	d000      	beq.n	8001980 <HAL_RCC_OscConfig+0x3d0>
 800197e:	e662      	b.n	8001646 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001980:	220f      	movs	r2, #15
 8001982:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001984:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001986:	4293      	cmp	r3, r2
 8001988:	d000      	beq.n	800198c <HAL_RCC_OscConfig+0x3dc>
 800198a:	e65c      	b.n	8001646 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800198c:	23f0      	movs	r3, #240	@ 0xf0
 800198e:	039b      	lsls	r3, r3, #14
 8001990:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001992:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001994:	1ac0      	subs	r0, r0, r3
 8001996:	1e43      	subs	r3, r0, #1
 8001998:	4198      	sbcs	r0, r3
 800199a:	b2c0      	uxtb	r0, r0
 800199c:	e66b      	b.n	8001676 <HAL_RCC_OscConfig+0xc6>
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	40021000 	.word	0x40021000
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	ffc2ffff 	.word	0xffc2ffff

080019ac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ac:	220c      	movs	r2, #12
{
 80019ae:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80019b0:	4d0c      	ldr	r5, [pc, #48]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x38>)
 80019b2:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019b4:	401a      	ands	r2, r3
 80019b6:	2a08      	cmp	r2, #8
 80019b8:	d111      	bne.n	80019de <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019ba:	200f      	movs	r0, #15
 80019bc:	490a      	ldr	r1, [pc, #40]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019be:	0c9a      	lsrs	r2, r3, #18
 80019c0:	4002      	ands	r2, r0
 80019c2:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019c4:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019c6:	03db      	lsls	r3, r3, #15
 80019c8:	d507      	bpl.n	80019da <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x40>)
 80019cc:	4002      	ands	r2, r0
 80019ce:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019d0:	4807      	ldr	r0, [pc, #28]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x44>)
 80019d2:	f7fe fba3 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019d6:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x48>)
 80019dc:	e7fb      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 80019de:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 80019e0:	e7fa      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	08002838 	.word	0x08002838
 80019ec:	08002828 	.word	0x08002828
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	003d0900 	.word	0x003d0900

080019f8 <HAL_RCC_ClockConfig>:
{
 80019f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019fa:	0004      	movs	r4, r0
 80019fc:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
}
 8001a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a06:	2201      	movs	r2, #1
 8001a08:	4d37      	ldr	r5, [pc, #220]	@ (8001ae8 <HAL_RCC_ClockConfig+0xf0>)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	428b      	cmp	r3, r1
 8001a10:	d31c      	bcc.n	8001a4c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	0793      	lsls	r3, r2, #30
 8001a16:	d422      	bmi.n	8001a5e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a18:	07d2      	lsls	r2, r2, #31
 8001a1a:	d42f      	bmi.n	8001a7c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	682a      	ldr	r2, [r5, #0]
 8001a20:	401a      	ands	r2, r3
 8001a22:	42b2      	cmp	r2, r6
 8001a24:	d851      	bhi.n	8001aca <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	4d30      	ldr	r5, [pc, #192]	@ (8001aec <HAL_RCC_ClockConfig+0xf4>)
 8001a2a:	075b      	lsls	r3, r3, #29
 8001a2c:	d454      	bmi.n	8001ad8 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a2e:	f7ff ffbd 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001a32:	686b      	ldr	r3, [r5, #4]
 8001a34:	4a2e      	ldr	r2, [pc, #184]	@ (8001af0 <HAL_RCC_ClockConfig+0xf8>)
 8001a36:	061b      	lsls	r3, r3, #24
 8001a38:	0f1b      	lsrs	r3, r3, #28
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	492d      	ldr	r1, [pc, #180]	@ (8001af4 <HAL_RCC_ClockConfig+0xfc>)
 8001a3e:	40d8      	lsrs	r0, r3
 8001a40:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a42:	2003      	movs	r0, #3
 8001a44:	f7ff f9a6 	bl	8000d94 <HAL_InitTick>
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e7db      	b.n	8001a04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	4393      	bics	r3, r2
 8001a50:	430b      	orrs	r3, r1
 8001a52:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	4013      	ands	r3, r2
 8001a58:	428b      	cmp	r3, r1
 8001a5a:	d1d2      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xa>
 8001a5c:	e7d9      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	4923      	ldr	r1, [pc, #140]	@ (8001aec <HAL_RCC_ClockConfig+0xf4>)
 8001a60:	0753      	lsls	r3, r2, #29
 8001a62:	d504      	bpl.n	8001a6e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a64:	23e0      	movs	r3, #224	@ 0xe0
 8001a66:	6848      	ldr	r0, [r1, #4]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4303      	orrs	r3, r0
 8001a6c:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6e:	20f0      	movs	r0, #240	@ 0xf0
 8001a70:	684b      	ldr	r3, [r1, #4]
 8001a72:	4383      	bics	r3, r0
 8001a74:	68a0      	ldr	r0, [r4, #8]
 8001a76:	4303      	orrs	r3, r0
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	e7cd      	b.n	8001a18 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	4f1b      	ldr	r7, [pc, #108]	@ (8001aec <HAL_RCC_ClockConfig+0xf4>)
 8001a7e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	2a01      	cmp	r2, #1
 8001a84:	d119      	bne.n	8001aba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	039b      	lsls	r3, r3, #14
 8001a88:	d5bb      	bpl.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	438b      	bics	r3, r1
 8001a90:	4313      	orrs	r3, r2
 8001a92:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8001a94:	f7ff f9be 	bl	8000e14 <HAL_GetTick>
 8001a98:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d0b9      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f9b4 	bl	8000e14 <HAL_GetTick>
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	1ac0      	subs	r0, r0, r3
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_RCC_ClockConfig+0x100>)
 8001ab2:	4298      	cmp	r0, r3
 8001ab4:	d9f1      	bls.n	8001a9a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	e7a4      	b.n	8001a04 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	2a02      	cmp	r2, #2
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	019b      	lsls	r3, r3, #6
 8001ac0:	d4e3      	bmi.n	8001a8a <HAL_RCC_ClockConfig+0x92>
 8001ac2:	e79e      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	079b      	lsls	r3, r3, #30
 8001ac6:	d4e0      	bmi.n	8001a8a <HAL_RCC_ClockConfig+0x92>
 8001ac8:	e79b      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	682a      	ldr	r2, [r5, #0]
 8001acc:	439a      	bics	r2, r3
 8001ace:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	682a      	ldr	r2, [r5, #0]
 8001ad2:	421a      	tst	r2, r3
 8001ad4:	d0a7      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x2e>
 8001ad6:	e794      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	686b      	ldr	r3, [r5, #4]
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_RCC_ClockConfig+0x104>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	68e2      	ldr	r2, [r4, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	606b      	str	r3, [r5, #4]
 8001ae4:	e7a3      	b.n	8001a2e <HAL_RCC_ClockConfig+0x36>
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08002818 	.word	0x08002818
 8001af4:	20000000 	.word	0x20000000
 8001af8:	00001388 	.word	0x00001388
 8001afc:	fffff8ff 	.word	0xfffff8ff

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4905      	ldr	r1, [pc, #20]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b08:	055b      	lsls	r3, r3, #21
 8001b0a:	0f5b      	lsrs	r3, r3, #29
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	6810      	ldr	r0, [r2, #0]
 8001b10:	40d8      	lsrs	r0, r3
}    
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	08002810 	.word	0x08002810

08001b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b22:	6803      	ldr	r3, [r0, #0]
{
 8001b24:	0005      	movs	r5, r0
 8001b26:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b28:	03db      	lsls	r3, r3, #15
 8001b2a:	d52b      	bpl.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b30:	4c38      	ldr	r4, [pc, #224]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b38:	4213      	tst	r3, r2
 8001b3a:	d108      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	69e3      	ldr	r3, [r4, #28]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61e3      	str	r3, [r4, #28]
 8001b42:	69e3      	ldr	r3, [r4, #28]
 8001b44:	4013      	ands	r3, r2
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	2780      	movs	r7, #128	@ 0x80
 8001b50:	4e31      	ldr	r6, [pc, #196]	@ (8001c18 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b52:	007f      	lsls	r7, r7, #1
 8001b54:	6833      	ldr	r3, [r6, #0]
 8001b56:	423b      	tst	r3, r7
 8001b58:	d022      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b5a:	6a21      	ldr	r1, [r4, #32]
 8001b5c:	22c0      	movs	r2, #192	@ 0xc0
 8001b5e:	0008      	movs	r0, r1
 8001b60:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b62:	686b      	ldr	r3, [r5, #4]
 8001b64:	4e2d      	ldr	r6, [pc, #180]	@ (8001c1c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b66:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b68:	4211      	tst	r1, r2
 8001b6a:	d12b      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6c:	6a23      	ldr	r3, [r4, #32]
 8001b6e:	686a      	ldr	r2, [r5, #4]
 8001b70:	4033      	ands	r3, r6
 8001b72:	4313      	orrs	r3, r2
 8001b74:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d103      	bne.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	69e3      	ldr	r3, [r4, #28]
 8001b7e:	4a28      	ldr	r2, [pc, #160]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b84:	682a      	ldr	r2, [r5, #0]
 8001b86:	07d3      	lsls	r3, r2, #31
 8001b88:	d506      	bpl.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	4921      	ldr	r1, [pc, #132]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001b8e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001b90:	4383      	bics	r3, r0
 8001b92:	68a8      	ldr	r0, [r5, #8]
 8001b94:	4303      	orrs	r3, r0
 8001b96:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b98:	0692      	lsls	r2, r2, #26
 8001b9a:	d433      	bmi.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	e00f      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	433b      	orrs	r3, r7
 8001ba4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f935 	bl	8000e14 <HAL_GetTick>
 8001baa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	423b      	tst	r3, r7
 8001bb0:	d1d3      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f92f 	bl	8000e14 <HAL_GetTick>
 8001bb6:	9b01      	ldr	r3, [sp, #4]
 8001bb8:	1ac0      	subs	r0, r0, r3
 8001bba:	2864      	cmp	r0, #100	@ 0x64
 8001bbc:	d9f6      	bls.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001bbe:	2003      	movs	r0, #3
}
 8001bc0:	b005      	add	sp, #20
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	4283      	cmp	r3, r0
 8001bc8:	d0d0      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bca:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bcc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bce:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bd0:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bd2:	0252      	lsls	r2, r2, #9
 8001bd4:	4302      	orrs	r2, r0
 8001bd6:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bd8:	6a22      	ldr	r2, [r4, #32]
 8001bda:	4812      	ldr	r0, [pc, #72]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bdc:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bde:	4002      	ands	r2, r0
 8001be0:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8001be2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001be4:	07db      	lsls	r3, r3, #31
 8001be6:	d5c1      	bpl.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8001be8:	f7ff f914 	bl	8000e14 <HAL_GetTick>
 8001bec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	6a23      	ldr	r3, [r4, #32]
 8001bf2:	4213      	tst	r3, r2
 8001bf4:	d1ba      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff f90d 	bl	8000e14 <HAL_GetTick>
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001bfc:	1bc0      	subs	r0, r0, r7
 8001bfe:	4298      	cmp	r0, r3
 8001c00:	d9f5      	bls.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001c02:	e7dc      	b.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c04:	2110      	movs	r1, #16
 8001c06:	4a03      	ldr	r2, [pc, #12]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001c08:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001c0a:	438b      	bics	r3, r1
 8001c0c:	68e9      	ldr	r1, [r5, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	e7c3      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	fffffcff 	.word	0xfffffcff
 8001c20:	efffffff 	.word	0xefffffff
 8001c24:	fffeffff 	.word	0xfffeffff
 8001c28:	00001388 	.word	0x00001388

08001c2c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	000e      	movs	r6, r1
 8001c30:	b085      	sub	sp, #20
 8001c32:	0015      	movs	r5, r2
 8001c34:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c36:	f7ff f8ed 	bl	8000e14 <HAL_GetTick>
 8001c3a:	19ad      	adds	r5, r5, r6
 8001c3c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001c3e:	f7ff f8e9 	bl	8000e14 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c42:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c44:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8001c46:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	0d1b      	lsrs	r3, r3, #20
 8001c4e:	436b      	muls	r3, r5
 8001c50:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	6893      	ldr	r3, [r2, #8]
 8001c56:	0018      	movs	r0, r3
 8001c58:	4038      	ands	r0, r7
 8001c5a:	423b      	tst	r3, r7
 8001c5c:	d032      	beq.n	8001cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c5e:	1c73      	adds	r3, r6, #1
 8001c60:	d0f8      	beq.n	8001c54 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c62:	f7ff f8d7 	bl	8000e14 <HAL_GetTick>
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	1ac0      	subs	r0, r0, r3
 8001c6a:	42a8      	cmp	r0, r5
 8001c6c:	d32c      	bcc.n	8001cc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c6e:	21e0      	movs	r1, #224	@ 0xe0
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	438a      	bics	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c78:	2282      	movs	r2, #130	@ 0x82
 8001c7a:	6861      	ldr	r1, [r4, #4]
 8001c7c:	0052      	lsls	r2, r2, #1
 8001c7e:	4291      	cmp	r1, r2
 8001c80:	d10c      	bne.n	8001c9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	68a2      	ldr	r2, [r4, #8]
 8001c86:	0209      	lsls	r1, r1, #8
 8001c88:	428a      	cmp	r2, r1
 8001c8a:	d003      	beq.n	8001c94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c8c:	2180      	movs	r1, #128	@ 0x80
 8001c8e:	00c9      	lsls	r1, r1, #3
 8001c90:	428a      	cmp	r2, r1
 8001c92:	d103      	bne.n	8001c9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c94:	2140      	movs	r1, #64	@ 0x40
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	438a      	bics	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c9c:	2180      	movs	r1, #128	@ 0x80
 8001c9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ca0:	0189      	lsls	r1, r1, #6
 8001ca2:	428a      	cmp	r2, r1
 8001ca4:	d106      	bne.n	8001cb4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8001caa:	4001      	ands	r1, r0
 8001cac:	6019      	str	r1, [r3, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cb4:	0023      	movs	r3, r4
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	335d      	adds	r3, #93	@ 0x5d
 8001cba:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cbc:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8001cbe:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001cc0:	345c      	adds	r4, #92	@ 0x5c
 8001cc2:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8001cc4:	b005      	add	sp, #20
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8001cc8:	9b03      	ldr	r3, [sp, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d000      	beq.n	8001cd0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 8001cce:	002b      	movs	r3, r5
      count--;
 8001cd0:	9a03      	ldr	r2, [sp, #12]
 8001cd2:	001d      	movs	r5, r3
 8001cd4:	3a01      	subs	r2, #1
 8001cd6:	9203      	str	r2, [sp, #12]
 8001cd8:	e7bb      	b.n	8001c52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	ffffdfff 	.word	0xffffdfff

08001ce4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001ce8:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001cea:	b085      	sub	sp, #20
 8001cec:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8001cee:	ab02      	add	r3, sp, #8
 8001cf0:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001cf2:	0004      	movs	r4, r0
 8001cf4:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001cf6:	f7ff f88d 	bl	8000e14 <HAL_GetTick>
 8001cfa:	19ed      	adds	r5, r5, r7
 8001cfc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001cfe:	f7ff f889 	bl	8000e14 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d02:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d04:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8001d06:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d08:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4353      	muls	r3, r2
 8001d10:	0d1b      	lsrs	r3, r3, #20
 8001d12:	436b      	muls	r3, r5
 8001d14:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001d16:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8001d18:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8001d1a:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001d1c:	688b      	ldr	r3, [r1, #8]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	4030      	ands	r0, r6
 8001d22:	4233      	tst	r3, r6
 8001d24:	d03b      	beq.n	8001d9e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d26:	23c0      	movs	r3, #192	@ 0xc0
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	429e      	cmp	r6, r3
 8001d2c:	d104      	bne.n	8001d38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8001d2e:	9b01      	ldr	r3, [sp, #4]
 8001d30:	7b1b      	ldrb	r3, [r3, #12]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001d36:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001d38:	1c7b      	adds	r3, r7, #1
 8001d3a:	d0ef      	beq.n	8001d1c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d3c:	f7ff f86a 	bl	8000e14 <HAL_GetTick>
 8001d40:	9b00      	ldr	r3, [sp, #0]
 8001d42:	1ac0      	subs	r0, r0, r3
 8001d44:	42a8      	cmp	r0, r5
 8001d46:	d32c      	bcc.n	8001da2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d48:	21e0      	movs	r1, #224	@ 0xe0
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	438a      	bics	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d52:	2282      	movs	r2, #130	@ 0x82
 8001d54:	6861      	ldr	r1, [r4, #4]
 8001d56:	0052      	lsls	r2, r2, #1
 8001d58:	4291      	cmp	r1, r2
 8001d5a:	d10c      	bne.n	8001d76 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	68a2      	ldr	r2, [r4, #8]
 8001d60:	0209      	lsls	r1, r1, #8
 8001d62:	428a      	cmp	r2, r1
 8001d64:	d003      	beq.n	8001d6e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	428a      	cmp	r2, r1
 8001d6c:	d103      	bne.n	8001d76 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d6e:	2140      	movs	r1, #64	@ 0x40
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	438a      	bics	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d76:	2180      	movs	r1, #128	@ 0x80
 8001d78:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001d7a:	0189      	lsls	r1, r1, #6
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	d106      	bne.n	8001d8e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8001d84:	4001      	ands	r1, r0
 8001d86:	6019      	str	r1, [r3, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d8e:	0023      	movs	r3, r4
 8001d90:	2201      	movs	r2, #1
 8001d92:	335d      	adds	r3, #93	@ 0x5d
 8001d94:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d96:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001d9a:	345c      	adds	r4, #92	@ 0x5c
 8001d9c:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8001d9e:	b005      	add	sp, #20
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8001da2:	9b03      	ldr	r3, [sp, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d000      	beq.n	8001daa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8001da8:	002b      	movs	r3, r5
      count--;
 8001daa:	9a03      	ldr	r2, [sp, #12]
 8001dac:	001d      	movs	r5, r3
 8001dae:	3a01      	subs	r2, #1
 8001db0:	9203      	str	r2, [sp, #12]
 8001db2:	e7b0      	b.n	8001d16 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8001db4:	20000000 	.word	0x20000000
 8001db8:	ffffdfff 	.word	0xffffdfff

08001dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001dbe:	0013      	movs	r3, r2
{
 8001dc0:	000d      	movs	r5, r1
 8001dc2:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001dc4:	000a      	movs	r2, r1
 8001dc6:	21c0      	movs	r1, #192	@ 0xc0
 8001dc8:	0149      	lsls	r1, r1, #5
{
 8001dca:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001dcc:	f7ff ff8a 	bl	8001ce4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d005      	beq.n	8001de0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dd4:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8001dd6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dd8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001de0:	0032      	movs	r2, r6
 8001de2:	0029      	movs	r1, r5
 8001de4:	0020      	movs	r0, r4
 8001de6:	f7ff ff21 	bl	8001c2c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d1f2      	bne.n	8001dd4 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001dee:	21c0      	movs	r1, #192	@ 0xc0
 8001df0:	0033      	movs	r3, r6
 8001df2:	002a      	movs	r2, r5
 8001df4:	0020      	movs	r0, r4
 8001df6:	00c9      	lsls	r1, r1, #3
 8001df8:	f7ff ff74 	bl	8001ce4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d0ee      	beq.n	8001dde <SPI_EndRxTxTransaction+0x22>
 8001e00:	e7e8      	b.n	8001dd4 <SPI_EndRxTxTransaction+0x18>
	...

08001e04 <HAL_SPI_Init>:
{
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001e08:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d067      	beq.n	8001ede <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d165      	bne.n	8001ee0 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e14:	2282      	movs	r2, #130	@ 0x82
 8001e16:	6861      	ldr	r1, [r4, #4]
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	4291      	cmp	r1, r2
 8001e1c:	d000      	beq.n	8001e20 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e22:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e24:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e26:	355d      	adds	r5, #93	@ 0x5d
 8001e28:	782b      	ldrb	r3, [r5, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8001e30:	0023      	movs	r3, r4
 8001e32:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8001e34:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001e36:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8001e38:	f7fe fefe 	bl	8000c38 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e3c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001e3e:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e40:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001e42:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e44:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001e46:	680b      	ldr	r3, [r1, #0]
 8001e48:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e4a:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8001e4c:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e4e:	00d2      	lsls	r2, r2, #3
 8001e50:	2300      	movs	r3, #0
 8001e52:	4296      	cmp	r6, r2
 8001e54:	d948      	bls.n	8001ee8 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e56:	22f0      	movs	r2, #240	@ 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e58:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	4296      	cmp	r6, r2
 8001e5e:	d000      	beq.n	8001e62 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e60:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e62:	2282      	movs	r2, #130	@ 0x82
 8001e64:	2784      	movs	r7, #132	@ 0x84
 8001e66:	6863      	ldr	r3, [r4, #4]
 8001e68:	0052      	lsls	r2, r2, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68a2      	ldr	r2, [r4, #8]
 8001e6e:	023f      	lsls	r7, r7, #8
 8001e70:	403a      	ands	r2, r7
 8001e72:	2702      	movs	r7, #2
 8001e74:	4313      	orrs	r3, r2
 8001e76:	6922      	ldr	r2, [r4, #16]
 8001e78:	69a5      	ldr	r5, [r4, #24]
 8001e7a:	403a      	ands	r2, r7
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	2201      	movs	r2, #1
 8001e80:	6967      	ldr	r7, [r4, #20]
 8001e82:	4017      	ands	r7, r2
 8001e84:	433b      	orrs	r3, r7
 8001e86:	2780      	movs	r7, #128	@ 0x80
 8001e88:	00bf      	lsls	r7, r7, #2
 8001e8a:	402f      	ands	r7, r5
 8001e8c:	433b      	orrs	r3, r7
 8001e8e:	69e7      	ldr	r7, [r4, #28]
 8001e90:	3237      	adds	r2, #55	@ 0x37
 8001e92:	4017      	ands	r7, r2
 8001e94:	433b      	orrs	r3, r7
 8001e96:	6a27      	ldr	r7, [r4, #32]
 8001e98:	3248      	adds	r2, #72	@ 0x48
 8001e9a:	4017      	ands	r7, r2
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	433b      	orrs	r3, r7
 8001ea0:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8001ea2:	0192      	lsls	r2, r2, #6
 8001ea4:	4017      	ands	r7, r2
 8001ea6:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ea8:	2710      	movs	r7, #16
 8001eaa:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001eae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001eb0:	0c2d      	lsrs	r5, r5, #16
 8001eb2:	403b      	ands	r3, r7
 8001eb4:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8001eb6:	4017      	ands	r7, r2
 8001eb8:	433b      	orrs	r3, r7
 8001eba:	27f0      	movs	r7, #240	@ 0xf0
 8001ebc:	013f      	lsls	r7, r7, #4
 8001ebe:	403e      	ands	r6, r7
 8001ec0:	4333      	orrs	r3, r6
 8001ec2:	2604      	movs	r6, #4
 8001ec4:	4035      	ands	r5, r6
 8001ec6:	432b      	orrs	r3, r5
 8001ec8:	4303      	orrs	r3, r0
 8001eca:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ecc:	69cb      	ldr	r3, [r1, #28]
 8001ece:	4808      	ldr	r0, [pc, #32]	@ (8001ef0 <HAL_SPI_Init+0xec>)
 8001ed0:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ed2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed4:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ed8:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001eda:	345d      	adds	r4, #93	@ 0x5d
 8001edc:	7023      	strb	r3, [r4, #0]
}
 8001ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ee4:	6163      	str	r3, [r4, #20]
 8001ee6:	e79b      	b.n	8001e20 <HAL_SPI_Init+0x1c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ee8:	2080      	movs	r0, #128	@ 0x80
 8001eea:	0140      	lsls	r0, r0, #5
 8001eec:	e7b6      	b.n	8001e5c <HAL_SPI_Init+0x58>
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	fffff7ff 	.word	0xfffff7ff

08001ef4 <HAL_SPI_Transmit>:
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8001efa:	0003      	movs	r3, r0
 8001efc:	335c      	adds	r3, #92	@ 0x5c
{
 8001efe:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8001f00:	781a      	ldrb	r2, [r3, #0]
{
 8001f02:	0004      	movs	r4, r0
 8001f04:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001f06:	2702      	movs	r7, #2
 8001f08:	2a01      	cmp	r2, #1
 8001f0a:	d100      	bne.n	8001f0e <HAL_SPI_Transmit+0x1a>
 8001f0c:	e082      	b.n	8002014 <HAL_SPI_Transmit+0x120>
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001f12:	f7fe ff7f 	bl	8000e14 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001f16:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001f18:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001f1a:	335d      	adds	r3, #93	@ 0x5d
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	b2d7      	uxtb	r7, r2
 8001f20:	2a01      	cmp	r2, #1
 8001f22:	d000      	beq.n	8001f26 <HAL_SPI_Transmit+0x32>
 8001f24:	e0a6      	b.n	8002074 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8001f26:	2d00      	cmp	r5, #0
 8001f28:	d071      	beq.n	800200e <HAL_SPI_Transmit+0x11a>
 8001f2a:	2e00      	cmp	r6, #0
 8001f2c:	d06f      	beq.n	800200e <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f2e:	3202      	adds	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8001f34:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f36:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f38:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f3a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001f3c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001f3e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8001f40:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8001f42:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f44:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8001f4a:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001f4c:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f4e:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8001f50:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f52:	4291      	cmp	r1, r2
 8001f54:	d108      	bne.n	8001f68 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	01d2      	lsls	r2, r2, #7
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f68:	2240      	movs	r2, #64	@ 0x40
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	4211      	tst	r1, r2
 8001f6e:	d102      	bne.n	8001f76 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f76:	21e0      	movs	r1, #224	@ 0xe0
 8001f78:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f7a:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f7c:	00c9      	lsls	r1, r1, #3
 8001f7e:	4288      	cmp	r0, r1
 8001f80:	d94b      	bls.n	800201a <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_SPI_Transmit+0x96>
 8001f86:	2e01      	cmp	r6, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f90:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f92:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f9a:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8001f9c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	9a01      	ldr	r2, [sp, #4]
 8001fa6:	9900      	ldr	r1, [sp, #0]
 8001fa8:	f7ff ff08 	bl	8001dbc <SPI_EndRxTxTransaction>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d15e      	bne.n	800206e <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb0:	68a3      	ldr	r3, [r4, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb6:	9303      	str	r3, [sp, #12]
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	9203      	str	r2, [sp, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	9303      	str	r3, [sp, #12]
 8001fc2:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fc4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d121      	bne.n	800200e <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8001fca:	0023      	movs	r3, r4
 8001fcc:	2101      	movs	r1, #1
 8001fce:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fd0:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8001fd2:	7019      	strb	r1, [r3, #0]
 8001fd4:	e01b      	b.n	800200e <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd6:	6822      	ldr	r2, [r4, #0]
 8001fd8:	6893      	ldr	r3, [r2, #8]
 8001fda:	422b      	tst	r3, r5
 8001fdc:	d009      	beq.n	8001ff2 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fde:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001fe0:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe2:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fe4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001fe8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001ff0:	e7d4      	b.n	8001f9c <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff2:	f7fe ff0f 	bl	8000e14 <HAL_GetTick>
 8001ff6:	9b01      	ldr	r3, [sp, #4]
 8001ff8:	1ac0      	subs	r0, r0, r3
 8001ffa:	9b00      	ldr	r3, [sp, #0]
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	d3cd      	bcc.n	8001f9c <HAL_SPI_Transmit+0xa8>
 8002000:	3301      	adds	r3, #1
 8002002:	d0cb      	beq.n	8001f9c <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8002004:	0023      	movs	r3, r4
 8002006:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8002008:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 800200a:	335d      	adds	r3, #93	@ 0x5d
 800200c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800200e:	2300      	movs	r3, #0
 8002010:	345c      	adds	r4, #92	@ 0x5c
 8002012:	7023      	strb	r3, [r4, #0]
}
 8002014:	0038      	movs	r0, r7
 8002016:	b005      	add	sp, #20
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201a:	2a00      	cmp	r2, #0
 800201c:	d001      	beq.n	8002022 <HAL_SPI_Transmit+0x12e>
 800201e:	2e01      	cmp	r6, #1
 8002020:	d108      	bne.n	8002034 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002022:	782a      	ldrb	r2, [r5, #0]
 8002024:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002026:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002028:	3301      	adds	r3, #1
 800202a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800202c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800202e:	3b01      	subs	r3, #1
 8002030:	b29b      	uxth	r3, r3
 8002032:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002034:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8002036:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0b2      	beq.n	8001fa2 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	422a      	tst	r2, r5
 8002042:	d00a      	beq.n	800205a <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002044:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800204a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800204c:	3301      	adds	r3, #1
 800204e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002050:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002052:	3b01      	subs	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002058:	e7ed      	b.n	8002036 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205a:	f7fe fedb 	bl	8000e14 <HAL_GetTick>
 800205e:	9b01      	ldr	r3, [sp, #4]
 8002060:	1ac0      	subs	r0, r0, r3
 8002062:	9b00      	ldr	r3, [sp, #0]
 8002064:	4298      	cmp	r0, r3
 8002066:	d3e6      	bcc.n	8002036 <HAL_SPI_Transmit+0x142>
 8002068:	3301      	adds	r3, #1
 800206a:	d0e4      	beq.n	8002036 <HAL_SPI_Transmit+0x142>
 800206c:	e7ca      	b.n	8002004 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206e:	2320      	movs	r3, #32
 8002070:	6623      	str	r3, [r4, #96]	@ 0x60
 8002072:	e79d      	b.n	8001fb0 <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 8002074:	2702      	movs	r7, #2
 8002076:	e7ca      	b.n	800200e <HAL_SPI_Transmit+0x11a>

08002078 <HAL_SPI_TransmitReceive>:
{
 8002078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800207a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800207c:	0003      	movs	r3, r0
 800207e:	335c      	adds	r3, #92	@ 0x5c
{
 8002080:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8002082:	781a      	ldrb	r2, [r3, #0]
{
 8002084:	0004      	movs	r4, r0
 8002086:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8002088:	2002      	movs	r0, #2
 800208a:	2a01      	cmp	r2, #1
 800208c:	d01b      	beq.n	80020c6 <HAL_SPI_TransmitReceive+0x4e>
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002092:	f7fe febf 	bl	8000e14 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002096:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002098:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800209a:	335d      	adds	r3, #93	@ 0x5d
 800209c:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800209e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80020a0:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d009      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x42>
 80020a6:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 80020a8:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4299      	cmp	r1, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020b0:	68a3      	ldr	r3, [r4, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <HAL_SPI_TransmitReceive+0x48>
 80020b6:	2a04      	cmp	r2, #4
 80020b8:	d102      	bne.n	80020c0 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020ba:	2d00      	cmp	r5, #0
 80020bc:	d104      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 80020be:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80020c0:	2300      	movs	r3, #0
 80020c2:	345c      	adds	r4, #92	@ 0x5c
 80020c4:	7023      	strb	r3, [r4, #0]
}
 80020c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020c8:	2f00      	cmp	r7, #0
 80020ca:	d0f8      	beq.n	80020be <HAL_SPI_TransmitReceive+0x46>
 80020cc:	2e00      	cmp	r6, #0
 80020ce:	d0f6      	beq.n	80020be <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d0:	0023      	movs	r3, r4
 80020d2:	335d      	adds	r3, #93	@ 0x5d
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d001      	beq.n	80020de <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020da:	2205      	movs	r2, #5
 80020dc:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 80020de:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e0:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 80020e2:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020e6:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80020e8:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80020ea:	1da2      	adds	r2, r4, #6
 80020ec:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020ee:	22e0      	movs	r2, #224	@ 0xe0
 80020f0:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80020f2:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80020f4:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020f6:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020f8:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 80020fa:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80020fc:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	4290      	cmp	r0, r2
 8002102:	d935      	bls.n	8002170 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4f60      	ldr	r7, [pc, #384]	@ (8002288 <HAL_SPI_TransmitReceive+0x210>)
 8002108:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800210a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800210c:	2240      	movs	r2, #64	@ 0x40
 800210e:	681f      	ldr	r7, [r3, #0]
 8002110:	4217      	tst	r7, r2
 8002112:	d102      	bne.n	800211a <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8002114:	681f      	ldr	r7, [r3, #0]
 8002116:	433a      	orrs	r2, r7
 8002118:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800211a:	22e0      	movs	r2, #224	@ 0xe0
 800211c:	00d2      	lsls	r2, r2, #3
 800211e:	4290      	cmp	r0, r2
 8002120:	d961      	bls.n	80021e6 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002122:	2900      	cmp	r1, #0
 8002124:	d001      	beq.n	800212a <HAL_SPI_TransmitReceive+0xb2>
 8002126:	2e01      	cmp	r6, #1
 8002128:	d107      	bne.n	800213a <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800212c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002130:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002132:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002134:	3b01      	subs	r3, #1
 8002136:	b29b      	uxth	r3, r3
 8002138:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800213a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800213c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800213e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002140:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002142:	2b00      	cmp	r3, #0
 8002144:	d119      	bne.n	800217a <HAL_SPI_TransmitReceive+0x102>
 8002146:	0023      	movs	r3, r4
 8002148:	3308      	adds	r3, #8
 800214a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800214c:	2b00      	cmp	r3, #0
 800214e:	d114      	bne.n	800217a <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002150:	0020      	movs	r0, r4
 8002152:	9a01      	ldr	r2, [sp, #4]
 8002154:	9908      	ldr	r1, [sp, #32]
 8002156:	f7ff fe31 	bl	8001dbc <SPI_EndRxTxTransaction>
 800215a:	2800      	cmp	r0, #0
 800215c:	d000      	beq.n	8002160 <HAL_SPI_TransmitReceive+0xe8>
 800215e:	e08f      	b.n	8002280 <HAL_SPI_TransmitReceive+0x208>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002160:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ab      	bne.n	80020be <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8002166:	0023      	movs	r3, r4
 8002168:	2201      	movs	r2, #1
 800216a:	335d      	adds	r3, #93	@ 0x5d
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e7a7      	b.n	80020c0 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	685f      	ldr	r7, [r3, #4]
 8002174:	0152      	lsls	r2, r2, #5
 8002176:	433a      	orrs	r2, r7
 8002178:	e7c7      	b.n	800210a <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800217a:	6820      	ldr	r0, [r4, #0]
 800217c:	6883      	ldr	r3, [r0, #8]
 800217e:	423b      	tst	r3, r7
 8002180:	d00e      	beq.n	80021a0 <HAL_SPI_TransmitReceive+0x128>
 8002182:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_SPI_TransmitReceive+0x128>
 8002188:	2d01      	cmp	r5, #1
 800218a:	d108      	bne.n	800219e <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800218c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800218e:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002190:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002192:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002194:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002196:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002198:	3b01      	subs	r3, #1
 800219a:	b29b      	uxth	r3, r3
 800219c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800219e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021a0:	6883      	ldr	r3, [r0, #8]
 80021a2:	0019      	movs	r1, r3
 80021a4:	4031      	ands	r1, r6
 80021a6:	4233      	tst	r3, r6
 80021a8:	d00e      	beq.n	80021c8 <HAL_SPI_TransmitReceive+0x150>
 80021aa:	0022      	movs	r2, r4
 80021ac:	3208      	adds	r2, #8
 80021ae:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 80021b4:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021b6:	68c0      	ldr	r0, [r0, #12]
 80021b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ba:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021bc:	3302      	adds	r3, #2
 80021be:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80021c0:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021c8:	f7fe fe24 	bl	8000e14 <HAL_GetTick>
 80021cc:	9b01      	ldr	r3, [sp, #4]
 80021ce:	1ac0      	subs	r0, r0, r3
 80021d0:	9b08      	ldr	r3, [sp, #32]
 80021d2:	4298      	cmp	r0, r3
 80021d4:	d3b4      	bcc.n	8002140 <HAL_SPI_TransmitReceive+0xc8>
 80021d6:	3301      	adds	r3, #1
 80021d8:	d0b2      	beq.n	8002140 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 80021da:	0023      	movs	r3, r4
 80021dc:	2201      	movs	r2, #1
 80021de:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 80021e0:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80021e2:	701a      	strb	r2, [r3, #0]
        goto error;
 80021e4:	e76c      	b.n	80020c0 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021e6:	2900      	cmp	r1, #0
 80021e8:	d001      	beq.n	80021ee <HAL_SPI_TransmitReceive+0x176>
 80021ea:	2e01      	cmp	r6, #1
 80021ec:	d108      	bne.n	8002200 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ee:	782a      	ldrb	r2, [r5, #0]
 80021f0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021f4:	3301      	adds	r3, #1
 80021f6:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80021f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002200:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002202:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002204:	002e      	movs	r6, r5
 8002206:	e032      	b.n	800226e <HAL_SPI_TransmitReceive+0x1f6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	423a      	tst	r2, r7
 800220e:	d00f      	beq.n	8002230 <HAL_SPI_TransmitReceive+0x1b8>
 8002210:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002212:	2a00      	cmp	r2, #0
 8002214:	d00c      	beq.n	8002230 <HAL_SPI_TransmitReceive+0x1b8>
 8002216:	2d01      	cmp	r5, #1
 8002218:	d109      	bne.n	800222e <HAL_SPI_TransmitReceive+0x1b6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800221a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002220:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002222:	3301      	adds	r3, #1
 8002224:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002226:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002228:	3b01      	subs	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800222e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	0011      	movs	r1, r2
 8002236:	4031      	ands	r1, r6
 8002238:	4232      	tst	r2, r6
 800223a:	d00f      	beq.n	800225c <HAL_SPI_TransmitReceive+0x1e4>
 800223c:	0022      	movs	r2, r4
 800223e:	3208      	adds	r2, #8
 8002240:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 8002242:	2800      	cmp	r0, #0
 8002244:	d00a      	beq.n	800225c <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 8002246:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800224c:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 800224e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002250:	3301      	adds	r3, #1
 8002252:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8002254:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8002256:	3b01      	subs	r3, #1
 8002258:	b29b      	uxth	r3, r3
 800225a:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800225c:	f7fe fdda 	bl	8000e14 <HAL_GetTick>
 8002260:	9b01      	ldr	r3, [sp, #4]
 8002262:	1ac0      	subs	r0, r0, r3
 8002264:	9b08      	ldr	r3, [sp, #32]
 8002266:	4298      	cmp	r0, r3
 8002268:	d301      	bcc.n	800226e <HAL_SPI_TransmitReceive+0x1f6>
 800226a:	3301      	adds	r3, #1
 800226c:	d1b5      	bne.n	80021da <HAL_SPI_TransmitReceive+0x162>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800226e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1c9      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x190>
 8002274:	0023      	movs	r3, r4
 8002276:	3308      	adds	r3, #8
 8002278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1c4      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x190>
 800227e:	e767      	b.n	8002150 <HAL_SPI_TransmitReceive+0xd8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002280:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002282:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002284:	6623      	str	r3, [r4, #96]	@ 0x60
 8002286:	e76b      	b.n	8002160 <HAL_SPI_TransmitReceive+0xe8>
 8002288:	ffffefff 	.word	0xffffefff

0800228c <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 800228c:	4770      	bx	lr
	...

08002290 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002290:	6803      	ldr	r3, [r0, #0]
{
 8002292:	b530      	push	{r4, r5, lr}
 8002294:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002296:	2041      	movs	r0, #65	@ 0x41
  uint32_t itsource = hspi->Instance->CR2;
 8002298:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800229a:	689a      	ldr	r2, [r3, #8]
{
 800229c:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800229e:	4010      	ands	r0, r2
 80022a0:	2801      	cmp	r0, #1
 80022a2:	d106      	bne.n	80022b2 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022a4:	0648      	lsls	r0, r1, #25
 80022a6:	d504      	bpl.n	80022b2 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 80022a8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    hspi->TxISR(hspi);
 80022aa:	0020      	movs	r0, r4
 80022ac:	4798      	blx	r3
}
 80022ae:	b005      	add	sp, #20
 80022b0:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022b2:	0790      	lsls	r0, r2, #30
 80022b4:	d503      	bpl.n	80022be <HAL_SPI_IRQHandler+0x2e>
 80022b6:	0608      	lsls	r0, r1, #24
 80022b8:	d501      	bpl.n	80022be <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80022ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80022bc:	e7f5      	b.n	80022aa <HAL_SPI_IRQHandler+0x1a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022be:	20b0      	movs	r0, #176	@ 0xb0
 80022c0:	0040      	lsls	r0, r0, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022c2:	4202      	tst	r2, r0
 80022c4:	d0f3      	beq.n	80022ae <HAL_SPI_IRQHandler+0x1e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022c6:	0688      	lsls	r0, r1, #26
 80022c8:	d5f1      	bpl.n	80022ae <HAL_SPI_IRQHandler+0x1e>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022ca:	0650      	lsls	r0, r2, #25
 80022cc:	d50f      	bpl.n	80022ee <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80022ce:	0020      	movs	r0, r4
 80022d0:	305d      	adds	r0, #93	@ 0x5d
 80022d2:	7800      	ldrb	r0, [r0, #0]
 80022d4:	2803      	cmp	r0, #3
 80022d6:	d050      	beq.n	800237a <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80022d8:	2004      	movs	r0, #4
 80022da:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80022dc:	4328      	orrs	r0, r5
 80022de:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022e0:	2000      	movs	r0, #0
 80022e2:	9000      	str	r0, [sp, #0]
 80022e4:	68d8      	ldr	r0, [r3, #12]
 80022e6:	9000      	str	r0, [sp, #0]
 80022e8:	6898      	ldr	r0, [r3, #8]
 80022ea:	9000      	str	r0, [sp, #0]
 80022ec:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80022ee:	0690      	lsls	r0, r2, #26
 80022f0:	d50c      	bpl.n	800230c <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80022f2:	2001      	movs	r0, #1
 80022f4:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80022f6:	4328      	orrs	r0, r5
 80022f8:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80022fa:	2000      	movs	r0, #0
 80022fc:	2540      	movs	r5, #64	@ 0x40
 80022fe:	9002      	str	r0, [sp, #8]
 8002300:	6898      	ldr	r0, [r3, #8]
 8002302:	9002      	str	r0, [sp, #8]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	43a8      	bics	r0, r5
 8002308:	6018      	str	r0, [r3, #0]
 800230a:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800230c:	05d2      	lsls	r2, r2, #23
 800230e:	d508      	bpl.n	8002322 <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002310:	2208      	movs	r2, #8
 8002312:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002314:	4302      	orrs	r2, r0
 8002316:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002318:	2200      	movs	r2, #0
 800231a:	9203      	str	r2, [sp, #12]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	9203      	str	r2, [sp, #12]
 8002320:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002322:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002324:	2a00      	cmp	r2, #0
 8002326:	d0c2      	beq.n	80022ae <HAL_SPI_IRQHandler+0x1e>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002328:	20e0      	movs	r0, #224	@ 0xe0
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4382      	bics	r2, r0
 800232e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002330:	0022      	movs	r2, r4
 8002332:	38df      	subs	r0, #223	@ 0xdf
 8002334:	325d      	adds	r2, #93	@ 0x5d
 8002336:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002338:	3002      	adds	r0, #2
 800233a:	4201      	tst	r1, r0
 800233c:	d025      	beq.n	800238a <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 8002342:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002344:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002346:	2800      	cmp	r0, #0
 8002348:	d009      	beq.n	800235e <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_SPI_IRQHandler+0x104>)
 800234c:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800234e:	f7fe fdc9 	bl	8000ee4 <HAL_DMA_Abort_IT>
 8002352:	2800      	cmp	r0, #0
 8002354:	d003      	beq.n	800235e <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002356:	2340      	movs	r3, #64	@ 0x40
 8002358:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800235a:	4313      	orrs	r3, r2
 800235c:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800235e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002360:	2800      	cmp	r0, #0
 8002362:	d0a4      	beq.n	80022ae <HAL_SPI_IRQHandler+0x1e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_SPI_IRQHandler+0x104>)
 8002366:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002368:	f7fe fdbc 	bl	8000ee4 <HAL_DMA_Abort_IT>
 800236c:	2800      	cmp	r0, #0
 800236e:	d09e      	beq.n	80022ae <HAL_SPI_IRQHandler+0x1e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002370:	2340      	movs	r3, #64	@ 0x40
 8002372:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002374:	4313      	orrs	r3, r2
 8002376:	6623      	str	r3, [r4, #96]	@ 0x60
 8002378:	e799      	b.n	80022ae <HAL_SPI_IRQHandler+0x1e>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800237a:	2200      	movs	r2, #0
 800237c:	9201      	str	r2, [sp, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	9b01      	ldr	r3, [sp, #4]
        return;
 8002388:	e791      	b.n	80022ae <HAL_SPI_IRQHandler+0x1e>
        HAL_SPI_ErrorCallback(hspi);
 800238a:	0020      	movs	r0, r4
 800238c:	f7ff ff7e 	bl	800228c <HAL_SPI_ErrorCallback>
 8002390:	e78d      	b.n	80022ae <HAL_SPI_IRQHandler+0x1e>
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	08002399 	.word	0x08002399

08002398 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002398:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	0002      	movs	r2, r0
{
 800239e:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 80023a0:	3208      	adds	r2, #8
 80023a2:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80023a4:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80023a6:	f7ff ff71 	bl	800228c <HAL_SPI_ErrorCallback>
}
 80023aa:	bd10      	pop	{r4, pc}

080023ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023ac:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ae:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b2:	2201      	movs	r2, #1
 80023b4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b8:	6801      	ldr	r1, [r0, #0]
 80023ba:	4d12      	ldr	r5, [pc, #72]	@ (8002404 <UART_EndRxTransfer+0x58>)
 80023bc:	680b      	ldr	r3, [r1, #0]
 80023be:	402b      	ands	r3, r5
 80023c0:	600b      	str	r3, [r1, #0]
 80023c2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ce:	6801      	ldr	r1, [r0, #0]
 80023d0:	688b      	ldr	r3, [r1, #8]
 80023d2:	4393      	bics	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
 80023d6:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023da:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10a      	bne.n	80023f6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e8:	2410      	movs	r4, #16
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	43a3      	bics	r3, r4
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023f6:	2220      	movs	r2, #32
 80023f8:	1d03      	adds	r3, r0, #4
 80023fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fc:	2300      	movs	r3, #0
 80023fe:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002400:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002402:	bd30      	pop	{r4, r5, pc}
 8002404:	fffffedf 	.word	0xfffffedf

08002408 <UART_SetConfig>:
{
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800240c:	6925      	ldr	r5, [r4, #16]
 800240e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002410:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002412:	432a      	orrs	r2, r5
 8002414:	6965      	ldr	r5, [r4, #20]
 8002416:	69c3      	ldr	r3, [r0, #28]
 8002418:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800241a:	6808      	ldr	r0, [r1, #0]
 800241c:	4d38      	ldr	r5, [pc, #224]	@ (8002500 <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800241e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002420:	4028      	ands	r0, r5
 8002422:	4302      	orrs	r2, r0
 8002424:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002426:	684a      	ldr	r2, [r1, #4]
 8002428:	4836      	ldr	r0, [pc, #216]	@ (8002504 <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 800242a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800242c:	4002      	ands	r2, r0
 800242e:	68e0      	ldr	r0, [r4, #12]
 8002430:	4302      	orrs	r2, r0
 8002432:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002434:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002436:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002438:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800243a:	4d33      	ldr	r5, [pc, #204]	@ (8002508 <UART_SetConfig+0x100>)
 800243c:	4028      	ands	r0, r5
 800243e:	4302      	orrs	r2, r0
 8002440:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002442:	2103      	movs	r1, #3
 8002444:	4a31      	ldr	r2, [pc, #196]	@ (800250c <UART_SetConfig+0x104>)
 8002446:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002448:	400a      	ands	r2, r1
 800244a:	2180      	movs	r1, #128	@ 0x80
 800244c:	3a01      	subs	r2, #1
 800244e:	0209      	lsls	r1, r1, #8
 8002450:	2a02      	cmp	r2, #2
 8002452:	d849      	bhi.n	80024e8 <UART_SetConfig+0xe0>
 8002454:	482e      	ldr	r0, [pc, #184]	@ (8002510 <UART_SetConfig+0x108>)
 8002456:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002458:	428b      	cmp	r3, r1
 800245a:	d121      	bne.n	80024a0 <UART_SetConfig+0x98>
    switch (clocksource)
 800245c:	2808      	cmp	r0, #8
 800245e:	d841      	bhi.n	80024e4 <UART_SetConfig+0xdc>
 8002460:	f7fd fe52 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002464:	40084044 	.word	0x40084044
 8002468:	40404005 	.word	0x40404005
 800246c:	09          	.byte	0x09
 800246d:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 800246e:	f7ff fa9d 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8002472:	e03d      	b.n	80024f0 <UART_SetConfig+0xe8>
    switch (clocksource)
 8002474:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002476:	6861      	ldr	r1, [r4, #4]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	0848      	lsrs	r0, r1, #1
 800247c:	1818      	adds	r0, r3, r0
 800247e:	f7fd fe4d 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002482:	0002      	movs	r2, r0
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <UART_SetConfig+0x110>)
 8002486:	3a10      	subs	r2, #16
 8002488:	429a      	cmp	r2, r3
 800248a:	d82b      	bhi.n	80024e4 <UART_SetConfig+0xdc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800248c:	230f      	movs	r3, #15
 800248e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002490:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002492:	439a      	bics	r2, r3
 8002494:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002496:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	4303      	orrs	r3, r0
 800249c:	60d3      	str	r3, [r2, #12]
 800249e:	e029      	b.n	80024f4 <UART_SetConfig+0xec>
    switch (clocksource)
 80024a0:	2808      	cmp	r0, #8
 80024a2:	d81f      	bhi.n	80024e4 <UART_SetConfig+0xdc>
 80024a4:	f7fd fe30 	bl	8000108 <__gnu_thumb1_case_uqi>
 80024a8:	1e051e13 	.word	0x1e051e13
 80024ac:	1e1e1e18 	.word	0x1e1e1e18
 80024b0:	1b          	.byte	0x1b
 80024b1:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80024b2:	4818      	ldr	r0, [pc, #96]	@ (8002514 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024b4:	6861      	ldr	r1, [r4, #4]
 80024b6:	084b      	lsrs	r3, r1, #1
 80024b8:	1818      	adds	r0, r3, r0
 80024ba:	f7fd fe2f 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024be:	0002      	movs	r2, r0
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <UART_SetConfig+0x110>)
 80024c2:	3a10      	subs	r2, #16
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d80d      	bhi.n	80024e4 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	60d8      	str	r0, [r3, #12]
 80024cc:	e012      	b.n	80024f4 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ce:	f7ff fb17 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d00e      	beq.n	80024f4 <UART_SetConfig+0xec>
 80024d6:	e7ed      	b.n	80024b4 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 80024d8:	f7ff fa68 	bl	80019ac <HAL_RCC_GetSysClockFreq>
        break;
 80024dc:	e7f9      	b.n	80024d2 <UART_SetConfig+0xca>
    switch (clocksource)
 80024de:	2080      	movs	r0, #128	@ 0x80
 80024e0:	0200      	lsls	r0, r0, #8
 80024e2:	e7e7      	b.n	80024b4 <UART_SetConfig+0xac>
        ret = HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e006      	b.n	80024f6 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d1f0      	bne.n	80024ce <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ec:	f7ff fb08 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80024f0:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80024f2:	d1c0      	bne.n	8002476 <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 80024f4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80024fa:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	ffff69f3 	.word	0xffff69f3
 8002504:	ffffcfff 	.word	0xffffcfff
 8002508:	fffff4ff 	.word	0xfffff4ff
 800250c:	40021000 	.word	0x40021000
 8002510:	08002848 	.word	0x08002848
 8002514:	007a1200 	.word	0x007a1200
 8002518:	0000ffef 	.word	0x0000ffef

0800251c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800251c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800251e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002520:	071a      	lsls	r2, r3, #28
 8002522:	d506      	bpl.n	8002532 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002524:	6801      	ldr	r1, [r0, #0]
 8002526:	4c28      	ldr	r4, [pc, #160]	@ (80025c8 <UART_AdvFeatureConfig+0xac>)
 8002528:	684a      	ldr	r2, [r1, #4]
 800252a:	4022      	ands	r2, r4
 800252c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800252e:	4322      	orrs	r2, r4
 8002530:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002532:	07da      	lsls	r2, r3, #31
 8002534:	d506      	bpl.n	8002544 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002536:	6801      	ldr	r1, [r0, #0]
 8002538:	4c24      	ldr	r4, [pc, #144]	@ (80025cc <UART_AdvFeatureConfig+0xb0>)
 800253a:	684a      	ldr	r2, [r1, #4]
 800253c:	4022      	ands	r2, r4
 800253e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002540:	4322      	orrs	r2, r4
 8002542:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002544:	079a      	lsls	r2, r3, #30
 8002546:	d506      	bpl.n	8002556 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002548:	6801      	ldr	r1, [r0, #0]
 800254a:	4c21      	ldr	r4, [pc, #132]	@ (80025d0 <UART_AdvFeatureConfig+0xb4>)
 800254c:	684a      	ldr	r2, [r1, #4]
 800254e:	4022      	ands	r2, r4
 8002550:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002552:	4322      	orrs	r2, r4
 8002554:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002556:	075a      	lsls	r2, r3, #29
 8002558:	d506      	bpl.n	8002568 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800255a:	6801      	ldr	r1, [r0, #0]
 800255c:	4c1d      	ldr	r4, [pc, #116]	@ (80025d4 <UART_AdvFeatureConfig+0xb8>)
 800255e:	684a      	ldr	r2, [r1, #4]
 8002560:	4022      	ands	r2, r4
 8002562:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002564:	4322      	orrs	r2, r4
 8002566:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002568:	06da      	lsls	r2, r3, #27
 800256a:	d506      	bpl.n	800257a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800256c:	6801      	ldr	r1, [r0, #0]
 800256e:	4c1a      	ldr	r4, [pc, #104]	@ (80025d8 <UART_AdvFeatureConfig+0xbc>)
 8002570:	688a      	ldr	r2, [r1, #8]
 8002572:	4022      	ands	r2, r4
 8002574:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002576:	4322      	orrs	r2, r4
 8002578:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800257a:	069a      	lsls	r2, r3, #26
 800257c:	d506      	bpl.n	800258c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800257e:	6801      	ldr	r1, [r0, #0]
 8002580:	4c16      	ldr	r4, [pc, #88]	@ (80025dc <UART_AdvFeatureConfig+0xc0>)
 8002582:	688a      	ldr	r2, [r1, #8]
 8002584:	4022      	ands	r2, r4
 8002586:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002588:	4322      	orrs	r2, r4
 800258a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800258c:	065a      	lsls	r2, r3, #25
 800258e:	d510      	bpl.n	80025b2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002590:	6801      	ldr	r1, [r0, #0]
 8002592:	4d13      	ldr	r5, [pc, #76]	@ (80025e0 <UART_AdvFeatureConfig+0xc4>)
 8002594:	684a      	ldr	r2, [r1, #4]
 8002596:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002598:	402a      	ands	r2, r5
 800259a:	4322      	orrs	r2, r4
 800259c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800259e:	2280      	movs	r2, #128	@ 0x80
 80025a0:	0352      	lsls	r2, r2, #13
 80025a2:	4294      	cmp	r4, r2
 80025a4:	d105      	bne.n	80025b2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a6:	684a      	ldr	r2, [r1, #4]
 80025a8:	4c0e      	ldr	r4, [pc, #56]	@ (80025e4 <UART_AdvFeatureConfig+0xc8>)
 80025aa:	4022      	ands	r2, r4
 80025ac:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80025ae:	4322      	orrs	r2, r4
 80025b0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	d506      	bpl.n	80025c4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025b6:	6802      	ldr	r2, [r0, #0]
 80025b8:	490b      	ldr	r1, [pc, #44]	@ (80025e8 <UART_AdvFeatureConfig+0xcc>)
 80025ba:	6853      	ldr	r3, [r2, #4]
 80025bc:	400b      	ands	r3, r1
 80025be:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6053      	str	r3, [r2, #4]
}
 80025c4:	bd30      	pop	{r4, r5, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	ffff7fff 	.word	0xffff7fff
 80025cc:	fffdffff 	.word	0xfffdffff
 80025d0:	fffeffff 	.word	0xfffeffff
 80025d4:	fffbffff 	.word	0xfffbffff
 80025d8:	ffffefff 	.word	0xffffefff
 80025dc:	ffffdfff 	.word	0xffffdfff
 80025e0:	ffefffff 	.word	0xffefffff
 80025e4:	ff9fffff 	.word	0xff9fffff
 80025e8:	fff7ffff 	.word	0xfff7ffff

080025ec <UART_WaitOnFlagUntilTimeout>:
{
 80025ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ee:	0004      	movs	r4, r0
 80025f0:	000d      	movs	r5, r1
 80025f2:	0017      	movs	r7, r2
 80025f4:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	69d3      	ldr	r3, [r2, #28]
 80025fa:	402b      	ands	r3, r5
 80025fc:	1b5b      	subs	r3, r3, r5
 80025fe:	4259      	negs	r1, r3
 8002600:	414b      	adcs	r3, r1
 8002602:	42bb      	cmp	r3, r7
 8002604:	d001      	beq.n	800260a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002606:	2000      	movs	r0, #0
 8002608:	e025      	b.n	8002656 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800260a:	9b08      	ldr	r3, [sp, #32]
 800260c:	3301      	adds	r3, #1
 800260e:	d0f3      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7fe fc00 	bl	8000e14 <HAL_GetTick>
 8002614:	9b00      	ldr	r3, [sp, #0]
 8002616:	1ac0      	subs	r0, r0, r3
 8002618:	9b08      	ldr	r3, [sp, #32]
 800261a:	4298      	cmp	r0, r3
 800261c:	d82c      	bhi.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8c>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d02a      	beq.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	0752      	lsls	r2, r2, #29
 8002628:	d5e5      	bpl.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xa>
 800262a:	002a      	movs	r2, r5
 800262c:	2140      	movs	r1, #64	@ 0x40
 800262e:	3a40      	subs	r2, #64	@ 0x40
 8002630:	438a      	bics	r2, r1
 8002632:	d0e0      	beq.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	2608      	movs	r6, #8
 8002638:	0011      	movs	r1, r2
 800263a:	4031      	ands	r1, r6
 800263c:	9101      	str	r1, [sp, #4]
 800263e:	4232      	tst	r2, r6
 8002640:	d00a      	beq.n	8002658 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 8002642:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002644:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8002646:	f7ff feb1 	bl	80023ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800264a:	19a3      	adds	r3, r4, r6
 800264c:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800264e:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002650:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8002652:	3478      	adds	r4, #120	@ 0x78
 8002654:	7023      	strb	r3, [r4, #0]
}
 8002656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002658:	2280      	movs	r2, #128	@ 0x80
 800265a:	69d9      	ldr	r1, [r3, #28]
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	4211      	tst	r1, r2
 8002660:	d0c9      	beq.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002662:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002664:	0020      	movs	r0, r4
 8002666:	f7ff fea1 	bl	80023ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800266a:	0023      	movs	r3, r4
 800266c:	2220      	movs	r2, #32
 800266e:	3308      	adds	r3, #8
 8002670:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002672:	9b01      	ldr	r3, [sp, #4]
 8002674:	3478      	adds	r4, #120	@ 0x78
 8002676:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002678:	2003      	movs	r0, #3
 800267a:	e7ec      	b.n	8002656 <UART_WaitOnFlagUntilTimeout+0x6a>

0800267c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	0003      	movs	r3, r0
{
 800267e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002680:	2500      	movs	r5, #0
{
 8002682:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	3308      	adds	r3, #8
 8002686:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8002688:	f7fe fbc4 	bl	8000e14 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800268c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800268e:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	071b      	lsls	r3, r3, #28
 8002694:	d51d      	bpl.n	80026d2 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002696:	2180      	movs	r1, #128	@ 0x80
 8002698:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <UART_CheckIdleState+0xb8>)
 800269a:	002a      	movs	r2, r5
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	0389      	lsls	r1, r1, #14
 80026a0:	0003      	movs	r3, r0
 80026a2:	0020      	movs	r0, r4
 80026a4:	f7ff ffa2 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 80026a8:	42a8      	cmp	r0, r5
 80026aa:	d012      	beq.n	80026d2 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	2301      	movs	r3, #1
 80026b2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80026b6:	2080      	movs	r0, #128	@ 0x80
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	4383      	bics	r3, r0
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80026c4:	2320      	movs	r3, #32
 80026c6:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80026c8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80026ca:	2300      	movs	r3, #0
 80026cc:	3478      	adds	r4, #120	@ 0x78
 80026ce:	7023      	strb	r3, [r4, #0]
}
 80026d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026d2:	0025      	movs	r5, r4
 80026d4:	cd08      	ldmia	r5!, {r3}
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	075b      	lsls	r3, r3, #29
 80026da:	d523      	bpl.n	8002724 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026dc:	2180      	movs	r1, #128	@ 0x80
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <UART_CheckIdleState+0xb8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	0020      	movs	r0, r4
 80026e6:	0033      	movs	r3, r6
 80026e8:	03c9      	lsls	r1, r1, #15
 80026ea:	f7ff ff7f 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d018      	beq.n	8002724 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	2201      	movs	r2, #1
 80026f8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fc:	6821      	ldr	r1, [r4, #0]
 80026fe:	4e0e      	ldr	r6, [pc, #56]	@ (8002738 <UART_CheckIdleState+0xbc>)
 8002700:	680b      	ldr	r3, [r1, #0]
 8002702:	4033      	ands	r3, r6
 8002704:	600b      	str	r3, [r1, #0]
 8002706:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	6821      	ldr	r1, [r4, #0]
 8002714:	688b      	ldr	r3, [r1, #8]
 8002716:	4393      	bics	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
 800271a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800271e:	2320      	movs	r3, #32
 8002720:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002722:	e7d1      	b.n	80026c8 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002724:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002726:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002728:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800272a:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800272e:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002730:	e7cb      	b.n	80026ca <UART_CheckIdleState+0x4e>
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	01ffffff 	.word	0x01ffffff
 8002738:	fffffedf 	.word	0xfffffedf

0800273c <HAL_UART_Init>:
{
 800273c:	b510      	push	{r4, lr}
 800273e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
}
 8002744:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800274c:	0002      	movs	r2, r0
 800274e:	3278      	adds	r2, #120	@ 0x78
 8002750:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002752:	f7fe faa9 	bl	8000ca8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002756:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002758:	2101      	movs	r1, #1
 800275a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	438b      	bics	r3, r1
 8002762:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002764:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800276a:	0020      	movs	r0, r4
 800276c:	f7ff fed6 	bl	800251c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002770:	0020      	movs	r0, r4
 8002772:	f7ff fe49 	bl	8002408 <UART_SetConfig>
 8002776:	2801      	cmp	r0, #1
 8002778:	d0e3      	beq.n	8002742 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	4907      	ldr	r1, [pc, #28]	@ (800279c <HAL_UART_Init+0x60>)
 800277e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002780:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002782:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002784:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	438a      	bics	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800278e:	2201      	movs	r2, #1
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002796:	f7ff ff71 	bl	800267c <UART_CheckIdleState>
 800279a:	e7d3      	b.n	8002744 <HAL_UART_Init+0x8>
 800279c:	fffff7ff 	.word	0xfffff7ff

080027a0 <memset>:
 80027a0:	0003      	movs	r3, r0
 80027a2:	1882      	adds	r2, r0, r2
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d100      	bne.n	80027aa <memset+0xa>
 80027a8:	4770      	bx	lr
 80027aa:	7019      	strb	r1, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	e7f9      	b.n	80027a4 <memset+0x4>

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	2600      	movs	r6, #0
 80027b4:	4c0c      	ldr	r4, [pc, #48]	@ (80027e8 <__libc_init_array+0x38>)
 80027b6:	4d0d      	ldr	r5, [pc, #52]	@ (80027ec <__libc_init_array+0x3c>)
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	42a6      	cmp	r6, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	2600      	movs	r6, #0
 80027c2:	f000 f819 	bl	80027f8 <_init>
 80027c6:	4c0a      	ldr	r4, [pc, #40]	@ (80027f0 <__libc_init_array+0x40>)
 80027c8:	4d0a      	ldr	r5, [pc, #40]	@ (80027f4 <__libc_init_array+0x44>)
 80027ca:	1b64      	subs	r4, r4, r5
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	42a6      	cmp	r6, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	00b3      	lsls	r3, r6, #2
 80027d6:	58eb      	ldr	r3, [r5, r3]
 80027d8:	4798      	blx	r3
 80027da:	3601      	adds	r6, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	00b3      	lsls	r3, r6, #2
 80027e0:	58eb      	ldr	r3, [r5, r3]
 80027e2:	4798      	blx	r3
 80027e4:	3601      	adds	r6, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	0800284c 	.word	0x0800284c
 80027ec:	0800284c 	.word	0x0800284c
 80027f0:	08002850 	.word	0x08002850
 80027f4:	0800284c 	.word	0x0800284c

080027f8 <_init>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr

08002804 <_fini>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr
