
Thermal_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dbc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f34  08002f34  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002f34  08002f34  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f34  08002f34  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f34  08002f34  00003f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f38  08002f38  00003f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002f3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000010  08002f4c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08002f4c  00004204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001420d  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002857  00000000  00000000  00018245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c1de  00000000  00000000  0001aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00026c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  000277d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001008a  00000000  00000000  00028880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163c5  00000000  00000000  0003890a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005c668  00000000  00000000  0004eccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab337  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002078  00000000  00000000  000ab37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e64 	.word	0x08002e64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002e64 	.word	0x08002e64

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_fdiv>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	464f      	mov	r7, r9
 8000238:	4646      	mov	r6, r8
 800023a:	46d6      	mov	lr, sl
 800023c:	0244      	lsls	r4, r0, #9
 800023e:	b5c0      	push	{r6, r7, lr}
 8000240:	0047      	lsls	r7, r0, #1
 8000242:	1c0e      	adds	r6, r1, #0
 8000244:	0a64      	lsrs	r4, r4, #9
 8000246:	0e3f      	lsrs	r7, r7, #24
 8000248:	0fc5      	lsrs	r5, r0, #31
 800024a:	2f00      	cmp	r7, #0
 800024c:	d03c      	beq.n	80002c8 <__aeabi_fdiv+0x94>
 800024e:	2fff      	cmp	r7, #255	@ 0xff
 8000250:	d042      	beq.n	80002d8 <__aeabi_fdiv+0xa4>
 8000252:	2300      	movs	r3, #0
 8000254:	2280      	movs	r2, #128	@ 0x80
 8000256:	4699      	mov	r9, r3
 8000258:	469a      	mov	sl, r3
 800025a:	00e4      	lsls	r4, r4, #3
 800025c:	04d2      	lsls	r2, r2, #19
 800025e:	4314      	orrs	r4, r2
 8000260:	3f7f      	subs	r7, #127	@ 0x7f
 8000262:	0273      	lsls	r3, r6, #9
 8000264:	0a5b      	lsrs	r3, r3, #9
 8000266:	4698      	mov	r8, r3
 8000268:	0073      	lsls	r3, r6, #1
 800026a:	0e1b      	lsrs	r3, r3, #24
 800026c:	0ff6      	lsrs	r6, r6, #31
 800026e:	2b00      	cmp	r3, #0
 8000270:	d01b      	beq.n	80002aa <__aeabi_fdiv+0x76>
 8000272:	2bff      	cmp	r3, #255	@ 0xff
 8000274:	d013      	beq.n	800029e <__aeabi_fdiv+0x6a>
 8000276:	4642      	mov	r2, r8
 8000278:	2180      	movs	r1, #128	@ 0x80
 800027a:	00d2      	lsls	r2, r2, #3
 800027c:	04c9      	lsls	r1, r1, #19
 800027e:	4311      	orrs	r1, r2
 8000280:	4688      	mov	r8, r1
 8000282:	2000      	movs	r0, #0
 8000284:	3b7f      	subs	r3, #127	@ 0x7f
 8000286:	0029      	movs	r1, r5
 8000288:	1aff      	subs	r7, r7, r3
 800028a:	464b      	mov	r3, r9
 800028c:	4071      	eors	r1, r6
 800028e:	b2c9      	uxtb	r1, r1
 8000290:	2b0f      	cmp	r3, #15
 8000292:	d900      	bls.n	8000296 <__aeabi_fdiv+0x62>
 8000294:	e0b5      	b.n	8000402 <__aeabi_fdiv+0x1ce>
 8000296:	4a74      	ldr	r2, [pc, #464]	@ (8000468 <__aeabi_fdiv+0x234>)
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	58d3      	ldr	r3, [r2, r3]
 800029c:	469f      	mov	pc, r3
 800029e:	4643      	mov	r3, r8
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d13f      	bne.n	8000324 <__aeabi_fdiv+0xf0>
 80002a4:	3fff      	subs	r7, #255	@ 0xff
 80002a6:	3302      	adds	r3, #2
 80002a8:	e003      	b.n	80002b2 <__aeabi_fdiv+0x7e>
 80002aa:	4643      	mov	r3, r8
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d12d      	bne.n	800030c <__aeabi_fdiv+0xd8>
 80002b0:	2301      	movs	r3, #1
 80002b2:	0029      	movs	r1, r5
 80002b4:	464a      	mov	r2, r9
 80002b6:	4071      	eors	r1, r6
 80002b8:	b2c9      	uxtb	r1, r1
 80002ba:	431a      	orrs	r2, r3
 80002bc:	2a0e      	cmp	r2, #14
 80002be:	d838      	bhi.n	8000332 <__aeabi_fdiv+0xfe>
 80002c0:	486a      	ldr	r0, [pc, #424]	@ (800046c <__aeabi_fdiv+0x238>)
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	5882      	ldr	r2, [r0, r2]
 80002c6:	4697      	mov	pc, r2
 80002c8:	2c00      	cmp	r4, #0
 80002ca:	d113      	bne.n	80002f4 <__aeabi_fdiv+0xc0>
 80002cc:	2304      	movs	r3, #4
 80002ce:	4699      	mov	r9, r3
 80002d0:	3b03      	subs	r3, #3
 80002d2:	2700      	movs	r7, #0
 80002d4:	469a      	mov	sl, r3
 80002d6:	e7c4      	b.n	8000262 <__aeabi_fdiv+0x2e>
 80002d8:	2c00      	cmp	r4, #0
 80002da:	d105      	bne.n	80002e8 <__aeabi_fdiv+0xb4>
 80002dc:	2308      	movs	r3, #8
 80002de:	4699      	mov	r9, r3
 80002e0:	3b06      	subs	r3, #6
 80002e2:	27ff      	movs	r7, #255	@ 0xff
 80002e4:	469a      	mov	sl, r3
 80002e6:	e7bc      	b.n	8000262 <__aeabi_fdiv+0x2e>
 80002e8:	230c      	movs	r3, #12
 80002ea:	4699      	mov	r9, r3
 80002ec:	3b09      	subs	r3, #9
 80002ee:	27ff      	movs	r7, #255	@ 0xff
 80002f0:	469a      	mov	sl, r3
 80002f2:	e7b6      	b.n	8000262 <__aeabi_fdiv+0x2e>
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 fbeb 	bl	8000ad0 <__clzsi2>
 80002fa:	2776      	movs	r7, #118	@ 0x76
 80002fc:	1f43      	subs	r3, r0, #5
 80002fe:	409c      	lsls	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	427f      	negs	r7, r7
 8000304:	4699      	mov	r9, r3
 8000306:	469a      	mov	sl, r3
 8000308:	1a3f      	subs	r7, r7, r0
 800030a:	e7aa      	b.n	8000262 <__aeabi_fdiv+0x2e>
 800030c:	4640      	mov	r0, r8
 800030e:	f000 fbdf 	bl	8000ad0 <__clzsi2>
 8000312:	4642      	mov	r2, r8
 8000314:	1f43      	subs	r3, r0, #5
 8000316:	409a      	lsls	r2, r3
 8000318:	2376      	movs	r3, #118	@ 0x76
 800031a:	425b      	negs	r3, r3
 800031c:	1a1b      	subs	r3, r3, r0
 800031e:	4690      	mov	r8, r2
 8000320:	2000      	movs	r0, #0
 8000322:	e7b0      	b.n	8000286 <__aeabi_fdiv+0x52>
 8000324:	2303      	movs	r3, #3
 8000326:	464a      	mov	r2, r9
 8000328:	431a      	orrs	r2, r3
 800032a:	4691      	mov	r9, r2
 800032c:	2003      	movs	r0, #3
 800032e:	33fc      	adds	r3, #252	@ 0xfc
 8000330:	e7a9      	b.n	8000286 <__aeabi_fdiv+0x52>
 8000332:	000d      	movs	r5, r1
 8000334:	20ff      	movs	r0, #255	@ 0xff
 8000336:	2200      	movs	r2, #0
 8000338:	05c0      	lsls	r0, r0, #23
 800033a:	07ed      	lsls	r5, r5, #31
 800033c:	4310      	orrs	r0, r2
 800033e:	4328      	orrs	r0, r5
 8000340:	bce0      	pop	{r5, r6, r7}
 8000342:	46ba      	mov	sl, r7
 8000344:	46b1      	mov	r9, r6
 8000346:	46a8      	mov	r8, r5
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	000d      	movs	r5, r1
 800034c:	2000      	movs	r0, #0
 800034e:	2200      	movs	r2, #0
 8000350:	e7f2      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000352:	4653      	mov	r3, sl
 8000354:	2b02      	cmp	r3, #2
 8000356:	d0ed      	beq.n	8000334 <__aeabi_fdiv+0x100>
 8000358:	2b03      	cmp	r3, #3
 800035a:	d033      	beq.n	80003c4 <__aeabi_fdiv+0x190>
 800035c:	46a0      	mov	r8, r4
 800035e:	2b01      	cmp	r3, #1
 8000360:	d105      	bne.n	800036e <__aeabi_fdiv+0x13a>
 8000362:	2000      	movs	r0, #0
 8000364:	2200      	movs	r2, #0
 8000366:	e7e7      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000368:	0035      	movs	r5, r6
 800036a:	2803      	cmp	r0, #3
 800036c:	d07a      	beq.n	8000464 <__aeabi_fdiv+0x230>
 800036e:	003b      	movs	r3, r7
 8000370:	337f      	adds	r3, #127	@ 0x7f
 8000372:	2b00      	cmp	r3, #0
 8000374:	dd2d      	ble.n	80003d2 <__aeabi_fdiv+0x19e>
 8000376:	4642      	mov	r2, r8
 8000378:	0752      	lsls	r2, r2, #29
 800037a:	d007      	beq.n	800038c <__aeabi_fdiv+0x158>
 800037c:	220f      	movs	r2, #15
 800037e:	4641      	mov	r1, r8
 8000380:	400a      	ands	r2, r1
 8000382:	2a04      	cmp	r2, #4
 8000384:	d002      	beq.n	800038c <__aeabi_fdiv+0x158>
 8000386:	2204      	movs	r2, #4
 8000388:	4694      	mov	ip, r2
 800038a:	44e0      	add	r8, ip
 800038c:	4642      	mov	r2, r8
 800038e:	0112      	lsls	r2, r2, #4
 8000390:	d505      	bpl.n	800039e <__aeabi_fdiv+0x16a>
 8000392:	4642      	mov	r2, r8
 8000394:	4b36      	ldr	r3, [pc, #216]	@ (8000470 <__aeabi_fdiv+0x23c>)
 8000396:	401a      	ands	r2, r3
 8000398:	003b      	movs	r3, r7
 800039a:	4690      	mov	r8, r2
 800039c:	3380      	adds	r3, #128	@ 0x80
 800039e:	2bfe      	cmp	r3, #254	@ 0xfe
 80003a0:	dcc8      	bgt.n	8000334 <__aeabi_fdiv+0x100>
 80003a2:	4642      	mov	r2, r8
 80003a4:	0192      	lsls	r2, r2, #6
 80003a6:	0a52      	lsrs	r2, r2, #9
 80003a8:	b2d8      	uxtb	r0, r3
 80003aa:	e7c5      	b.n	8000338 <__aeabi_fdiv+0x104>
 80003ac:	2280      	movs	r2, #128	@ 0x80
 80003ae:	2500      	movs	r5, #0
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	e7c0      	b.n	8000338 <__aeabi_fdiv+0x104>
 80003b6:	2280      	movs	r2, #128	@ 0x80
 80003b8:	03d2      	lsls	r2, r2, #15
 80003ba:	4214      	tst	r4, r2
 80003bc:	d002      	beq.n	80003c4 <__aeabi_fdiv+0x190>
 80003be:	4643      	mov	r3, r8
 80003c0:	4213      	tst	r3, r2
 80003c2:	d049      	beq.n	8000458 <__aeabi_fdiv+0x224>
 80003c4:	2280      	movs	r2, #128	@ 0x80
 80003c6:	03d2      	lsls	r2, r2, #15
 80003c8:	4322      	orrs	r2, r4
 80003ca:	0252      	lsls	r2, r2, #9
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	0a52      	lsrs	r2, r2, #9
 80003d0:	e7b2      	b.n	8000338 <__aeabi_fdiv+0x104>
 80003d2:	2201      	movs	r2, #1
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	2b1b      	cmp	r3, #27
 80003d8:	dcc3      	bgt.n	8000362 <__aeabi_fdiv+0x12e>
 80003da:	4642      	mov	r2, r8
 80003dc:	40da      	lsrs	r2, r3
 80003de:	4643      	mov	r3, r8
 80003e0:	379e      	adds	r7, #158	@ 0x9e
 80003e2:	40bb      	lsls	r3, r7
 80003e4:	1e59      	subs	r1, r3, #1
 80003e6:	418b      	sbcs	r3, r1
 80003e8:	431a      	orrs	r2, r3
 80003ea:	0753      	lsls	r3, r2, #29
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fdiv+0x1c4>
 80003ee:	230f      	movs	r3, #15
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fdiv+0x1c4>
 80003f6:	3204      	adds	r2, #4
 80003f8:	0153      	lsls	r3, r2, #5
 80003fa:	d529      	bpl.n	8000450 <__aeabi_fdiv+0x21c>
 80003fc:	2001      	movs	r0, #1
 80003fe:	2200      	movs	r2, #0
 8000400:	e79a      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000402:	4642      	mov	r2, r8
 8000404:	0163      	lsls	r3, r4, #5
 8000406:	0155      	lsls	r5, r2, #5
 8000408:	42ab      	cmp	r3, r5
 800040a:	d215      	bcs.n	8000438 <__aeabi_fdiv+0x204>
 800040c:	201b      	movs	r0, #27
 800040e:	2200      	movs	r2, #0
 8000410:	3f01      	subs	r7, #1
 8000412:	2601      	movs	r6, #1
 8000414:	001c      	movs	r4, r3
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	2c00      	cmp	r4, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fdiv+0x1ee>
 800041e:	429d      	cmp	r5, r3
 8000420:	d801      	bhi.n	8000426 <__aeabi_fdiv+0x1f2>
 8000422:	1b5b      	subs	r3, r3, r5
 8000424:	4332      	orrs	r2, r6
 8000426:	3801      	subs	r0, #1
 8000428:	2800      	cmp	r0, #0
 800042a:	d1f3      	bne.n	8000414 <__aeabi_fdiv+0x1e0>
 800042c:	1e58      	subs	r0, r3, #1
 800042e:	4183      	sbcs	r3, r0
 8000430:	4313      	orrs	r3, r2
 8000432:	4698      	mov	r8, r3
 8000434:	000d      	movs	r5, r1
 8000436:	e79a      	b.n	800036e <__aeabi_fdiv+0x13a>
 8000438:	201a      	movs	r0, #26
 800043a:	2201      	movs	r2, #1
 800043c:	1b5b      	subs	r3, r3, r5
 800043e:	e7e8      	b.n	8000412 <__aeabi_fdiv+0x1de>
 8000440:	3b02      	subs	r3, #2
 8000442:	425a      	negs	r2, r3
 8000444:	4153      	adcs	r3, r2
 8000446:	425b      	negs	r3, r3
 8000448:	0035      	movs	r5, r6
 800044a:	2200      	movs	r2, #0
 800044c:	b2d8      	uxtb	r0, r3
 800044e:	e773      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000450:	0192      	lsls	r2, r2, #6
 8000452:	2000      	movs	r0, #0
 8000454:	0a52      	lsrs	r2, r2, #9
 8000456:	e76f      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000458:	431a      	orrs	r2, r3
 800045a:	0252      	lsls	r2, r2, #9
 800045c:	0035      	movs	r5, r6
 800045e:	20ff      	movs	r0, #255	@ 0xff
 8000460:	0a52      	lsrs	r2, r2, #9
 8000462:	e769      	b.n	8000338 <__aeabi_fdiv+0x104>
 8000464:	4644      	mov	r4, r8
 8000466:	e7ad      	b.n	80003c4 <__aeabi_fdiv+0x190>
 8000468:	08002e7c 	.word	0x08002e7c
 800046c:	08002ebc 	.word	0x08002ebc
 8000470:	f7ffffff 	.word	0xf7ffffff

08000474 <__aeabi_fmul>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	464f      	mov	r7, r9
 8000478:	4646      	mov	r6, r8
 800047a:	46d6      	mov	lr, sl
 800047c:	0243      	lsls	r3, r0, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	0045      	lsls	r5, r0, #1
 8000482:	b5c0      	push	{r6, r7, lr}
 8000484:	4699      	mov	r9, r3
 8000486:	1c0f      	adds	r7, r1, #0
 8000488:	0e2d      	lsrs	r5, r5, #24
 800048a:	0fc6      	lsrs	r6, r0, #31
 800048c:	2d00      	cmp	r5, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_fmul+0x1e>
 8000490:	e088      	b.n	80005a4 <__aeabi_fmul+0x130>
 8000492:	2dff      	cmp	r5, #255	@ 0xff
 8000494:	d100      	bne.n	8000498 <__aeabi_fmul+0x24>
 8000496:	e08d      	b.n	80005b4 <__aeabi_fmul+0x140>
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	04d2      	lsls	r2, r2, #19
 800049e:	431a      	orrs	r2, r3
 80004a0:	2300      	movs	r3, #0
 80004a2:	4691      	mov	r9, r2
 80004a4:	4698      	mov	r8, r3
 80004a6:	469a      	mov	sl, r3
 80004a8:	3d7f      	subs	r5, #127	@ 0x7f
 80004aa:	027c      	lsls	r4, r7, #9
 80004ac:	007b      	lsls	r3, r7, #1
 80004ae:	0a64      	lsrs	r4, r4, #9
 80004b0:	0e1b      	lsrs	r3, r3, #24
 80004b2:	0fff      	lsrs	r7, r7, #31
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d068      	beq.n	800058a <__aeabi_fmul+0x116>
 80004b8:	2bff      	cmp	r3, #255	@ 0xff
 80004ba:	d021      	beq.n	8000500 <__aeabi_fmul+0x8c>
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	00e4      	lsls	r4, r4, #3
 80004c0:	04d2      	lsls	r2, r2, #19
 80004c2:	4314      	orrs	r4, r2
 80004c4:	4642      	mov	r2, r8
 80004c6:	3b7f      	subs	r3, #127	@ 0x7f
 80004c8:	195b      	adds	r3, r3, r5
 80004ca:	2100      	movs	r1, #0
 80004cc:	1c5d      	adds	r5, r3, #1
 80004ce:	2a0a      	cmp	r2, #10
 80004d0:	dc2e      	bgt.n	8000530 <__aeabi_fmul+0xbc>
 80004d2:	407e      	eors	r6, r7
 80004d4:	4642      	mov	r2, r8
 80004d6:	2a02      	cmp	r2, #2
 80004d8:	dc23      	bgt.n	8000522 <__aeabi_fmul+0xae>
 80004da:	3a01      	subs	r2, #1
 80004dc:	2a01      	cmp	r2, #1
 80004de:	d900      	bls.n	80004e2 <__aeabi_fmul+0x6e>
 80004e0:	e0bd      	b.n	800065e <__aeabi_fmul+0x1ea>
 80004e2:	2902      	cmp	r1, #2
 80004e4:	d06e      	beq.n	80005c4 <__aeabi_fmul+0x150>
 80004e6:	2901      	cmp	r1, #1
 80004e8:	d12c      	bne.n	8000544 <__aeabi_fmul+0xd0>
 80004ea:	2000      	movs	r0, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	05c0      	lsls	r0, r0, #23
 80004f0:	07f6      	lsls	r6, r6, #31
 80004f2:	4310      	orrs	r0, r2
 80004f4:	4330      	orrs	r0, r6
 80004f6:	bce0      	pop	{r5, r6, r7}
 80004f8:	46ba      	mov	sl, r7
 80004fa:	46b1      	mov	r9, r6
 80004fc:	46a8      	mov	r8, r5
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000500:	002b      	movs	r3, r5
 8000502:	33ff      	adds	r3, #255	@ 0xff
 8000504:	2c00      	cmp	r4, #0
 8000506:	d065      	beq.n	80005d4 <__aeabi_fmul+0x160>
 8000508:	2203      	movs	r2, #3
 800050a:	4641      	mov	r1, r8
 800050c:	4311      	orrs	r1, r2
 800050e:	0032      	movs	r2, r6
 8000510:	3501      	adds	r5, #1
 8000512:	4688      	mov	r8, r1
 8000514:	407a      	eors	r2, r7
 8000516:	35ff      	adds	r5, #255	@ 0xff
 8000518:	290a      	cmp	r1, #10
 800051a:	dd00      	ble.n	800051e <__aeabi_fmul+0xaa>
 800051c:	e0d8      	b.n	80006d0 <__aeabi_fmul+0x25c>
 800051e:	0016      	movs	r6, r2
 8000520:	2103      	movs	r1, #3
 8000522:	4640      	mov	r0, r8
 8000524:	2201      	movs	r2, #1
 8000526:	4082      	lsls	r2, r0
 8000528:	20a6      	movs	r0, #166	@ 0xa6
 800052a:	00c0      	lsls	r0, r0, #3
 800052c:	4202      	tst	r2, r0
 800052e:	d020      	beq.n	8000572 <__aeabi_fmul+0xfe>
 8000530:	4653      	mov	r3, sl
 8000532:	2b02      	cmp	r3, #2
 8000534:	d046      	beq.n	80005c4 <__aeabi_fmul+0x150>
 8000536:	2b03      	cmp	r3, #3
 8000538:	d100      	bne.n	800053c <__aeabi_fmul+0xc8>
 800053a:	e0bb      	b.n	80006b4 <__aeabi_fmul+0x240>
 800053c:	4651      	mov	r1, sl
 800053e:	464c      	mov	r4, r9
 8000540:	2901      	cmp	r1, #1
 8000542:	d0d2      	beq.n	80004ea <__aeabi_fmul+0x76>
 8000544:	002b      	movs	r3, r5
 8000546:	337f      	adds	r3, #127	@ 0x7f
 8000548:	2b00      	cmp	r3, #0
 800054a:	dd70      	ble.n	800062e <__aeabi_fmul+0x1ba>
 800054c:	0762      	lsls	r2, r4, #29
 800054e:	d004      	beq.n	800055a <__aeabi_fmul+0xe6>
 8000550:	220f      	movs	r2, #15
 8000552:	4022      	ands	r2, r4
 8000554:	2a04      	cmp	r2, #4
 8000556:	d000      	beq.n	800055a <__aeabi_fmul+0xe6>
 8000558:	3404      	adds	r4, #4
 800055a:	0122      	lsls	r2, r4, #4
 800055c:	d503      	bpl.n	8000566 <__aeabi_fmul+0xf2>
 800055e:	4b63      	ldr	r3, [pc, #396]	@ (80006ec <__aeabi_fmul+0x278>)
 8000560:	401c      	ands	r4, r3
 8000562:	002b      	movs	r3, r5
 8000564:	3380      	adds	r3, #128	@ 0x80
 8000566:	2bfe      	cmp	r3, #254	@ 0xfe
 8000568:	dc2c      	bgt.n	80005c4 <__aeabi_fmul+0x150>
 800056a:	01a2      	lsls	r2, r4, #6
 800056c:	0a52      	lsrs	r2, r2, #9
 800056e:	b2d8      	uxtb	r0, r3
 8000570:	e7bd      	b.n	80004ee <__aeabi_fmul+0x7a>
 8000572:	2090      	movs	r0, #144	@ 0x90
 8000574:	0080      	lsls	r0, r0, #2
 8000576:	4202      	tst	r2, r0
 8000578:	d127      	bne.n	80005ca <__aeabi_fmul+0x156>
 800057a:	38b9      	subs	r0, #185	@ 0xb9
 800057c:	38ff      	subs	r0, #255	@ 0xff
 800057e:	4210      	tst	r0, r2
 8000580:	d06d      	beq.n	800065e <__aeabi_fmul+0x1ea>
 8000582:	003e      	movs	r6, r7
 8000584:	46a1      	mov	r9, r4
 8000586:	468a      	mov	sl, r1
 8000588:	e7d2      	b.n	8000530 <__aeabi_fmul+0xbc>
 800058a:	2c00      	cmp	r4, #0
 800058c:	d141      	bne.n	8000612 <__aeabi_fmul+0x19e>
 800058e:	2301      	movs	r3, #1
 8000590:	4642      	mov	r2, r8
 8000592:	431a      	orrs	r2, r3
 8000594:	4690      	mov	r8, r2
 8000596:	002b      	movs	r3, r5
 8000598:	4642      	mov	r2, r8
 800059a:	2101      	movs	r1, #1
 800059c:	1c5d      	adds	r5, r3, #1
 800059e:	2a0a      	cmp	r2, #10
 80005a0:	dd97      	ble.n	80004d2 <__aeabi_fmul+0x5e>
 80005a2:	e7c5      	b.n	8000530 <__aeabi_fmul+0xbc>
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d126      	bne.n	80005f6 <__aeabi_fmul+0x182>
 80005a8:	2304      	movs	r3, #4
 80005aa:	4698      	mov	r8, r3
 80005ac:	3b03      	subs	r3, #3
 80005ae:	2500      	movs	r5, #0
 80005b0:	469a      	mov	sl, r3
 80005b2:	e77a      	b.n	80004aa <__aeabi_fmul+0x36>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d118      	bne.n	80005ea <__aeabi_fmul+0x176>
 80005b8:	2308      	movs	r3, #8
 80005ba:	4698      	mov	r8, r3
 80005bc:	3b06      	subs	r3, #6
 80005be:	25ff      	movs	r5, #255	@ 0xff
 80005c0:	469a      	mov	sl, r3
 80005c2:	e772      	b.n	80004aa <__aeabi_fmul+0x36>
 80005c4:	20ff      	movs	r0, #255	@ 0xff
 80005c6:	2200      	movs	r2, #0
 80005c8:	e791      	b.n	80004ee <__aeabi_fmul+0x7a>
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	2600      	movs	r6, #0
 80005ce:	20ff      	movs	r0, #255	@ 0xff
 80005d0:	03d2      	lsls	r2, r2, #15
 80005d2:	e78c      	b.n	80004ee <__aeabi_fmul+0x7a>
 80005d4:	4641      	mov	r1, r8
 80005d6:	2202      	movs	r2, #2
 80005d8:	3501      	adds	r5, #1
 80005da:	4311      	orrs	r1, r2
 80005dc:	4688      	mov	r8, r1
 80005de:	35ff      	adds	r5, #255	@ 0xff
 80005e0:	290a      	cmp	r1, #10
 80005e2:	dca5      	bgt.n	8000530 <__aeabi_fmul+0xbc>
 80005e4:	2102      	movs	r1, #2
 80005e6:	407e      	eors	r6, r7
 80005e8:	e774      	b.n	80004d4 <__aeabi_fmul+0x60>
 80005ea:	230c      	movs	r3, #12
 80005ec:	4698      	mov	r8, r3
 80005ee:	3b09      	subs	r3, #9
 80005f0:	25ff      	movs	r5, #255	@ 0xff
 80005f2:	469a      	mov	sl, r3
 80005f4:	e759      	b.n	80004aa <__aeabi_fmul+0x36>
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fa6a 	bl	8000ad0 <__clzsi2>
 80005fc:	464a      	mov	r2, r9
 80005fe:	1f43      	subs	r3, r0, #5
 8000600:	2576      	movs	r5, #118	@ 0x76
 8000602:	409a      	lsls	r2, r3
 8000604:	2300      	movs	r3, #0
 8000606:	426d      	negs	r5, r5
 8000608:	4691      	mov	r9, r2
 800060a:	4698      	mov	r8, r3
 800060c:	469a      	mov	sl, r3
 800060e:	1a2d      	subs	r5, r5, r0
 8000610:	e74b      	b.n	80004aa <__aeabi_fmul+0x36>
 8000612:	0020      	movs	r0, r4
 8000614:	f000 fa5c 	bl	8000ad0 <__clzsi2>
 8000618:	4642      	mov	r2, r8
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	409c      	lsls	r4, r3
 800061e:	1a2b      	subs	r3, r5, r0
 8000620:	3b76      	subs	r3, #118	@ 0x76
 8000622:	2100      	movs	r1, #0
 8000624:	1c5d      	adds	r5, r3, #1
 8000626:	2a0a      	cmp	r2, #10
 8000628:	dc00      	bgt.n	800062c <__aeabi_fmul+0x1b8>
 800062a:	e752      	b.n	80004d2 <__aeabi_fmul+0x5e>
 800062c:	e780      	b.n	8000530 <__aeabi_fmul+0xbc>
 800062e:	2201      	movs	r2, #1
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	2b1b      	cmp	r3, #27
 8000634:	dd00      	ble.n	8000638 <__aeabi_fmul+0x1c4>
 8000636:	e758      	b.n	80004ea <__aeabi_fmul+0x76>
 8000638:	359e      	adds	r5, #158	@ 0x9e
 800063a:	0022      	movs	r2, r4
 800063c:	40ac      	lsls	r4, r5
 800063e:	40da      	lsrs	r2, r3
 8000640:	1e63      	subs	r3, r4, #1
 8000642:	419c      	sbcs	r4, r3
 8000644:	4322      	orrs	r2, r4
 8000646:	0753      	lsls	r3, r2, #29
 8000648:	d004      	beq.n	8000654 <__aeabi_fmul+0x1e0>
 800064a:	230f      	movs	r3, #15
 800064c:	4013      	ands	r3, r2
 800064e:	2b04      	cmp	r3, #4
 8000650:	d000      	beq.n	8000654 <__aeabi_fmul+0x1e0>
 8000652:	3204      	adds	r2, #4
 8000654:	0153      	lsls	r3, r2, #5
 8000656:	d537      	bpl.n	80006c8 <__aeabi_fmul+0x254>
 8000658:	2001      	movs	r0, #1
 800065a:	2200      	movs	r2, #0
 800065c:	e747      	b.n	80004ee <__aeabi_fmul+0x7a>
 800065e:	0c21      	lsrs	r1, r4, #16
 8000660:	464a      	mov	r2, r9
 8000662:	0424      	lsls	r4, r4, #16
 8000664:	0c24      	lsrs	r4, r4, #16
 8000666:	0027      	movs	r7, r4
 8000668:	0c10      	lsrs	r0, r2, #16
 800066a:	0412      	lsls	r2, r2, #16
 800066c:	0c12      	lsrs	r2, r2, #16
 800066e:	4344      	muls	r4, r0
 8000670:	4357      	muls	r7, r2
 8000672:	4348      	muls	r0, r1
 8000674:	4351      	muls	r1, r2
 8000676:	0c3a      	lsrs	r2, r7, #16
 8000678:	1909      	adds	r1, r1, r4
 800067a:	1852      	adds	r2, r2, r1
 800067c:	4294      	cmp	r4, r2
 800067e:	d903      	bls.n	8000688 <__aeabi_fmul+0x214>
 8000680:	2180      	movs	r1, #128	@ 0x80
 8000682:	0249      	lsls	r1, r1, #9
 8000684:	468c      	mov	ip, r1
 8000686:	4460      	add	r0, ip
 8000688:	043f      	lsls	r7, r7, #16
 800068a:	0411      	lsls	r1, r2, #16
 800068c:	0c3f      	lsrs	r7, r7, #16
 800068e:	19c9      	adds	r1, r1, r7
 8000690:	018c      	lsls	r4, r1, #6
 8000692:	1e67      	subs	r7, r4, #1
 8000694:	41bc      	sbcs	r4, r7
 8000696:	0c12      	lsrs	r2, r2, #16
 8000698:	0e89      	lsrs	r1, r1, #26
 800069a:	1812      	adds	r2, r2, r0
 800069c:	430c      	orrs	r4, r1
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	4314      	orrs	r4, r2
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	d50e      	bpl.n	80006c4 <__aeabi_fmul+0x250>
 80006a6:	2301      	movs	r3, #1
 80006a8:	0862      	lsrs	r2, r4, #1
 80006aa:	401c      	ands	r4, r3
 80006ac:	4314      	orrs	r4, r2
 80006ae:	e749      	b.n	8000544 <__aeabi_fmul+0xd0>
 80006b0:	003e      	movs	r6, r7
 80006b2:	46a1      	mov	r9, r4
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	464b      	mov	r3, r9
 80006b8:	03d2      	lsls	r2, r2, #15
 80006ba:	431a      	orrs	r2, r3
 80006bc:	0252      	lsls	r2, r2, #9
 80006be:	20ff      	movs	r0, #255	@ 0xff
 80006c0:	0a52      	lsrs	r2, r2, #9
 80006c2:	e714      	b.n	80004ee <__aeabi_fmul+0x7a>
 80006c4:	001d      	movs	r5, r3
 80006c6:	e73d      	b.n	8000544 <__aeabi_fmul+0xd0>
 80006c8:	0192      	lsls	r2, r2, #6
 80006ca:	2000      	movs	r0, #0
 80006cc:	0a52      	lsrs	r2, r2, #9
 80006ce:	e70e      	b.n	80004ee <__aeabi_fmul+0x7a>
 80006d0:	290f      	cmp	r1, #15
 80006d2:	d1ed      	bne.n	80006b0 <__aeabi_fmul+0x23c>
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	464b      	mov	r3, r9
 80006d8:	03d2      	lsls	r2, r2, #15
 80006da:	4213      	tst	r3, r2
 80006dc:	d0ea      	beq.n	80006b4 <__aeabi_fmul+0x240>
 80006de:	4214      	tst	r4, r2
 80006e0:	d1e8      	bne.n	80006b4 <__aeabi_fmul+0x240>
 80006e2:	003e      	movs	r6, r7
 80006e4:	20ff      	movs	r0, #255	@ 0xff
 80006e6:	4322      	orrs	r2, r4
 80006e8:	e701      	b.n	80004ee <__aeabi_fmul+0x7a>
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	f7ffffff 	.word	0xf7ffffff

080006f0 <__aeabi_fsub>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	4647      	mov	r7, r8
 80006f4:	46ce      	mov	lr, r9
 80006f6:	024e      	lsls	r6, r1, #9
 80006f8:	0243      	lsls	r3, r0, #9
 80006fa:	0045      	lsls	r5, r0, #1
 80006fc:	0a72      	lsrs	r2, r6, #9
 80006fe:	0fc4      	lsrs	r4, r0, #31
 8000700:	0048      	lsls	r0, r1, #1
 8000702:	b580      	push	{r7, lr}
 8000704:	4694      	mov	ip, r2
 8000706:	0a5f      	lsrs	r7, r3, #9
 8000708:	0e2d      	lsrs	r5, r5, #24
 800070a:	099b      	lsrs	r3, r3, #6
 800070c:	0e00      	lsrs	r0, r0, #24
 800070e:	0fc9      	lsrs	r1, r1, #31
 8000710:	09b6      	lsrs	r6, r6, #6
 8000712:	28ff      	cmp	r0, #255	@ 0xff
 8000714:	d024      	beq.n	8000760 <__aeabi_fsub+0x70>
 8000716:	2201      	movs	r2, #1
 8000718:	4051      	eors	r1, r2
 800071a:	1a2a      	subs	r2, r5, r0
 800071c:	428c      	cmp	r4, r1
 800071e:	d00f      	beq.n	8000740 <__aeabi_fsub+0x50>
 8000720:	2a00      	cmp	r2, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_fsub+0x36>
 8000724:	e16a      	b.n	80009fc <__aeabi_fsub+0x30c>
 8000726:	2800      	cmp	r0, #0
 8000728:	d135      	bne.n	8000796 <__aeabi_fsub+0xa6>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fsub+0x40>
 800072e:	e0a2      	b.n	8000876 <__aeabi_fsub+0x186>
 8000730:	1e51      	subs	r1, r2, #1
 8000732:	2a01      	cmp	r2, #1
 8000734:	d100      	bne.n	8000738 <__aeabi_fsub+0x48>
 8000736:	e124      	b.n	8000982 <__aeabi_fsub+0x292>
 8000738:	2aff      	cmp	r2, #255	@ 0xff
 800073a:	d021      	beq.n	8000780 <__aeabi_fsub+0x90>
 800073c:	000a      	movs	r2, r1
 800073e:	e02f      	b.n	80007a0 <__aeabi_fsub+0xb0>
 8000740:	2a00      	cmp	r2, #0
 8000742:	dc00      	bgt.n	8000746 <__aeabi_fsub+0x56>
 8000744:	e167      	b.n	8000a16 <__aeabi_fsub+0x326>
 8000746:	2800      	cmp	r0, #0
 8000748:	d05e      	beq.n	8000808 <__aeabi_fsub+0x118>
 800074a:	2dff      	cmp	r5, #255	@ 0xff
 800074c:	d018      	beq.n	8000780 <__aeabi_fsub+0x90>
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	04c9      	lsls	r1, r1, #19
 8000752:	430e      	orrs	r6, r1
 8000754:	2a1b      	cmp	r2, #27
 8000756:	dc00      	bgt.n	800075a <__aeabi_fsub+0x6a>
 8000758:	e076      	b.n	8000848 <__aeabi_fsub+0x158>
 800075a:	002a      	movs	r2, r5
 800075c:	3301      	adds	r3, #1
 800075e:	e032      	b.n	80007c6 <__aeabi_fsub+0xd6>
 8000760:	002a      	movs	r2, r5
 8000762:	3aff      	subs	r2, #255	@ 0xff
 8000764:	4691      	mov	r9, r2
 8000766:	2e00      	cmp	r6, #0
 8000768:	d042      	beq.n	80007f0 <__aeabi_fsub+0x100>
 800076a:	428c      	cmp	r4, r1
 800076c:	d055      	beq.n	800081a <__aeabi_fsub+0x12a>
 800076e:	464a      	mov	r2, r9
 8000770:	2a00      	cmp	r2, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fsub+0x86>
 8000774:	e09c      	b.n	80008b0 <__aeabi_fsub+0x1c0>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fsub+0x8c>
 800077a:	e077      	b.n	800086c <__aeabi_fsub+0x17c>
 800077c:	000c      	movs	r4, r1
 800077e:	0033      	movs	r3, r6
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0x98>
 8000786:	e06e      	b.n	8000866 <__aeabi_fsub+0x176>
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	03d2      	lsls	r2, r2, #15
 800078c:	4313      	orrs	r3, r2
 800078e:	025b      	lsls	r3, r3, #9
 8000790:	20ff      	movs	r0, #255	@ 0xff
 8000792:	0a5b      	lsrs	r3, r3, #9
 8000794:	e024      	b.n	80007e0 <__aeabi_fsub+0xf0>
 8000796:	2dff      	cmp	r5, #255	@ 0xff
 8000798:	d0f2      	beq.n	8000780 <__aeabi_fsub+0x90>
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	04c9      	lsls	r1, r1, #19
 800079e:	430e      	orrs	r6, r1
 80007a0:	2101      	movs	r1, #1
 80007a2:	2a1b      	cmp	r2, #27
 80007a4:	dc08      	bgt.n	80007b8 <__aeabi_fsub+0xc8>
 80007a6:	0031      	movs	r1, r6
 80007a8:	2020      	movs	r0, #32
 80007aa:	40d1      	lsrs	r1, r2
 80007ac:	1a82      	subs	r2, r0, r2
 80007ae:	4096      	lsls	r6, r2
 80007b0:	0032      	movs	r2, r6
 80007b2:	1e50      	subs	r0, r2, #1
 80007b4:	4182      	sbcs	r2, r0
 80007b6:	4311      	orrs	r1, r2
 80007b8:	1a5b      	subs	r3, r3, r1
 80007ba:	015a      	lsls	r2, r3, #5
 80007bc:	d460      	bmi.n	8000880 <__aeabi_fsub+0x190>
 80007be:	2107      	movs	r1, #7
 80007c0:	002a      	movs	r2, r5
 80007c2:	4019      	ands	r1, r3
 80007c4:	d057      	beq.n	8000876 <__aeabi_fsub+0x186>
 80007c6:	210f      	movs	r1, #15
 80007c8:	4019      	ands	r1, r3
 80007ca:	2904      	cmp	r1, #4
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fsub+0xe0>
 80007ce:	3304      	adds	r3, #4
 80007d0:	0159      	lsls	r1, r3, #5
 80007d2:	d550      	bpl.n	8000876 <__aeabi_fsub+0x186>
 80007d4:	1c50      	adds	r0, r2, #1
 80007d6:	2afe      	cmp	r2, #254	@ 0xfe
 80007d8:	d045      	beq.n	8000866 <__aeabi_fsub+0x176>
 80007da:	019b      	lsls	r3, r3, #6
 80007dc:	b2c0      	uxtb	r0, r0
 80007de:	0a5b      	lsrs	r3, r3, #9
 80007e0:	05c0      	lsls	r0, r0, #23
 80007e2:	4318      	orrs	r0, r3
 80007e4:	07e4      	lsls	r4, r4, #31
 80007e6:	4320      	orrs	r0, r4
 80007e8:	bcc0      	pop	{r6, r7}
 80007ea:	46b9      	mov	r9, r7
 80007ec:	46b0      	mov	r8, r6
 80007ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f0:	2201      	movs	r2, #1
 80007f2:	4051      	eors	r1, r2
 80007f4:	428c      	cmp	r4, r1
 80007f6:	d1ba      	bne.n	800076e <__aeabi_fsub+0x7e>
 80007f8:	464a      	mov	r2, r9
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d010      	beq.n	8000820 <__aeabi_fsub+0x130>
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x114>
 8000802:	e098      	b.n	8000936 <__aeabi_fsub+0x246>
 8000804:	2300      	movs	r3, #0
 8000806:	e7bb      	b.n	8000780 <__aeabi_fsub+0x90>
 8000808:	2e00      	cmp	r6, #0
 800080a:	d034      	beq.n	8000876 <__aeabi_fsub+0x186>
 800080c:	1e51      	subs	r1, r2, #1
 800080e:	2a01      	cmp	r2, #1
 8000810:	d06e      	beq.n	80008f0 <__aeabi_fsub+0x200>
 8000812:	2aff      	cmp	r2, #255	@ 0xff
 8000814:	d0b4      	beq.n	8000780 <__aeabi_fsub+0x90>
 8000816:	000a      	movs	r2, r1
 8000818:	e79c      	b.n	8000754 <__aeabi_fsub+0x64>
 800081a:	2a00      	cmp	r2, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fsub+0x130>
 800081e:	e088      	b.n	8000932 <__aeabi_fsub+0x242>
 8000820:	20fe      	movs	r0, #254	@ 0xfe
 8000822:	1c6a      	adds	r2, r5, #1
 8000824:	4210      	tst	r0, r2
 8000826:	d000      	beq.n	800082a <__aeabi_fsub+0x13a>
 8000828:	e092      	b.n	8000950 <__aeabi_fsub+0x260>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_fsub+0x140>
 800082e:	e0a4      	b.n	800097a <__aeabi_fsub+0x28a>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fsub+0x146>
 8000834:	e0cb      	b.n	80009ce <__aeabi_fsub+0x2de>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fsub+0x14c>
 800083a:	e0ca      	b.n	80009d2 <__aeabi_fsub+0x2e2>
 800083c:	2200      	movs	r2, #0
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	025b      	lsls	r3, r3, #9
 8000842:	0a5b      	lsrs	r3, r3, #9
 8000844:	b2d0      	uxtb	r0, r2
 8000846:	e7cb      	b.n	80007e0 <__aeabi_fsub+0xf0>
 8000848:	0031      	movs	r1, r6
 800084a:	2020      	movs	r0, #32
 800084c:	40d1      	lsrs	r1, r2
 800084e:	1a82      	subs	r2, r0, r2
 8000850:	4096      	lsls	r6, r2
 8000852:	0032      	movs	r2, r6
 8000854:	1e50      	subs	r0, r2, #1
 8000856:	4182      	sbcs	r2, r0
 8000858:	430a      	orrs	r2, r1
 800085a:	189b      	adds	r3, r3, r2
 800085c:	015a      	lsls	r2, r3, #5
 800085e:	d5ae      	bpl.n	80007be <__aeabi_fsub+0xce>
 8000860:	1c6a      	adds	r2, r5, #1
 8000862:	2dfe      	cmp	r5, #254	@ 0xfe
 8000864:	d14a      	bne.n	80008fc <__aeabi_fsub+0x20c>
 8000866:	20ff      	movs	r0, #255	@ 0xff
 8000868:	2300      	movs	r3, #0
 800086a:	e7b9      	b.n	80007e0 <__aeabi_fsub+0xf0>
 800086c:	22ff      	movs	r2, #255	@ 0xff
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14b      	bne.n	800090a <__aeabi_fsub+0x21a>
 8000872:	000c      	movs	r4, r1
 8000874:	0033      	movs	r3, r6
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	2aff      	cmp	r2, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x18e>
 800087c:	e781      	b.n	8000782 <__aeabi_fsub+0x92>
 800087e:	e7df      	b.n	8000840 <__aeabi_fsub+0x150>
 8000880:	019f      	lsls	r7, r3, #6
 8000882:	09bf      	lsrs	r7, r7, #6
 8000884:	0038      	movs	r0, r7
 8000886:	f000 f923 	bl	8000ad0 <__clzsi2>
 800088a:	3805      	subs	r0, #5
 800088c:	4087      	lsls	r7, r0
 800088e:	4285      	cmp	r5, r0
 8000890:	dc21      	bgt.n	80008d6 <__aeabi_fsub+0x1e6>
 8000892:	003b      	movs	r3, r7
 8000894:	2120      	movs	r1, #32
 8000896:	1b42      	subs	r2, r0, r5
 8000898:	3201      	adds	r2, #1
 800089a:	40d3      	lsrs	r3, r2
 800089c:	1a8a      	subs	r2, r1, r2
 800089e:	4097      	lsls	r7, r2
 80008a0:	1e7a      	subs	r2, r7, #1
 80008a2:	4197      	sbcs	r7, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	433b      	orrs	r3, r7
 80008a8:	0759      	lsls	r1, r3, #29
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x1be>
 80008ac:	e78b      	b.n	80007c6 <__aeabi_fsub+0xd6>
 80008ae:	e78f      	b.n	80007d0 <__aeabi_fsub+0xe0>
 80008b0:	20fe      	movs	r0, #254	@ 0xfe
 80008b2:	1c6a      	adds	r2, r5, #1
 80008b4:	4210      	tst	r0, r2
 80008b6:	d112      	bne.n	80008de <__aeabi_fsub+0x1ee>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d152      	bne.n	8000962 <__aeabi_fsub+0x272>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d07c      	beq.n	80009ba <__aeabi_fsub+0x2ca>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d0bb      	beq.n	800083c <__aeabi_fsub+0x14c>
 80008c4:	1b9a      	subs	r2, r3, r6
 80008c6:	0150      	lsls	r0, r2, #5
 80008c8:	d400      	bmi.n	80008cc <__aeabi_fsub+0x1dc>
 80008ca:	e08b      	b.n	80009e4 <__aeabi_fsub+0x2f4>
 80008cc:	2401      	movs	r4, #1
 80008ce:	2200      	movs	r2, #0
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	400c      	ands	r4, r1
 80008d4:	e7e8      	b.n	80008a8 <__aeabi_fsub+0x1b8>
 80008d6:	4b56      	ldr	r3, [pc, #344]	@ (8000a30 <__aeabi_fsub+0x340>)
 80008d8:	1a2a      	subs	r2, r5, r0
 80008da:	403b      	ands	r3, r7
 80008dc:	e7e4      	b.n	80008a8 <__aeabi_fsub+0x1b8>
 80008de:	1b9f      	subs	r7, r3, r6
 80008e0:	017a      	lsls	r2, r7, #5
 80008e2:	d446      	bmi.n	8000972 <__aeabi_fsub+0x282>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d1cd      	bne.n	8000884 <__aeabi_fsub+0x194>
 80008e8:	2400      	movs	r4, #0
 80008ea:	2000      	movs	r0, #0
 80008ec:	2300      	movs	r3, #0
 80008ee:	e777      	b.n	80007e0 <__aeabi_fsub+0xf0>
 80008f0:	199b      	adds	r3, r3, r6
 80008f2:	2501      	movs	r5, #1
 80008f4:	3201      	adds	r2, #1
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d400      	bmi.n	80008fc <__aeabi_fsub+0x20c>
 80008fa:	e760      	b.n	80007be <__aeabi_fsub+0xce>
 80008fc:	2101      	movs	r1, #1
 80008fe:	484d      	ldr	r0, [pc, #308]	@ (8000a34 <__aeabi_fsub+0x344>)
 8000900:	4019      	ands	r1, r3
 8000902:	085b      	lsrs	r3, r3, #1
 8000904:	4003      	ands	r3, r0
 8000906:	430b      	orrs	r3, r1
 8000908:	e7ce      	b.n	80008a8 <__aeabi_fsub+0x1b8>
 800090a:	1e57      	subs	r7, r2, #1
 800090c:	2a01      	cmp	r2, #1
 800090e:	d05a      	beq.n	80009c6 <__aeabi_fsub+0x2d6>
 8000910:	000c      	movs	r4, r1
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d033      	beq.n	800097e <__aeabi_fsub+0x28e>
 8000916:	2201      	movs	r2, #1
 8000918:	2f1b      	cmp	r7, #27
 800091a:	dc07      	bgt.n	800092c <__aeabi_fsub+0x23c>
 800091c:	2120      	movs	r1, #32
 800091e:	1bc9      	subs	r1, r1, r7
 8000920:	001a      	movs	r2, r3
 8000922:	408b      	lsls	r3, r1
 8000924:	40fa      	lsrs	r2, r7
 8000926:	1e59      	subs	r1, r3, #1
 8000928:	418b      	sbcs	r3, r1
 800092a:	431a      	orrs	r2, r3
 800092c:	0005      	movs	r5, r0
 800092e:	1ab3      	subs	r3, r6, r2
 8000930:	e743      	b.n	80007ba <__aeabi_fsub+0xca>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d123      	bne.n	800097e <__aeabi_fsub+0x28e>
 8000936:	22ff      	movs	r2, #255	@ 0xff
 8000938:	2b00      	cmp	r3, #0
 800093a:	d09b      	beq.n	8000874 <__aeabi_fsub+0x184>
 800093c:	1e51      	subs	r1, r2, #1
 800093e:	2a01      	cmp	r2, #1
 8000940:	d0d6      	beq.n	80008f0 <__aeabi_fsub+0x200>
 8000942:	2aff      	cmp	r2, #255	@ 0xff
 8000944:	d01b      	beq.n	800097e <__aeabi_fsub+0x28e>
 8000946:	291b      	cmp	r1, #27
 8000948:	dd2c      	ble.n	80009a4 <__aeabi_fsub+0x2b4>
 800094a:	0002      	movs	r2, r0
 800094c:	1c73      	adds	r3, r6, #1
 800094e:	e73a      	b.n	80007c6 <__aeabi_fsub+0xd6>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d088      	beq.n	8000866 <__aeabi_fsub+0x176>
 8000954:	199b      	adds	r3, r3, r6
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	0759      	lsls	r1, r3, #29
 800095a:	d000      	beq.n	800095e <__aeabi_fsub+0x26e>
 800095c:	e733      	b.n	80007c6 <__aeabi_fsub+0xd6>
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	e76e      	b.n	8000840 <__aeabi_fsub+0x150>
 8000962:	2b00      	cmp	r3, #0
 8000964:	d110      	bne.n	8000988 <__aeabi_fsub+0x298>
 8000966:	2e00      	cmp	r6, #0
 8000968:	d043      	beq.n	80009f2 <__aeabi_fsub+0x302>
 800096a:	2401      	movs	r4, #1
 800096c:	0033      	movs	r3, r6
 800096e:	400c      	ands	r4, r1
 8000970:	e706      	b.n	8000780 <__aeabi_fsub+0x90>
 8000972:	2401      	movs	r4, #1
 8000974:	1af7      	subs	r7, r6, r3
 8000976:	400c      	ands	r4, r1
 8000978:	e784      	b.n	8000884 <__aeabi_fsub+0x194>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <__aeabi_fsub+0x298>
 800097e:	0033      	movs	r3, r6
 8000980:	e6fe      	b.n	8000780 <__aeabi_fsub+0x90>
 8000982:	2501      	movs	r5, #1
 8000984:	1b9b      	subs	r3, r3, r6
 8000986:	e718      	b.n	80007ba <__aeabi_fsub+0xca>
 8000988:	2e00      	cmp	r6, #0
 800098a:	d100      	bne.n	800098e <__aeabi_fsub+0x29e>
 800098c:	e6f8      	b.n	8000780 <__aeabi_fsub+0x90>
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	4297      	cmp	r7, r2
 8000994:	d304      	bcc.n	80009a0 <__aeabi_fsub+0x2b0>
 8000996:	4594      	cmp	ip, r2
 8000998:	d202      	bcs.n	80009a0 <__aeabi_fsub+0x2b0>
 800099a:	2401      	movs	r4, #1
 800099c:	0033      	movs	r3, r6
 800099e:	400c      	ands	r4, r1
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	e6f1      	b.n	8000788 <__aeabi_fsub+0x98>
 80009a4:	001a      	movs	r2, r3
 80009a6:	2520      	movs	r5, #32
 80009a8:	40ca      	lsrs	r2, r1
 80009aa:	1a69      	subs	r1, r5, r1
 80009ac:	408b      	lsls	r3, r1
 80009ae:	1e59      	subs	r1, r3, #1
 80009b0:	418b      	sbcs	r3, r1
 80009b2:	4313      	orrs	r3, r2
 80009b4:	0005      	movs	r5, r0
 80009b6:	199b      	adds	r3, r3, r6
 80009b8:	e750      	b.n	800085c <__aeabi_fsub+0x16c>
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d094      	beq.n	80008e8 <__aeabi_fsub+0x1f8>
 80009be:	2401      	movs	r4, #1
 80009c0:	0033      	movs	r3, r6
 80009c2:	400c      	ands	r4, r1
 80009c4:	e73a      	b.n	800083c <__aeabi_fsub+0x14c>
 80009c6:	000c      	movs	r4, r1
 80009c8:	2501      	movs	r5, #1
 80009ca:	1af3      	subs	r3, r6, r3
 80009cc:	e6f5      	b.n	80007ba <__aeabi_fsub+0xca>
 80009ce:	0033      	movs	r3, r6
 80009d0:	e734      	b.n	800083c <__aeabi_fsub+0x14c>
 80009d2:	199b      	adds	r3, r3, r6
 80009d4:	2200      	movs	r2, #0
 80009d6:	0159      	lsls	r1, r3, #5
 80009d8:	d5c1      	bpl.n	800095e <__aeabi_fsub+0x26e>
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <__aeabi_fsub+0x340>)
 80009dc:	4013      	ands	r3, r2
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	2201      	movs	r2, #1
 80009e2:	e72d      	b.n	8000840 <__aeabi_fsub+0x150>
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d100      	bne.n	80009ea <__aeabi_fsub+0x2fa>
 80009e8:	e77e      	b.n	80008e8 <__aeabi_fsub+0x1f8>
 80009ea:	0013      	movs	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	e726      	b.n	8000840 <__aeabi_fsub+0x150>
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	2400      	movs	r4, #0
 80009f6:	20ff      	movs	r0, #255	@ 0xff
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	e6f1      	b.n	80007e0 <__aeabi_fsub+0xf0>
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fsub+0x312>
 8000a00:	e756      	b.n	80008b0 <__aeabi_fsub+0x1c0>
 8000a02:	1b47      	subs	r7, r0, r5
 8000a04:	003a      	movs	r2, r7
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x31c>
 8000a0a:	e730      	b.n	800086e <__aeabi_fsub+0x17e>
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	000c      	movs	r4, r1
 8000a12:	4313      	orrs	r3, r2
 8000a14:	e77f      	b.n	8000916 <__aeabi_fsub+0x226>
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x32c>
 8000a1a:	e701      	b.n	8000820 <__aeabi_fsub+0x130>
 8000a1c:	1b41      	subs	r1, r0, r5
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d101      	bne.n	8000a26 <__aeabi_fsub+0x336>
 8000a22:	000a      	movs	r2, r1
 8000a24:	e788      	b.n	8000938 <__aeabi_fsub+0x248>
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	04d2      	lsls	r2, r2, #19
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	e78b      	b.n	8000946 <__aeabi_fsub+0x256>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	fbffffff 	.word	0xfbffffff
 8000a34:	7dffffff 	.word	0x7dffffff

08000a38 <__aeabi_i2f>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d013      	beq.n	8000a66 <__aeabi_i2f+0x2e>
 8000a3e:	17c3      	asrs	r3, r0, #31
 8000a40:	18c5      	adds	r5, r0, r3
 8000a42:	405d      	eors	r5, r3
 8000a44:	0fc4      	lsrs	r4, r0, #31
 8000a46:	0028      	movs	r0, r5
 8000a48:	f000 f842 	bl	8000ad0 <__clzsi2>
 8000a4c:	239e      	movs	r3, #158	@ 0x9e
 8000a4e:	0001      	movs	r1, r0
 8000a50:	1a1b      	subs	r3, r3, r0
 8000a52:	2b96      	cmp	r3, #150	@ 0x96
 8000a54:	dc0f      	bgt.n	8000a76 <__aeabi_i2f+0x3e>
 8000a56:	2808      	cmp	r0, #8
 8000a58:	d034      	beq.n	8000ac4 <__aeabi_i2f+0x8c>
 8000a5a:	3908      	subs	r1, #8
 8000a5c:	408d      	lsls	r5, r1
 8000a5e:	026d      	lsls	r5, r5, #9
 8000a60:	0a6d      	lsrs	r5, r5, #9
 8000a62:	b2d8      	uxtb	r0, r3
 8000a64:	e002      	b.n	8000a6c <__aeabi_i2f+0x34>
 8000a66:	2400      	movs	r4, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	05c0      	lsls	r0, r0, #23
 8000a6e:	4328      	orrs	r0, r5
 8000a70:	07e4      	lsls	r4, r4, #31
 8000a72:	4320      	orrs	r0, r4
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	2b99      	cmp	r3, #153	@ 0x99
 8000a78:	dc16      	bgt.n	8000aa8 <__aeabi_i2f+0x70>
 8000a7a:	1f42      	subs	r2, r0, #5
 8000a7c:	2805      	cmp	r0, #5
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_i2f+0x4a>
 8000a80:	4095      	lsls	r5, r2
 8000a82:	002a      	movs	r2, r5
 8000a84:	4811      	ldr	r0, [pc, #68]	@ (8000acc <__aeabi_i2f+0x94>)
 8000a86:	4002      	ands	r2, r0
 8000a88:	076e      	lsls	r6, r5, #29
 8000a8a:	d009      	beq.n	8000aa0 <__aeabi_i2f+0x68>
 8000a8c:	260f      	movs	r6, #15
 8000a8e:	4035      	ands	r5, r6
 8000a90:	2d04      	cmp	r5, #4
 8000a92:	d005      	beq.n	8000aa0 <__aeabi_i2f+0x68>
 8000a94:	3204      	adds	r2, #4
 8000a96:	0155      	lsls	r5, r2, #5
 8000a98:	d502      	bpl.n	8000aa0 <__aeabi_i2f+0x68>
 8000a9a:	239f      	movs	r3, #159	@ 0x9f
 8000a9c:	4002      	ands	r2, r0
 8000a9e:	1a5b      	subs	r3, r3, r1
 8000aa0:	0192      	lsls	r2, r2, #6
 8000aa2:	0a55      	lsrs	r5, r2, #9
 8000aa4:	b2d8      	uxtb	r0, r3
 8000aa6:	e7e1      	b.n	8000a6c <__aeabi_i2f+0x34>
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	1a12      	subs	r2, r2, r0
 8000aac:	0028      	movs	r0, r5
 8000aae:	40d0      	lsrs	r0, r2
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	0008      	movs	r0, r1
 8000ab4:	301b      	adds	r0, #27
 8000ab6:	4085      	lsls	r5, r0
 8000ab8:	0028      	movs	r0, r5
 8000aba:	1e45      	subs	r5, r0, #1
 8000abc:	41a8      	sbcs	r0, r5
 8000abe:	4302      	orrs	r2, r0
 8000ac0:	0015      	movs	r5, r2
 8000ac2:	e7de      	b.n	8000a82 <__aeabi_i2f+0x4a>
 8000ac4:	026d      	lsls	r5, r5, #9
 8000ac6:	2096      	movs	r0, #150	@ 0x96
 8000ac8:	0a6d      	lsrs	r5, r5, #9
 8000aca:	e7cf      	b.n	8000a6c <__aeabi_i2f+0x34>
 8000acc:	fbffffff 	.word	0xfbffffff

08000ad0 <__clzsi2>:
 8000ad0:	211c      	movs	r1, #28
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	041b      	lsls	r3, r3, #16
 8000ad6:	4298      	cmp	r0, r3
 8000ad8:	d301      	bcc.n	8000ade <__clzsi2+0xe>
 8000ada:	0c00      	lsrs	r0, r0, #16
 8000adc:	3910      	subs	r1, #16
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	4298      	cmp	r0, r3
 8000ae2:	d301      	bcc.n	8000ae8 <__clzsi2+0x18>
 8000ae4:	0a00      	lsrs	r0, r0, #8
 8000ae6:	3908      	subs	r1, #8
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d301      	bcc.n	8000af2 <__clzsi2+0x22>
 8000aee:	0900      	lsrs	r0, r0, #4
 8000af0:	3904      	subs	r1, #4
 8000af2:	a202      	add	r2, pc, #8	@ (adr r2, 8000afc <__clzsi2+0x2c>)
 8000af4:	5c10      	ldrb	r0, [r2, r0]
 8000af6:	1840      	adds	r0, r0, r1
 8000af8:	4770      	bx	lr
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	02020304 	.word	0x02020304
 8000b00:	01010101 	.word	0x01010101
	...

08000b0c <ADC_Incremental_Write>:
 * @param[in]			- Amount of registers which need to be written
 *
 * @return				- none
 */
uint8_t ADC_Incremental_Write(ADC_Handle_t *pADC, uint8_t RegisterAddress, uint8_t AmountADCRegistersToWrite)
{
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	b570      	push	{r4, r5, r6, lr}
	// Check if the parameters which were given to the function are correct
	// 1. Check if initial address is okey
	if (RegisterAddress < ADCDATA_ADDRESS || RegisterAddress > CRCCFG_ADDRESS)
 8000b10:	290f      	cmp	r1, #15
 8000b12:	d82f      	bhi.n	8000b74 <ADC_Incremental_Write+0x68>
	{
		// Generate Error
		return 1;
	}
	// 2. Check if amount to write is not too long
	if (AmountADCRegistersToWrite > (0xE - RegisterAddress))
 8000b14:	200e      	movs	r0, #14
 8000b16:	1a40      	subs	r0, r0, r1
 8000b18:	4282      	cmp	r2, r0
 8000b1a:	dc2b      	bgt.n	8000b74 <ADC_Incremental_Write+0x68>
	// Forming Fast Command for incremental writing
	// Adding Device address to the bits [7:6];
	FastCommandByte = ADC_DEVICE_ADDRESS << 6;

	// Adding address (bits [5:2]) of ADC's register address we want to start writing to
	FastCommandByte += RegisterAddress << 2;
 8000b1c:	0088      	lsls	r0, r1, #2

	// Adding "Increment writing" command (bits [1:0])
	FastCommandByte += COMMAND_INCREMENTAL_WRITE;
 8000b1e:	4c3e      	ldr	r4, [pc, #248]	@ (8000c18 <ADC_Incremental_Write+0x10c>)
 8000b20:	3042      	adds	r0, #66	@ 0x42
 8000b22:	b2c0      	uxtb	r0, r0
 8000b24:	7020      	strb	r0, [r4, #0]
	// Assign first byte for sending SPI writing command with desirable address
	SPIMessage[0] = FastCommandByte;

	// Variable will be responsible for creating exact length of the SPI message
	// Initial value "1" because it will be first byte with system information (previous assignment)
	uint8_t SPIAmountofBytes = 1;
 8000b26:	2401      	movs	r4, #1
	SPIMessage[0] = FastCommandByte;
 8000b28:	4d3c      	ldr	r5, [pc, #240]	@ (8000c1c <ADC_Incremental_Write+0x110>)
	 *
	 * for loop will go through register which needs to be processed
	 * Switch will decide amount of bytes for each particular register
	 */

	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister < (RegisterAddress + AmountADCRegistersToWrite); CurrentRegister++)
 8000b2a:	1852      	adds	r2, r2, r1
	SPIMessage[0] = FastCommandByte;
 8000b2c:	7028      	strb	r0, [r5, #0]
	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister < (RegisterAddress + AmountADCRegistersToWrite); CurrentRegister++)
 8000b2e:	4291      	cmp	r1, r2
 8000b30:	db13      	blt.n	8000b5a <ADC_Incremental_Write+0x4e>
				return 1;			//???????????????    Return error for the function    ???????????????????
		}

	}

	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000b32:	2090      	movs	r0, #144	@ 0x90
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	05c0      	lsls	r0, r0, #23
 8000b3a:	f000 fde3 	bl	8001704 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, SPIMessage, SPIAmountofBytes, 10);
 8000b3e:	230a      	movs	r3, #10
 8000b40:	0022      	movs	r2, r4
 8000b42:	0029      	movs	r1, r5
 8000b44:	4836      	ldr	r0, [pc, #216]	@ (8000c20 <ADC_Incremental_Write+0x114>)
 8000b46:	f001 fd0b 	bl	8002560 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000b4a:	2090      	movs	r0, #144	@ 0x90
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	05c0      	lsls	r0, r0, #23
 8000b50:	2110      	movs	r1, #16
 8000b52:	f000 fdd7 	bl	8001704 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);




	return 0;
 8000b56:	2000      	movs	r0, #0
 8000b58:	e00d      	b.n	8000b76 <ADC_Incremental_Write+0x6a>
		switch (CurrentRegister)
 8000b5a:	1e48      	subs	r0, r1, #1
 8000b5c:	280d      	cmp	r0, #13
 8000b5e:	d809      	bhi.n	8000b74 <ADC_Incremental_Write+0x68>
 8000b60:	1c66      	adds	r6, r4, #1
 8000b62:	f7ff fad1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000b66:	0f09      	.short	0x0f09
 8000b68:	17151311 	.word	0x17151311
 8000b6c:	362e2619 	.word	0x362e2619
 8000b70:	4e4c4940 	.word	0x4e4c4940
		return 1;
 8000b74:	2001      	movs	r0, #1
}
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b78:	7918      	ldrb	r0, [r3, #4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b7a:	5528      	strb	r0, [r5, r4]
				SPIAmountofBytes++;
 8000b7c:	b2f4      	uxtb	r4, r6
	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister < (RegisterAddress + AmountADCRegistersToWrite); CurrentRegister++)
 8000b7e:	3101      	adds	r1, #1
 8000b80:	b2c9      	uxtb	r1, r1
 8000b82:	e7d4      	b.n	8000b2e <ADC_Incremental_Write+0x22>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b84:	7958      	ldrb	r0, [r3, #5]
 8000b86:	e7f8      	b.n	8000b7a <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b88:	7998      	ldrb	r0, [r3, #6]
 8000b8a:	e7f6      	b.n	8000b7a <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b8c:	79d8      	ldrb	r0, [r3, #7]
 8000b8e:	e7f4      	b.n	8000b7a <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b90:	7a18      	ldrb	r0, [r3, #8]
 8000b92:	e7f2      	b.n	8000b7a <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b94:	7a58      	ldrb	r0, [r3, #9]
 8000b96:	e7f0      	b.n	8000b7a <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b98:	7a98      	ldrb	r0, [r3, #10]
 8000b9a:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000b9c:	7ade      	ldrb	r6, [r3, #11]
				SPIAmountofBytes++;
 8000b9e:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000ba0:	b2c0      	uxtb	r0, r0
 8000ba2:	542e      	strb	r6, [r5, r0]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000ba4:	7b1e      	ldrb	r6, [r3, #12]
				SPIAmountofBytes++;
 8000ba6:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000ba8:	b2c0      	uxtb	r0, r0
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000baa:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000bac:	3403      	adds	r4, #3
				SPIAmountofBytes++;
 8000bae:	b2e4      	uxtb	r4, r4
				break;
 8000bb0:	e7e5      	b.n	8000b7e <ADC_Incremental_Write+0x72>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bb2:	7c18      	ldrb	r0, [r3, #16]
 8000bb4:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bb6:	7c5e      	ldrb	r6, [r3, #17]
				SPIAmountofBytes++;
 8000bb8:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bba:	b2c0      	uxtb	r0, r0
 8000bbc:	542e      	strb	r6, [r5, r0]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bbe:	7c9e      	ldrb	r6, [r3, #18]
 8000bc0:	e7f1      	b.n	8000ba6 <ADC_Incremental_Write+0x9a>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bc2:	7d18      	ldrb	r0, [r3, #20]
 8000bc4:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bc6:	7d5e      	ldrb	r6, [r3, #21]
				SPIAmountofBytes++;
 8000bc8:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bca:	b2c0      	uxtb	r0, r0
 8000bcc:	542e      	strb	r6, [r5, r0]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bce:	7d9e      	ldrb	r6, [r3, #22]
 8000bd0:	e7e9      	b.n	8000ba6 <ADC_Incremental_Write+0x9a>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bd2:	7e18      	ldrb	r0, [r3, #24]
 8000bd4:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bd6:	7e5e      	ldrb	r6, [r3, #25]
				SPIAmountofBytes++;
 8000bd8:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bda:	b2c0      	uxtb	r0, r0
 8000bdc:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000bde:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000be0:	7e9e      	ldrb	r6, [r3, #26]
 8000be2:	b2c0      	uxtb	r0, r0
 8000be4:	e7e1      	b.n	8000baa <ADC_Incremental_Write+0x9e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000be6:	7f18      	ldrb	r0, [r3, #28]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000be8:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bea:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bec:	7f58      	ldrb	r0, [r3, #29]
 8000bee:	55a8      	strb	r0, [r5, r6]
				SPIAmountofBytes++;
 8000bf0:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bf2:	7f9e      	ldrb	r6, [r3, #30]
 8000bf4:	b2c0      	uxtb	r0, r0
 8000bf6:	e7d8      	b.n	8000baa <ADC_Incremental_Write+0x9e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bf8:	1c58      	adds	r0, r3, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000bfa:	7fc0      	ldrb	r0, [r0, #31]
 8000bfc:	e7bd      	b.n	8000b7a <ADC_Incremental_Write+0x6e>
 8000bfe:	1c98      	adds	r0, r3, #2
 8000c00:	e7fb      	b.n	8000bfa <ADC_Incremental_Write+0xee>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000c02:	1cd8      	adds	r0, r3, #3
 8000c04:	7fc0      	ldrb	r0, [r0, #31]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000c06:	1d1e      	adds	r6, r3, #4
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000c08:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000c0a:	7ff6      	ldrb	r6, [r6, #31]
				SPIAmountofBytes++;
 8000c0c:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000c0e:	b2c0      	uxtb	r0, r0
 8000c10:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000c12:	3402      	adds	r4, #2
 8000c14:	e7cb      	b.n	8000bae <ADC_Incremental_Write+0xa2>
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	2000004c 	.word	0x2000004c
 8000c1c:	2000004d 	.word	0x2000004d
 8000c20:	20000148 	.word	0x20000148

08000c24 <ADC_Init>:
	pADC->RESERVED1 = 0x900000;
 8000c24:	2390      	movs	r3, #144	@ 0x90
	pADC->RESERVED2 = 0x50;
 8000c26:	2250      	movs	r2, #80	@ 0x50
	pADC->RESERVED1 = 0x900000;
 8000c28:	041b      	lsls	r3, r3, #16
{
 8000c2a:	b510      	push	{r4, lr}
	pADC->RESERVED1 = 0x900000;
 8000c2c:	61c3      	str	r3, [r0, #28]
	pADC->RESERVED2 = 0x50;
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	77da      	strb	r2, [r3, #31]
	pADC->RESERVED3 = 0x0009;
 8000c32:	2309      	movs	r3, #9
 8000c34:	8443      	strh	r3, [r0, #34]	@ 0x22
	pADC->SCAN.RESERVED = 0x00;
 8000c36:	7b03      	ldrb	r3, [r0, #12]
 8000c38:	3a40      	subs	r2, #64	@ 0x40
 8000c3a:	4393      	bics	r3, r2
 8000c3c:	7303      	strb	r3, [r0, #12]
	pADC->Config0.CONFIG0 = 0x03;
 8000c3e:	8882      	ldrh	r2, [r0, #4]
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <ADC_Init+0x3c>)
	ADC_Incremental_Write(pADC, CONFIG0_ADDRESS, INITIALIZATION_AMOUNT_OF_REGISTERS);
 8000c42:	2101      	movs	r1, #1
	pADC->Config0.CONFIG0 = 0x03;
 8000c44:	401a      	ands	r2, r3
 8000c46:	23c0      	movs	r3, #192	@ 0xc0
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	8083      	strh	r3, [r0, #4]
	pADC->Config2.RESERVED = 0x03;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	7982      	ldrb	r2, [r0, #6]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	7183      	strb	r3, [r0, #6]
	ADC_Incremental_Write(pADC, CONFIG0_ADDRESS, INITIALIZATION_AMOUNT_OF_REGISTERS);
 8000c54:	220d      	movs	r2, #13
 8000c56:	f7ff ff59 	bl	8000b0c <ADC_Incremental_Write>
}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	fffffc3f 	.word	0xfffffc3f

08000c64 <ADC_Start_Conversion>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- none
 */
void ADC_Start_Conversion(ADC_Handle_t *pADC)
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
	// Adding command, bits [5:0]
	FastCommandByte += FC_START_CONVERSION;

	//Start_SPI3_TransmitReceive(&FastCommandByte, SPIDUMMYData, 1);
	// Transfer this via SPI
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000c66:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += FC_START_CONVERSION;
 8000c68:	2368      	movs	r3, #104	@ 0x68
 8000c6a:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <ADC_Start_Conversion+0x30>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000c6c:	05ed      	lsls	r5, r5, #23
 8000c6e:	0028      	movs	r0, r5
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
	FastCommandByte += FC_START_CONVERSION;
 8000c74:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000c76:	f000 fd45 	bl	8001704 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <ADC_Start_Conversion+0x34>)
 8000c82:	f001 fc6d 	bl	8002560 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_IT(&SPI, &FastCommandByte, 1);
	// HAL_SPI_Transmit_DMA(&SPI, &FastCommandByte, 1);
	//__HAL_DMA_DISABLE_IT(&hdma_spi3_tx, DMA_IT_HT);
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000c86:	0028      	movs	r0, r5
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	f000 fd3a 	bl	8001704 <HAL_GPIO_WritePin>
}
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	2000004c 	.word	0x2000004c
 8000c98:	20000148 	.word	0x20000148

08000c9c <ADC_Full_Reset>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- none
 */
void ADC_Full_Reset(ADC_Handle_t *pADC)
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}

	// Adding command, bits [5:0]
	FastCommandByte += FC_DEVICE_FULL_RESET;

	// Transfer this via SPI
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000c9e:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += FC_DEVICE_FULL_RESET;
 8000ca0:	2378      	movs	r3, #120	@ 0x78
 8000ca2:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <ADC_Full_Reset+0x30>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000ca4:	05ed      	lsls	r5, r5, #23
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
	FastCommandByte += FC_DEVICE_FULL_RESET;
 8000cac:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000cae:	f000 fd29 	bl	8001704 <HAL_GPIO_WritePin>
	//Start_SPI_Transmit(&FastCommandByte, 1);
	HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	0021      	movs	r1, r4
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <ADC_Full_Reset+0x34>)
 8000cba:	f001 fc51 	bl	8002560 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	f000 fd1e 	bl	8001704 <HAL_GPIO_WritePin>
}
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	2000004c 	.word	0x2000004c
 8000cd0:	20000148 	.word	0x20000148

08000cd4 <ADC_Proccess_Data>:




void ADC_Proccess_Data(void)
{
 8000cd4:	b510      	push	{r4, lr}
	// Check errors
	ADC_Check_Errors(ADCReceivedData[0]);
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <ADC_Proccess_Data+0x34>)

	// Check if new data available
	if (!(ADCReceivedData[0] & ADC_STATUS_DATA_READY_MASK))
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	0752      	lsls	r2, r2, #29
 8000cdc:	d412      	bmi.n	8000d04 <ADC_Proccess_Data+0x30>
	{
		//Transfer array of bytes to the 32 bit variable:
		ReadData = ADCReceivedData[1];
		ReadData <<= 8;
		ReadData += ADCReceivedData[2];
 8000cde:	7898      	ldrb	r0, [r3, #2]
 8000ce0:	785a      	ldrb	r2, [r3, #1]
 8000ce2:	0200      	lsls	r0, r0, #8
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <ADC_Proccess_Data+0x38>)
 8000ce6:	4310      	orrs	r0, r2
 8000ce8:	ba42      	rev16	r2, r0
 8000cea:	801a      	strh	r2, [r3, #0]
 8000cec:	bac0      	revsh	r0, r0

		// Calculating real Voltage
		Voltage =  VREF * ReadData / 32768;
 8000cee:	f7ff fea3 	bl	8000a38 <__aeabi_i2f>
 8000cf2:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <ADC_Proccess_Data+0x3c>)
 8000cf4:	f7ff fbbe 	bl	8000474 <__aeabi_fmul>
 8000cf8:	21e0      	movs	r1, #224	@ 0xe0
 8000cfa:	0589      	lsls	r1, r1, #22
 8000cfc:	f7ff fbba 	bl	8000474 <__aeabi_fmul>
 8000d00:	4c04      	ldr	r4, [pc, #16]	@ (8000d14 <ADC_Proccess_Data+0x40>)
 8000d02:	6020      	str	r0, [r4, #0]
	{
		// if no new data available, just return previous value
	}
	// Check if new data available to read from ADC:

}
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	2000002e 	.word	0x2000002e
 8000d0c:	2000002c 	.word	0x2000002c
 8000d10:	40400000 	.word	0x40400000
 8000d14:	20000088 	.word	0x20000088

08000d18 <ADC_Get_Measured_DATA>:
{
 8000d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000d1a:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += COMMAND_STATIC_READ;
 8000d1c:	2341      	movs	r3, #65	@ 0x41
 8000d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8000d50 <ADC_Get_Measured_DATA+0x38>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000d20:	05ed      	lsls	r5, r5, #23
 8000d22:	0028      	movs	r0, r5
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
	FastCommandByte += COMMAND_STATIC_READ;
 8000d28:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000d2a:	f000 fceb 	bl	8001704 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&SPI, &FastCommandByte, ADCReceivedData, 3, 10);
 8000d2e:	230a      	movs	r3, #10
 8000d30:	0021      	movs	r1, r4
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <ADC_Get_Measured_DATA+0x3c>)
 8000d36:	3b07      	subs	r3, #7
 8000d38:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <ADC_Get_Measured_DATA+0x40>)
 8000d3a:	f001 fcd3 	bl	80026e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000d3e:	0028      	movs	r0, r5
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	f000 fcde 	bl	8001704 <HAL_GPIO_WritePin>
	ADC_Proccess_Data();
 8000d48:	f7ff ffc4 	bl	8000cd4 <ADC_Proccess_Data>
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000d50:	2000004c 	.word	0x2000004c
 8000d54:	2000002e 	.word	0x2000002e
 8000d58:	20000148 	.word	0x20000148

08000d5c <Expander_Init>:
 * @return				- none
 */
void Expander_Init(Expander_Handle_t *pExpander)
{
	//temporary variable to create an I2C message
	uint8_t temp[2] = {0};
 8000d5c:	2300      	movs	r3, #0
{
 8000d5e:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Reset Output register
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
	temp[1] = 0;
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d60:	270a      	movs	r7, #10
{
 8000d62:	b085      	sub	sp, #20
	uint8_t temp[2] = {0};
 8000d64:	ac03      	add	r4, sp, #12
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d66:	4e11      	ldr	r6, [pc, #68]	@ (8000dac <Expander_Init+0x50>)
	uint8_t temp[2] = {0};
 8000d68:	8023      	strh	r3, [r4, #0]
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000d6a:	3301      	adds	r3, #1
{
 8000d6c:	0005      	movs	r5, r0
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d6e:	7801      	ldrb	r1, [r0, #0]
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000d70:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d72:	0022      	movs	r2, r4
 8000d74:	0030      	movs	r0, r6
 8000d76:	9700      	str	r7, [sp, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f000 fe65 	bl	8001a48 <HAL_I2C_Master_Transmit>

	// Sending configuration register to the Device
	temp[0] = COMMAND_CONFIGURATION_REGISTER;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	7023      	strb	r3, [r4, #0]
	temp[1] = pExpander->ConfigReg;
 8000d82:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d84:	7829      	ldrb	r1, [r5, #0]
	temp[1] = pExpander->ConfigReg;
 8000d86:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d88:	0022      	movs	r2, r4
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	0030      	movs	r0, r6
 8000d8e:	9700      	str	r7, [sp, #0]
 8000d90:	f000 fe5a 	bl	8001a48 <HAL_I2C_Master_Transmit>

	// Sending polarity register to the Device
	temp[0] = COMMAND_POLARITY_INVERSION_REGISTER;
 8000d94:	2302      	movs	r3, #2
 8000d96:	7023      	strb	r3, [r4, #0]
	temp[1] = pExpander->PolarityPortReg;
 8000d98:	78ea      	ldrb	r2, [r5, #3]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d9a:	7829      	ldrb	r1, [r5, #0]
	temp[1] = pExpander->PolarityPortReg;
 8000d9c:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000d9e:	0030      	movs	r0, r6
 8000da0:	0022      	movs	r2, r4
 8000da2:	9700      	str	r7, [sp, #0]
 8000da4:	f000 fe50 	bl	8001a48 <HAL_I2C_Master_Transmit>



}
 8000da8:	b005      	add	sp, #20
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dac:	200001ac 	.word	0x200001ac

08000db0 <Expander_Write_Single_Bit>:

 *
 * @return				- Error if the pin is configure as an input and user try to assign value to this pin
 */
DeviceState Expander_Write_Single_Bit(Expander_Handle_t *pExpander, uint8_t BitNumber, PinState State)
{
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Before writing to the GPIO pin,
	// we need to make sure that this particular bin was configure as an output
	if (!((pExpander->ConfigReg) & (1 << BitNumber)))
 8000db2:	7903      	ldrb	r3, [r0, #4]
 8000db4:	2501      	movs	r5, #1
 8000db6:	410b      	asrs	r3, r1
{
 8000db8:	0004      	movs	r4, r0
 8000dba:	0016      	movs	r6, r2
			return DEVICE_OK;
		}
	}
	else
	{
		return DEVICE_ERROR;
 8000dbc:	0028      	movs	r0, r5
{
 8000dbe:	b085      	sub	sp, #20
	if (!((pExpander->ConfigReg) & (1 << BitNumber)))
 8000dc0:	422b      	tst	r3, r5
 8000dc2:	d112      	bne.n	8000dea <Expander_Write_Single_Bit+0x3a>
			pExpander->OutputPortReg |= 1 << BitNumber;
 8000dc4:	002f      	movs	r7, r5
 8000dc6:	78a3      	ldrb	r3, [r4, #2]
 8000dc8:	408f      	lsls	r7, r1
 8000dca:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <Expander_Write_Single_Bit+0x48>)
			HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000dcc:	7821      	ldrb	r1, [r4, #0]
 8000dce:	aa03      	add	r2, sp, #12
		if (State == PIN_SET)
 8000dd0:	42ae      	cmp	r6, r5
 8000dd2:	d10c      	bne.n	8000dee <Expander_Write_Single_Bit+0x3e>
			pExpander->OutputPortReg |= 1 << BitNumber;
 8000dd4:	433b      	orrs	r3, r7
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	70a3      	strb	r3, [r4, #2]
			temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000dda:	7016      	strb	r6, [r2, #0]
			temp[1] = pExpander->OutputPortReg;
 8000ddc:	7053      	strb	r3, [r2, #1]
			HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000dde:	230a      	movs	r3, #10
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	3b08      	subs	r3, #8
 8000de4:	f000 fe30 	bl	8001a48 <HAL_I2C_Master_Transmit>
			return DEVICE_OK;
 8000de8:	2000      	movs	r0, #0
	}

}
 8000dea:	b005      	add	sp, #20
 8000dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pExpander->OutputPortReg &=~(1 << BitNumber);
 8000dee:	43bb      	bics	r3, r7
 8000df0:	70a3      	strb	r3, [r4, #2]
			temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000df2:	7015      	strb	r5, [r2, #0]
 8000df4:	e7f2      	b.n	8000ddc <Expander_Write_Single_Bit+0x2c>
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	200001ac 	.word	0x200001ac

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfe:	2610      	movs	r6, #16
{
 8000e00:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	222c      	movs	r2, #44	@ 0x2c
 8000e04:	2100      	movs	r1, #0
 8000e06:	a809      	add	r0, sp, #36	@ 0x24
 8000e08:	f002 f800 	bl	8002e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	0032      	movs	r2, r6
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4668      	mov	r0, sp
 8000e12:	f001 fffb 	bl	8002e0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e16:	0032      	movs	r2, r6
 8000e18:	2100      	movs	r1, #0
 8000e1a:	a804      	add	r0, sp, #16
 8000e1c:	f001 fff6 	bl	8002e0c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e20:	23a0      	movs	r3, #160	@ 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e22:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e26:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	950b      	str	r5, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2e:	960c      	str	r6, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e32:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f000 fef2 	bl	8001c1c <HAL_RCC_OscConfig>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e46:	0029      	movs	r1, r5
 8000e48:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e4e:	f001 f909 	bl	8002064 <HAL_RCC_ClockConfig>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x5e>
 8000e56:	b672      	cpsid	i
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <SystemClock_Config+0x5c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e5a:	2321      	movs	r3, #33	@ 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e5c:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e5e:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e62:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f001 f992 	bl	800218c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x74>
 8000e6c:	b672      	cpsid	i
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <SystemClock_Config+0x72>
}
 8000e70:	b014      	add	sp, #80	@ 0x50
 8000e72:	bd70      	pop	{r4, r5, r6, pc}

08000e74 <main>:
{
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	b08d      	sub	sp, #52	@ 0x34
  HAL_Init();
 8000e78:	f000 fae6 	bl	8001448 <HAL_Init>
  SystemClock_Config();
 8000e7c:	f7ff ffbe 	bl	8000dfc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	2214      	movs	r2, #20
 8000e82:	2100      	movs	r1, #0
 8000e84:	a807      	add	r0, sp, #28
 8000e86:	f001 ffc1 	bl	8002e0c <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	2180      	movs	r1, #128	@ 0x80
 8000e8c:	4bb8      	ldr	r3, [pc, #736]	@ (8001170 <main+0x2fc>)
 8000e8e:	03c9      	lsls	r1, r1, #15
 8000e90:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 8000e92:	48b8      	ldr	r0, [pc, #736]	@ (8001174 <main+0x300>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e94:	430a      	orrs	r2, r1
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea0:	9204      	str	r2, [sp, #16]
 8000ea2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	0289      	lsls	r1, r1, #10
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	9205      	str	r2, [sp, #20]
 8000eb6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	02c9      	lsls	r1, r1, #11
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 8000ec8:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 8000ecc:	f000 fc1a 	bl	8001704 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FAN_3_EN_GPIO_Port, FAN_3_EN_Pin, GPIO_PIN_RESET);
 8000ed0:	2090      	movs	r0, #144	@ 0x90
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	05c0      	lsls	r0, r0, #23
 8000ed8:	f000 fc14 	bl	8001704 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000edc:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = FAN_1_EN_Pin|FAN_2_EN_Pin;
 8000ede:	2703      	movs	r7, #3
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	05c0      	lsls	r0, r0, #23
 8000ee6:	f000 fc0d 	bl	8001704 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eea:	48a2      	ldr	r0, [pc, #648]	@ (8001174 <main+0x300>)
 8000eec:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eee:	2484      	movs	r4, #132	@ 0x84
  GPIO_InitStruct.Pin = FAN_1_EN_Pin|FAN_2_EN_Pin;
 8000ef0:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	9609      	str	r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ef8:	f000 fb4c 	bl	8001594 <HAL_GPIO_Init>
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8000efc:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efe:	03a4      	lsls	r4, r4, #14
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8000f00:	a907      	add	r1, sp, #28
 8000f02:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f04:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = IOEXPANDER_INT_L_Pin;
 8000f06:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f000 fb43 	bl	8001594 <HAL_GPIO_Init>
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = FAN_3_EN_Pin;
 8000f10:	2302      	movs	r3, #2
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 8000f12:	a907      	add	r1, sp, #28
 8000f14:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = FAN_3_EN_Pin;
 8000f16:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	9609      	str	r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f000 fb39 	bl	8001594 <HAL_GPIO_Init>
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000f22:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 8000f24:	2310      	movs	r3, #16
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	a907      	add	r1, sp, #28
 8000f28:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 8000f2a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f30:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f000 fb2f 	bl	8001594 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 8000f36:	2302      	movs	r3, #2
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f38:	488f      	ldr	r0, [pc, #572]	@ (8001178 <main+0x304>)
 8000f3a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 8000f3c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f40:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f000 fb27 	bl	8001594 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000f46:	0031      	movs	r1, r6
 8000f48:	0032      	movs	r2, r6
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f000 fab0 	bl	80014b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f50:	2005      	movs	r0, #5
 8000f52:	f000 fad7 	bl	8001504 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8000f56:	4c89      	ldr	r4, [pc, #548]	@ (800117c <main+0x308>)
 8000f58:	4b89      	ldr	r3, [pc, #548]	@ (8001180 <main+0x30c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5a:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 8000f5c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f5e:	4b89      	ldr	r3, [pc, #548]	@ (8001184 <main+0x310>)
  hi2c1.Init.OwnAddress1 = 0;
 8000f60:	60a6      	str	r6, [r4, #8]
  hi2c1.Init.Timing = 0x2000090E;
 8000f62:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f64:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f66:	6126      	str	r6, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f68:	6166      	str	r6, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f6a:	61a6      	str	r6, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6c:	61e6      	str	r6, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6e:	6226      	str	r6, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f70:	f000 fd0c 	bl	800198c <HAL_I2C_Init>
 8000f74:	0001      	movs	r1, r0
 8000f76:	42b0      	cmp	r0, r6
 8000f78:	d001      	beq.n	8000f7e <main+0x10a>
 8000f7a:	b672      	cpsid	i
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <main+0x108>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7e:	0020      	movs	r0, r4
 8000f80:	f000 fe02 	bl	8001b88 <HAL_I2CEx_ConfigAnalogFilter>
 8000f84:	1e01      	subs	r1, r0, #0
 8000f86:	d001      	beq.n	8000f8c <main+0x118>
 8000f88:	b672      	cpsid	i
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <main+0x116>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f8c:	0020      	movs	r0, r4
 8000f8e:	f000 fe21 	bl	8001bd4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <main+0x126>
 8000f96:	b672      	cpsid	i
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <main+0x124>
  hspi1.Instance = SPI1;
 8000f9a:	487b      	ldr	r0, [pc, #492]	@ (8001188 <main+0x314>)
 8000f9c:	4a7b      	ldr	r2, [pc, #492]	@ (800118c <main+0x318>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 8000fa0:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	2282      	movs	r2, #130	@ 0x82
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	22e0      	movs	r2, #224	@ 0xe0
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fae:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb2:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb6:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fba:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fbc:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fc2:	3ae9      	subs	r2, #233	@ 0xe9
 8000fc4:	3aff      	subs	r2, #255	@ 0xff
 8000fc6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000fc8:	3a11      	subs	r2, #17
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fca:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.CRCPolynomial = 7;
 8000fcc:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fce:	f001 fa4f 	bl	8002470 <HAL_SPI_Init>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <main+0x166>
 8000fd6:	b672      	cpsid	i
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <main+0x164>
  huart1.Instance = USART1;
 8000fda:	486d      	ldr	r0, [pc, #436]	@ (8001190 <main+0x31c>)
 8000fdc:	4a6d      	ldr	r2, [pc, #436]	@ (8001194 <main+0x320>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 8000fe0:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8000fe2:	2296      	movs	r2, #150	@ 0x96
 8000fe4:	0212      	lsls	r2, r2, #8
 8000fe6:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fee:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff8:	f001 fed6 	bl	8002da8 <HAL_UART_Init>
 8000ffc:	1e07      	subs	r7, r0, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x190>
 8001000:	b672      	cpsid	i
  while (1)
 8001002:	e7fe      	b.n	8001002 <main+0x18e>
  HAL_Delay(1000);
 8001004:	20fa      	movs	r0, #250	@ 0xfa
 8001006:	0080      	lsls	r0, r0, #2
 8001008:	f000 fa40 	bl	800148c <HAL_Delay>
	MyExpander.ExpanderAddress = 0x40;			//0b1000000
 800100c:	2340      	movs	r3, #64	@ 0x40
 800100e:	4e62      	ldr	r6, [pc, #392]	@ (8001198 <main+0x324>)
	Expander_Init(&MyExpander);
 8001010:	0030      	movs	r0, r6
	MyExpander.ExpanderAddress = 0x40;			//0b1000000
 8001012:	7033      	strb	r3, [r6, #0]
	MyExpander.ConfigReg = 0xF0;				//0b11110000
 8001014:	33b0      	adds	r3, #176	@ 0xb0
 8001016:	7133      	strb	r3, [r6, #4]
	MyExpander.PolarityPortReg = 0xF0;			//0b11110000
 8001018:	70f3      	strb	r3, [r6, #3]
	Expander_Init(&MyExpander);
 800101a:	f7ff fe9f 	bl	8000d5c <Expander_Init>
	Expander_Write_Single_Bit(&MyExpander, LED_BLUE, PIN_RESET);
 800101e:	003a      	movs	r2, r7
 8001020:	0039      	movs	r1, r7
 8001022:	0030      	movs	r0, r6
 8001024:	f7ff fec4 	bl	8000db0 <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_RED, PIN_RESET);
 8001028:	003a      	movs	r2, r7
 800102a:	0029      	movs	r1, r5
 800102c:	0030      	movs	r0, r6
 800102e:	f7ff febf 	bl	8000db0 <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_WHITE, PIN_RESET);
 8001032:	003a      	movs	r2, r7
 8001034:	2102      	movs	r1, #2
 8001036:	0030      	movs	r0, r6
 8001038:	f7ff feba 	bl	8000db0 <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_AMBER, PIN_RESET);
 800103c:	003a      	movs	r2, r7
 800103e:	2103      	movs	r1, #3
 8001040:	0030      	movs	r0, r6
 8001042:	f7ff feb5 	bl	8000db0 <Expander_Write_Single_Bit>
	MyDAC.DACAddress = 0x63;
 8001046:	4b55      	ldr	r3, [pc, #340]	@ (800119c <main+0x328>)
 8001048:	4a55      	ldr	r2, [pc, #340]	@ (80011a0 <main+0x32c>)
	if (HAL_I2C_Master_Transmit(&I2C, MyDAC.DACAddress<<1, &MyDAC.Command, 3, 10) == HAL_OK)
 800104a:	21c6      	movs	r1, #198	@ 0xc6
	MyDAC.DACAddress = 0x63;
 800104c:	801a      	strh	r2, [r3, #0]
	MyDAC.DACValue = 0x0080;    // 0x80 - 1.5V
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	805a      	strh	r2, [r3, #2]
	if (HAL_I2C_Master_Transmit(&I2C, MyDAC.DACAddress<<1, &MyDAC.Command, 3, 10) == HAL_OK)
 8001052:	230a      	movs	r3, #10
 8001054:	4a53      	ldr	r2, [pc, #332]	@ (80011a4 <main+0x330>)
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	0020      	movs	r0, r4
 800105a:	3b07      	subs	r3, #7
 800105c:	f000 fcf4 	bl	8001a48 <HAL_I2C_Master_Transmit>
		Expander_Write_Single_Bit(&MyExpander, LED_WHITE, PIN_SET);
 8001060:	002a      	movs	r2, r5
 8001062:	2102      	movs	r1, #2
	if (HAL_I2C_Master_Transmit(&I2C, MyDAC.DACAddress<<1, &MyDAC.Command, 3, 10) == HAL_OK)
 8001064:	2800      	cmp	r0, #0
 8001066:	d000      	beq.n	800106a <main+0x1f6>
		Expander_Write_Single_Bit(&MyExpander, LED_RED, PIN_SET);
 8001068:	0029      	movs	r1, r5
 800106a:	0030      	movs	r0, r6
 800106c:	f7ff fea0 	bl	8000db0 <Expander_Write_Single_Bit>
	MyADC.Config0.ADCMode = ADC_STANDBY_MODE;
 8001070:	23c0      	movs	r3, #192	@ 0xc0
 8001072:	4c4d      	ldr	r4, [pc, #308]	@ (80011a8 <main+0x334>)
 8001074:	6862      	ldr	r2, [r4, #4]
	ADC_Full_Reset(&MyADC);
 8001076:	0020      	movs	r0, r4
	MyADC.Config0.ADCMode = ADC_STANDBY_MODE;
 8001078:	401a      	ands	r2, r3
 800107a:	4b4c      	ldr	r3, [pc, #304]	@ (80011ac <main+0x338>)
 800107c:	4313      	orrs	r3, r2
 800107e:	6063      	str	r3, [r4, #4]
	MyADC.IRQ.EN_STP = CONVERSATION_START_INTERRUPT_DISABLED;
 8001080:	23f0      	movs	r3, #240	@ 0xf0
 8001082:	8922      	ldrh	r2, [r4, #8]
 8001084:	401a      	ands	r2, r3
 8001086:	3316      	adds	r3, #22
 8001088:	4313      	orrs	r3, r2
	MyADC.LOCK = 0xA5;
 800108a:	22a5      	movs	r2, #165	@ 0xa5
	MyADC.IRQ.EN_STP = CONVERSATION_START_INTERRUPT_DISABLED;
 800108c:	8123      	strh	r3, [r4, #8]
	MyADC.LOCK = 0xA5;
 800108e:	1ca3      	adds	r3, r4, #2
 8001090:	77da      	strb	r2, [r3, #31]
	ADC_Full_Reset(&MyADC);
 8001092:	f7ff fe03 	bl	8000c9c <ADC_Full_Reset>
	ADC_Init(&MyADC);
 8001096:	0020      	movs	r0, r4
 8001098:	f7ff fdc4 	bl	8000c24 <ADC_Init>
	  MyADC.MUX.MUX_VinMinus = MUX_CH1;
 800109c:	2301      	movs	r3, #1
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 800109e:	2106      	movs	r1, #6
 80010a0:	001a      	movs	r2, r3
 80010a2:	0020      	movs	r0, r4
	  MyADC.MUX.MUX_VinMinus = MUX_CH1;
 80010a4:	7263      	strb	r3, [r4, #9]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80010a6:	f7ff fd31 	bl	8000b0c <ADC_Incremental_Write>
	  ADC_Start_Conversion(&MyADC);
 80010aa:	0020      	movs	r0, r4
 80010ac:	f7ff fdda 	bl	8000c64 <ADC_Start_Conversion>
	  HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	@ 0x64
 80010b2:	f000 f9eb 	bl	800148c <HAL_Delay>
	  VoltageCh1 = Voltage;
 80010b6:	4e3e      	ldr	r6, [pc, #248]	@ (80011b0 <main+0x33c>)
 80010b8:	4d3e      	ldr	r5, [pc, #248]	@ (80011b4 <main+0x340>)
 80010ba:	6833      	ldr	r3, [r6, #0]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80010bc:	2201      	movs	r2, #1
	  VoltageCh1 = Voltage;
 80010be:	602b      	str	r3, [r5, #0]
	  MyADC.MUX.MUX_VinMinus = MUX_CH2;
 80010c0:	2312      	movs	r3, #18
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80010c2:	2106      	movs	r1, #6
 80010c4:	0020      	movs	r0, r4
	  MyADC.MUX.MUX_VinMinus = MUX_CH2;
 80010c6:	7263      	strb	r3, [r4, #9]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80010c8:	f7ff fd20 	bl	8000b0c <ADC_Incremental_Write>
	  ADC_Start_Conversion(&MyADC);
 80010cc:	0020      	movs	r0, r4
 80010ce:	f7ff fdc9 	bl	8000c64 <ADC_Start_Conversion>
	  HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f000 f9da 	bl	800148c <HAL_Delay>
	  VoltageCh2 = Voltage;
 80010d8:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <main+0x344>)
 80010da:	6830      	ldr	r0, [r6, #0]
	  ResistanceCh2 = ResistanceCh1*VoltageCh2/VoltageCh1;
 80010dc:	4937      	ldr	r1, [pc, #220]	@ (80011bc <main+0x348>)
	  VoltageCh2 = Voltage;
 80010de:	6018      	str	r0, [r3, #0]
	  ResistanceCh2 = ResistanceCh1*VoltageCh2/VoltageCh1;
 80010e0:	f7ff f9c8 	bl	8000474 <__aeabi_fmul>
 80010e4:	6829      	ldr	r1, [r5, #0]
 80010e6:	f7ff f8a5 	bl	8000234 <__aeabi_fdiv>
 80010ea:	4b35      	ldr	r3, [pc, #212]	@ (80011c0 <main+0x34c>)
		  Temperature = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 80010ec:	4933      	ldr	r1, [pc, #204]	@ (80011bc <main+0x348>)
	  ResistanceCh2 = ResistanceCh1*VoltageCh2/VoltageCh1;
 80010ee:	6018      	str	r0, [r3, #0]
		  Temperature = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 80010f0:	f7ff fafe 	bl	80006f0 <__aeabi_fsub>
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <main+0x350>)
 80010f6:	4931      	ldr	r1, [pc, #196]	@ (80011bc <main+0x348>)
 80010f8:	9003      	str	r0, [sp, #12]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f7ff f9ba 	bl	8000474 <__aeabi_fmul>
 8001100:	1c01      	adds	r1, r0, #0
 8001102:	9803      	ldr	r0, [sp, #12]
 8001104:	f7ff f896 	bl	8000234 <__aeabi_fdiv>
	  MyADC.MUX.MUX_VinMinus = MUX_CH3;
 8001108:	2323      	movs	r3, #35	@ 0x23
		  Temperature = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 800110a:	4f2f      	ldr	r7, [pc, #188]	@ (80011c8 <main+0x354>)
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	2106      	movs	r1, #6
		  Temperature = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 8001110:	6038      	str	r0, [r7, #0]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 8001112:	0020      	movs	r0, r4
	  MyADC.MUX.MUX_VinMinus = MUX_CH3;
 8001114:	7263      	strb	r3, [r4, #9]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 8001116:	f7ff fcf9 	bl	8000b0c <ADC_Incremental_Write>
	  ADC_Start_Conversion(&MyADC);
 800111a:	0020      	movs	r0, r4
 800111c:	f7ff fda2 	bl	8000c64 <ADC_Start_Conversion>
	  HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f000 f9b3 	bl	800148c <HAL_Delay>
	  VoltageCh3 = Voltage;
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <main+0x358>)
 8001128:	6830      	ldr	r0, [r6, #0]
	  ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 800112a:	4924      	ldr	r1, [pc, #144]	@ (80011bc <main+0x348>)
	  VoltageCh3 = Voltage;
 800112c:	6018      	str	r0, [r3, #0]
	  ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 800112e:	f7ff f9a1 	bl	8000474 <__aeabi_fmul>
 8001132:	6829      	ldr	r1, [r5, #0]
 8001134:	f7ff f87e 	bl	8000234 <__aeabi_fdiv>
	  MyADC.MUX.MUX_VinMinus = MUX_AGND;
 8001138:	2338      	movs	r3, #56	@ 0x38
	  ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 800113a:	4f25      	ldr	r7, [pc, #148]	@ (80011d0 <main+0x35c>)
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 800113c:	2201      	movs	r2, #1
 800113e:	2106      	movs	r1, #6
	  ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 8001140:	6038      	str	r0, [r7, #0]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 8001142:	0020      	movs	r0, r4
	  MyADC.MUX.MUX_VinMinus = MUX_AGND;
 8001144:	7263      	strb	r3, [r4, #9]
	  ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 8001146:	f7ff fce1 	bl	8000b0c <ADC_Incremental_Write>
	  ADC_Start_Conversion(&MyADC);
 800114a:	0020      	movs	r0, r4
 800114c:	f7ff fd8a 	bl	8000c64 <ADC_Start_Conversion>
	  HAL_Delay(100);
 8001150:	2064      	movs	r0, #100	@ 0x64
 8001152:	f000 f99b 	bl	800148c <HAL_Delay>
	  VoltageCh4 = Voltage;
 8001156:	6830      	ldr	r0, [r6, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <main+0x360>)
	  ResistanceCh4 = ResistanceCh1*VoltageCh4/VoltageCh1;
 800115a:	4918      	ldr	r1, [pc, #96]	@ (80011bc <main+0x348>)
	  VoltageCh4 = Voltage;
 800115c:	6018      	str	r0, [r3, #0]
	  ResistanceCh4 = ResistanceCh1*VoltageCh4/VoltageCh1;
 800115e:	f7ff f989 	bl	8000474 <__aeabi_fmul>
 8001162:	6829      	ldr	r1, [r5, #0]
 8001164:	f7ff f866 	bl	8000234 <__aeabi_fdiv>
 8001168:	4e1b      	ldr	r6, [pc, #108]	@ (80011d8 <main+0x364>)
 800116a:	6030      	str	r0, [r6, #0]
  while (1)
 800116c:	e796      	b.n	800109c <main+0x228>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	40021000 	.word	0x40021000
 8001174:	48001400 	.word	0x48001400
 8001178:	48000400 	.word	0x48000400
 800117c:	200001ac 	.word	0x200001ac
 8001180:	40005400 	.word	0x40005400
 8001184:	2000090e 	.word	0x2000090e
 8001188:	20000148 	.word	0x20000148
 800118c:	40013000 	.word	0x40013000
 8001190:	200000c0 	.word	0x200000c0
 8001194:	40013800 	.word	0x40013800
 8001198:	2000008c 	.word	0x2000008c
 800119c:	20000092 	.word	0x20000092
 80011a0:	00005963 	.word	0x00005963
 80011a4:	20000093 	.word	0x20000093
 80011a8:	20000098 	.word	0x20000098
 80011ac:	808b6802 	.word	0x808b6802
 80011b0:	20000088 	.word	0x20000088
 80011b4:	20000084 	.word	0x20000084
 80011b8:	20000080 	.word	0x20000080
 80011bc:	447a0000 	.word	0x447a0000
 80011c0:	20000074 	.word	0x20000074
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000068 	.word	0x20000068
 80011cc:	2000007c 	.word	0x2000007c
 80011d0:	20000070 	.word	0x20000070
 80011d4:	20000078 	.word	0x20000078
 80011d8:	2000006c 	.word	0x2000006c

080011dc <HAL_GPIO_EXTI_Callback>:
{
 80011dc:	b510      	push	{r4, lr}
	if (GPIO_Pin == IOEXPANDER_INT_L_Pin)
 80011de:	2801      	cmp	r0, #1
 80011e0:	d103      	bne.n	80011ea <HAL_GPIO_EXTI_Callback+0xe>
		ADC_Start_Conversion(&MyADC);
 80011e2:	4808      	ldr	r0, [pc, #32]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x28>)
 80011e4:	f7ff fd3e 	bl	8000c64 <ADC_Start_Conversion>
}
 80011e8:	bd10      	pop	{r4, pc}
	else if (GPIO_Pin == ADC_IRQ_Pin)
 80011ea:	2802      	cmp	r0, #2
 80011ec:	d1fc      	bne.n	80011e8 <HAL_GPIO_EXTI_Callback+0xc>
		Expander_Write_Single_Bit(&MyExpander, LED_AMBER, PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2103      	movs	r1, #3
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x2c>)
 80011f4:	f7ff fddc 	bl	8000db0 <Expander_Write_Single_Bit>
		ADC_Get_Measured_DATA(&MyADC);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x28>)
 80011fa:	f7ff fd8d 	bl	8000d18 <ADC_Get_Measured_DATA>
		ADC_Proccess_Data();
 80011fe:	f7ff fd69 	bl	8000cd4 <ADC_Proccess_Data>
}
 8001202:	e7f1      	b.n	80011e8 <HAL_GPIO_EXTI_Callback+0xc>
 8001204:	20000098 	.word	0x20000098
 8001208:	2000008c 	.word	0x2000008c

0800120c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	2101      	movs	r1, #1
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_MspInit+0x2c>)
{
 8001210:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	699a      	ldr	r2, [r3, #24]
 8001214:	430a      	orrs	r2, r1
 8001216:	619a      	str	r2, [r3, #24]
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	9200      	str	r2, [sp, #0]
 8001220:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	69da      	ldr	r2, [r3, #28]
 8001224:	0549      	lsls	r1, r1, #21
 8001226:	430a      	orrs	r2, r1
 8001228:	61da      	str	r2, [r3, #28]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	400b      	ands	r3, r1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	b002      	add	sp, #8
 8001234:	4770      	bx	lr
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b510      	push	{r4, lr}
 800123e:	0004      	movs	r4, r0
 8001240:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	2214      	movs	r2, #20
 8001244:	2100      	movs	r1, #0
 8001246:	a803      	add	r0, sp, #12
 8001248:	f001 fde0 	bl	8002e0c <memset>
  if(hi2c->Instance==I2C1)
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <HAL_I2C_MspInit+0x60>)
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d120      	bne.n	8001296 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	4c12      	ldr	r4, [pc, #72]	@ (80012a0 <HAL_I2C_MspInit+0x64>)
 8001258:	0292      	lsls	r2, r2, #10
 800125a:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4313      	orrs	r3, r2
 8001260:	6163      	str	r3, [r4, #20]
 8001262:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4013      	ands	r3, r2
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126c:	23c0      	movs	r3, #192	@ 0xc0
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001272:	2312      	movs	r3, #18
 8001274:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001276:	3b0f      	subs	r3, #15
 8001278:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800127c:	3301      	adds	r3, #1
 800127e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f000 f988 	bl	8001594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	69e3      	ldr	r3, [r4, #28]
 8001288:	0392      	lsls	r2, r2, #14
 800128a:	4313      	orrs	r3, r2
 800128c:	61e3      	str	r3, [r4, #28]
 800128e:	69e3      	ldr	r3, [r4, #28]
 8001290:	4013      	ands	r3, r2
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001296:	b008      	add	sp, #32
 8001298:	bd10      	pop	{r4, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	40005400 	.word	0x40005400
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b510      	push	{r4, lr}
 80012a6:	0004      	movs	r4, r0
 80012a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	2214      	movs	r2, #20
 80012ac:	2100      	movs	r1, #0
 80012ae:	a803      	add	r0, sp, #12
 80012b0:	f001 fdac 	bl	8002e0c <memset>
  if(hspi->Instance==SPI1)
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_SPI_MspInit+0x68>)
 80012b6:	6822      	ldr	r2, [r4, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d125      	bne.n	8001308 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_SPI_MspInit+0x6c>)
 80012c0:	0149      	lsls	r1, r1, #5
 80012c2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c6:	430a      	orrs	r2, r1
 80012c8:	619a      	str	r2, [r3, #24]
 80012ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d2:	9201      	str	r2, [sp, #4]
 80012d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	0289      	lsls	r1, r1, #10
 80012da:	430a      	orrs	r2, r1
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	400b      	ands	r3, r1
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23e0      	movs	r3, #224	@ 0xe0
 80012e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	3bde      	subs	r3, #222	@ 0xde
 80012ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	3301      	adds	r3, #1
 80012f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f000 f94e 	bl	8001594 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2019      	movs	r0, #25
 80012fc:	0011      	movs	r1, r2
 80012fe:	f000 f8d7 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001302:	2019      	movs	r0, #25
 8001304:	f000 f8fe 	bl	8001504 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001308:	b008      	add	sp, #32
 800130a:	bd10      	pop	{r4, pc}
 800130c:	40013000 	.word	0x40013000
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b510      	push	{r4, lr}
 8001316:	0004      	movs	r4, r0
 8001318:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	2214      	movs	r2, #20
 800131c:	2100      	movs	r1, #0
 800131e:	a803      	add	r0, sp, #12
 8001320:	f001 fd74 	bl	8002e0c <memset>
  if(huart->Instance==USART1)
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_UART_MspInit+0x5c>)
 8001326:	6822      	ldr	r2, [r4, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d11f      	bne.n	800136c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_UART_MspInit+0x60>)
 8001330:	01c9      	lsls	r1, r1, #7
 8001332:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8001336:	430a      	orrs	r2, r1
 8001338:	619a      	str	r2, [r3, #24]
 800133a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800133e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	0289      	lsls	r1, r1, #10
 800134a:	430a      	orrs	r2, r1
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	400b      	ands	r3, r1
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001356:	230c      	movs	r3, #12
 8001358:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	3b0a      	subs	r3, #10
 800135c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135e:	3301      	adds	r3, #1
 8001360:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001364:	3b02      	subs	r3, #2
 8001366:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f000 f914 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800136c:	b008      	add	sp, #32
 800136e:	bd10      	pop	{r4, pc}
 8001370:	40013800 	.word	0x40013800
 8001374:	40021000 	.word	0x40021000

08001378 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler>

0800137a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler>

0800137c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001382:	f000 f871 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001386:	bd10      	pop	{r4, pc}

08001388 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001388:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOEXPANDER_INT_L_Pin);
 800138a:	2001      	movs	r0, #1
 800138c:	f000 f9c0 	bl	8001710 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADC_IRQ_Pin);
 8001390:	2002      	movs	r0, #2
 8001392:	f000 f9bd 	bl	8001710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001398:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800139a:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <SPI1_IRQHandler+0xc>)
 800139c:	f001 faae 	bl	80028fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	20000148 	.word	0x20000148

080013a8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013a8:	4770      	bx	lr
	...

080013ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b0:	f7ff fffa 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	@ (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	@ (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013da:	f001 fd1f 	bl	8002e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7ff fd49 	bl	8000e74 <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   r0, =_estack
 80013e4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013f0:	08002f3c 	.word	0x08002f3c
  ldr r2, =_sbss
 80013f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013f8:	20000204 	.word	0x20000204

080013fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_IRQHandler>
	...

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	20fa      	movs	r0, #250	@ 0xfa
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_InitTick+0x3c>)
 8001408:	0080      	lsls	r0, r0, #2
 800140a:	7819      	ldrb	r1, [r3, #0]
 800140c:	f7fe fe86 	bl	800011c <__udivsi3>
 8001410:	4c0b      	ldr	r4, [pc, #44]	@ (8001440 <HAL_InitTick+0x40>)
 8001412:	0001      	movs	r1, r0
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	f7fe fe81 	bl	800011c <__udivsi3>
 800141a:	f000 f87f 	bl	800151c <HAL_SYSTICK_Config>
 800141e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001420:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001422:	2c00      	cmp	r4, #0
 8001424:	d109      	bne.n	800143a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	2d03      	cmp	r5, #3
 8001428:	d807      	bhi.n	800143a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142a:	3802      	subs	r0, #2
 800142c:	0022      	movs	r2, r4
 800142e:	0029      	movs	r1, r5
 8001430:	f000 f83e 	bl	80014b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	0020      	movs	r0, r4
 8001436:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_InitTick+0x44>)
 8001438:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	20000008 	.word	0x20000008
 8001440:	20000004 	.word	0x20000004
 8001444:	2000000c 	.word	0x2000000c

08001448 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	2310      	movs	r3, #16
 800144a:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <HAL_Init+0x1c>)
{
 800144c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001450:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001452:	430b      	orrs	r3, r1
 8001454:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	f7ff ffd3 	bl	8001400 <HAL_InitTick>
  HAL_MspInit();
 800145a:	f7ff fed7 	bl	800120c <HAL_MspInit>
}
 800145e:	2000      	movs	r0, #0
 8001460:	bd10      	pop	{r4, pc}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001468:	4a03      	ldr	r2, [pc, #12]	@ (8001478 <HAL_IncTick+0x10>)
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <HAL_IncTick+0x14>)
 800146c:	6811      	ldr	r1, [r2, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	185b      	adds	r3, r3, r1
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	4770      	bx	lr
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	20000200 	.word	0x20000200
 800147c:	20000008 	.word	0x20000008

08001480 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001480:	4b01      	ldr	r3, [pc, #4]	@ (8001488 <HAL_GetTick+0x8>)
 8001482:	6818      	ldr	r0, [r3, #0]
}
 8001484:	4770      	bx	lr
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	20000200 	.word	0x20000200

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff fff6 	bl	8001480 <HAL_GetTick>
 8001494:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	1c63      	adds	r3, r4, #1
 8001498:	d002      	beq.n	80014a0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <HAL_Delay+0x20>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	1b40      	subs	r0, r0, r5
 80014a6:	42a0      	cmp	r0, r4
 80014a8:	d3fa      	bcc.n	80014a0 <HAL_Delay+0x14>
  {
  }
}
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b2:	24ff      	movs	r4, #255	@ 0xff
 80014b4:	2203      	movs	r2, #3
 80014b6:	000b      	movs	r3, r1
 80014b8:	0021      	movs	r1, r4
 80014ba:	4002      	ands	r2, r0
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c0:	019b      	lsls	r3, r3, #6
 80014c2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80014c8:	2800      	cmp	r0, #0
 80014ca:	db0a      	blt.n	80014e2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014cc:	24c0      	movs	r4, #192	@ 0xc0
 80014ce:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_NVIC_SetPriority+0x4c>)
 80014d0:	0880      	lsrs	r0, r0, #2
 80014d2:	0080      	lsls	r0, r0, #2
 80014d4:	1880      	adds	r0, r0, r2
 80014d6:	00a4      	lsls	r4, r4, #2
 80014d8:	5902      	ldr	r2, [r0, r4]
 80014da:	400a      	ands	r2, r1
 80014dc:	4313      	orrs	r3, r2
 80014de:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80014e0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e2:	220f      	movs	r2, #15
 80014e4:	4010      	ands	r0, r2
 80014e6:	3808      	subs	r0, #8
 80014e8:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <HAL_NVIC_SetPriority+0x50>)
 80014ea:	0880      	lsrs	r0, r0, #2
 80014ec:	0080      	lsls	r0, r0, #2
 80014ee:	1880      	adds	r0, r0, r2
 80014f0:	69c2      	ldr	r2, [r0, #28]
 80014f2:	4011      	ands	r1, r2
 80014f4:	4319      	orrs	r1, r3
 80014f6:	61c1      	str	r1, [r0, #28]
 80014f8:	e7f2      	b.n	80014e0 <HAL_NVIC_SetPriority+0x30>
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001504:	2800      	cmp	r0, #0
 8001506:	db05      	blt.n	8001514 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001508:	231f      	movs	r3, #31
 800150a:	4018      	ands	r0, r3
 800150c:	3b1e      	subs	r3, #30
 800150e:	4083      	lsls	r3, r0
 8001510:	4a01      	ldr	r2, [pc, #4]	@ (8001518 <HAL_NVIC_EnableIRQ+0x14>)
 8001512:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001514:	4770      	bx	lr
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	e000e100 	.word	0xe000e100

0800151c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	1e43      	subs	r3, r0, #1
 8001520:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	4293      	cmp	r3, r2
 8001526:	d20d      	bcs.n	8001544 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001528:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001530:	6a03      	ldr	r3, [r0, #32]
 8001532:	0609      	lsls	r1, r1, #24
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	430b      	orrs	r3, r1
 800153a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001544:	4770      	bx	lr
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	e000e010 	.word	0xe000e010
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001552:	1c84      	adds	r4, r0, #2
 8001554:	7fe3      	ldrb	r3, [r4, #31]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d003      	beq.n	8001562 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	2304      	movs	r3, #4
 800155c:	6383      	str	r3, [r0, #56]	@ 0x38

    status = HAL_ERROR;
 800155e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001560:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001562:	210e      	movs	r1, #14
 8001564:	6803      	ldr	r3, [r0, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800156c:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800156e:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	4391      	bics	r1, r2
 8001574:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001576:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001578:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800157a:	408d      	lsls	r5, r1
 800157c:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001580:	1883      	adds	r3, r0, r2
 8001582:	2200      	movs	r2, #0
 8001584:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001586:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001588:	4293      	cmp	r3, r2
 800158a:	d000      	beq.n	800158e <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 800158c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2000      	movs	r0, #0
 8001590:	e7e6      	b.n	8001560 <HAL_DMA_Abort_IT+0x10>
	...

08001594 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001594:	2300      	movs	r3, #0
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	680a      	ldr	r2, [r1, #0]
 800159c:	0014      	movs	r4, r2
 800159e:	40dc      	lsrs	r4, r3
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80015a2:	b007      	add	sp, #28
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a6:	2501      	movs	r5, #1
 80015a8:	0014      	movs	r4, r2
 80015aa:	409d      	lsls	r5, r3
 80015ac:	402c      	ands	r4, r5
 80015ae:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80015b0:	422a      	tst	r2, r5
 80015b2:	d100      	bne.n	80015b6 <HAL_GPIO_Init+0x22>
 80015b4:	e098      	b.n	80016e8 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b6:	684a      	ldr	r2, [r1, #4]
 80015b8:	005f      	lsls	r7, r3, #1
 80015ba:	4694      	mov	ip, r2
 80015bc:	2203      	movs	r2, #3
 80015be:	4664      	mov	r4, ip
 80015c0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c2:	2403      	movs	r4, #3
 80015c4:	40bc      	lsls	r4, r7
 80015c6:	43e4      	mvns	r4, r4
 80015c8:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ca:	1e54      	subs	r4, r2, #1
 80015cc:	2c01      	cmp	r4, #1
 80015ce:	d82e      	bhi.n	800162e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80015d0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015d2:	9c01      	ldr	r4, [sp, #4]
 80015d4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d6:	68cc      	ldr	r4, [r1, #12]
 80015d8:	40bc      	lsls	r4, r7
 80015da:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80015dc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80015de:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e2:	43ac      	bics	r4, r5
 80015e4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	4664      	mov	r4, ip
 80015e8:	0924      	lsrs	r4, r4, #4
 80015ea:	4034      	ands	r4, r6
 80015ec:	409c      	lsls	r4, r3
 80015ee:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80015f0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80015f2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015f4:	9c01      	ldr	r4, [sp, #4]
 80015f6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f8:	688c      	ldr	r4, [r1, #8]
 80015fa:	40bc      	lsls	r4, r7
 80015fc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80015fe:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	2a02      	cmp	r2, #2
 8001602:	d116      	bne.n	8001632 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001604:	2507      	movs	r5, #7
 8001606:	260f      	movs	r6, #15
 8001608:	401d      	ands	r5, r3
 800160a:	00ad      	lsls	r5, r5, #2
 800160c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800160e:	08dc      	lsrs	r4, r3, #3
 8001610:	00a4      	lsls	r4, r4, #2
 8001612:	1904      	adds	r4, r0, r4
 8001614:	9402      	str	r4, [sp, #8]
 8001616:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001618:	9603      	str	r6, [sp, #12]
 800161a:	0026      	movs	r6, r4
 800161c:	9c03      	ldr	r4, [sp, #12]
 800161e:	43a6      	bics	r6, r4
 8001620:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001622:	690e      	ldr	r6, [r1, #16]
 8001624:	40ae      	lsls	r6, r5
 8001626:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001628:	9c02      	ldr	r4, [sp, #8]
 800162a:	6226      	str	r6, [r4, #32]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	2a03      	cmp	r2, #3
 8001630:	d1df      	bne.n	80015f2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001632:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001634:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001636:	9d01      	ldr	r5, [sp, #4]
 8001638:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800163e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001640:	4662      	mov	r2, ip
 8001642:	02a4      	lsls	r4, r4, #10
 8001644:	4222      	tst	r2, r4
 8001646:	d04f      	beq.n	80016e8 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	2501      	movs	r5, #1
 800164a:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800164c:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001650:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	432c      	orrs	r4, r5
 8001654:	6194      	str	r4, [r2, #24]
 8001656:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001658:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	402a      	ands	r2, r5
 800165c:	9205      	str	r2, [sp, #20]
 800165e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001660:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <HAL_GPIO_Init+0x15c>)
 8001662:	00a4      	lsls	r4, r4, #2
 8001664:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001666:	220f      	movs	r2, #15
 8001668:	3502      	adds	r5, #2
 800166a:	401d      	ands	r5, r3
 800166c:	00ad      	lsls	r5, r5, #2
 800166e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001670:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001672:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001674:	2200      	movs	r2, #0
 8001676:	42b8      	cmp	r0, r7
 8001678:	d00c      	beq.n	8001694 <HAL_GPIO_Init+0x100>
 800167a:	4f1e      	ldr	r7, [pc, #120]	@ (80016f4 <HAL_GPIO_Init+0x160>)
 800167c:	3201      	adds	r2, #1
 800167e:	42b8      	cmp	r0, r7
 8001680:	d008      	beq.n	8001694 <HAL_GPIO_Init+0x100>
 8001682:	4f1d      	ldr	r7, [pc, #116]	@ (80016f8 <HAL_GPIO_Init+0x164>)
 8001684:	3201      	adds	r2, #1
 8001686:	42b8      	cmp	r0, r7
 8001688:	d004      	beq.n	8001694 <HAL_GPIO_Init+0x100>
 800168a:	4f1c      	ldr	r7, [pc, #112]	@ (80016fc <HAL_GPIO_Init+0x168>)
 800168c:	3203      	adds	r2, #3
 800168e:	42b8      	cmp	r0, r7
 8001690:	d100      	bne.n	8001694 <HAL_GPIO_Init+0x100>
 8001692:	3a02      	subs	r2, #2
 8001694:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001696:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001698:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 800169c:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 800169e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80016a0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80016a2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80016a4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80016a6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a8:	02ff      	lsls	r7, r7, #11
 80016aa:	d401      	bmi.n	80016b0 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 80016ac:	0035      	movs	r5, r6
 80016ae:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80016b2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80016b4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80016b6:	9d00      	ldr	r5, [sp, #0]
 80016b8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ba:	02bf      	lsls	r7, r7, #10
 80016bc:	d401      	bmi.n	80016c2 <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 80016be:	0035      	movs	r5, r6
 80016c0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80016c4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80016c6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80016c8:	9d00      	ldr	r5, [sp, #0]
 80016ca:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016cc:	03bf      	lsls	r7, r7, #14
 80016ce:	d401      	bmi.n	80016d4 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80016d0:	0035      	movs	r5, r6
 80016d2:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d4:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80016d6:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80016d8:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80016da:	9e00      	ldr	r6, [sp, #0]
 80016dc:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016de:	03ff      	lsls	r7, r7, #15
 80016e0:	d401      	bmi.n	80016e6 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80016e2:	4025      	ands	r5, r4
 80016e4:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80016e6:	6016      	str	r6, [r2, #0]
    position++;
 80016e8:	3301      	adds	r3, #1
 80016ea:	e756      	b.n	800159a <HAL_GPIO_Init+0x6>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	2a00      	cmp	r2, #0
 8001706:	d001      	beq.n	800170c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001708:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800170a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800170e:	e7fc      	b.n	800170a <HAL_GPIO_WritePin+0x6>

08001710 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001712:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	4210      	tst	r0, r2
 8001718:	d002      	beq.n	8001720 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800171c:	f7ff fd5e 	bl	80011dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001720:	bd10      	pop	{r4, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	40010400 	.word	0x40010400

08001728 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001728:	6803      	ldr	r3, [r0, #0]
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	0792      	lsls	r2, r2, #30
 800172e:	d501      	bpl.n	8001734 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001734:	2201      	movs	r2, #1
 8001736:	6999      	ldr	r1, [r3, #24]
 8001738:	4211      	tst	r1, r2
 800173a:	d102      	bne.n	8001742 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800173c:	6999      	ldr	r1, [r3, #24]
 800173e:	430a      	orrs	r2, r1
 8001740:	619a      	str	r2, [r3, #24]
  }
}
 8001742:	4770      	bx	lr

08001744 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001744:	b530      	push	{r4, r5, lr}
 8001746:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001748:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800174a:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800174c:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800174e:	0589      	lsls	r1, r1, #22
 8001750:	431a      	orrs	r2, r3
 8001752:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <I2C_TransferConfig+0x28>)
 8001756:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001758:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800175a:	0d64      	lsrs	r4, r4, #21
 800175c:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800175e:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001760:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001762:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001764:	432a      	orrs	r2, r5
 8001766:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001768:	bd30      	pop	{r4, r5, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	03ff63ff 	.word	0x03ff63ff

08001770 <I2C_IsErrorOccurred>:
{
 8001770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001772:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001774:	6802      	ldr	r2, [r0, #0]
{
 8001776:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001778:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800177a:	2310      	movs	r3, #16
 800177c:	000f      	movs	r7, r1
{
 800177e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001780:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001784:	4219      	tst	r1, r3
 8001786:	d00d      	beq.n	80017a4 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800178a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 800178c:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	2120      	movs	r1, #32
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	420a      	tst	r2, r1
 8001796:	d15f      	bne.n	8001858 <I2C_IsErrorOccurred+0xe8>
 8001798:	2f00      	cmp	r7, #0
 800179a:	d031      	beq.n	8001800 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 800179c:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800179e:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80017a0:	9b01      	ldr	r3, [sp, #4]
 80017a2:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017a4:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 80017a6:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017a8:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 80017aa:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017ac:	4213      	tst	r3, r2
 80017ae:	d002      	beq.n	80017b6 <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 80017b0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017b2:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80017b4:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017b6:	2280      	movs	r2, #128	@ 0x80
 80017b8:	00d2      	lsls	r2, r2, #3
 80017ba:	4213      	tst	r3, r2
 80017bc:	d003      	beq.n	80017c6 <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 80017be:	2108      	movs	r1, #8
    status = HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 80017c2:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017c4:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017c6:	2280      	movs	r2, #128	@ 0x80
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4213      	tst	r3, r2
 80017cc:	d049      	beq.n	8001862 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 80017ce:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017d0:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80017d2:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80017d4:	0020      	movs	r0, r4
 80017d6:	f7ff ffa7 	bl	8001728 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80017da:	686b      	ldr	r3, [r5, #4]
 80017dc:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 80017de:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80017e0:	4013      	ands	r3, r2
 80017e2:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80017e4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80017e8:	433b      	orrs	r3, r7
 80017ea:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	0023      	movs	r3, r4
 80017ee:	3341      	adds	r3, #65	@ 0x41
 80017f0:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f2:	0022      	movs	r2, r4
 80017f4:	2300      	movs	r3, #0
 80017f6:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 80017f8:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80017fc:	7023      	strb	r3, [r4, #0]
 80017fe:	e032      	b.n	8001866 <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8001800:	1c72      	adds	r2, r6, #1
 8001802:	d0c5      	beq.n	8001790 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001804:	f7ff fe3c 	bl	8001480 <HAL_GetTick>
 8001808:	1b40      	subs	r0, r0, r5
 800180a:	42b0      	cmp	r0, r6
 800180c:	d801      	bhi.n	8001812 <I2C_IsErrorOccurred+0xa2>
 800180e:	2e00      	cmp	r6, #0
 8001810:	d1bd      	bne.n	800178e <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8001812:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001814:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001816:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001818:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800181a:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800181c:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 800181e:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001820:	0412      	lsls	r2, r2, #16
 8001822:	d50b      	bpl.n	800183c <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001824:	2280      	movs	r2, #128	@ 0x80
 8001826:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001828:	4210      	tst	r0, r2
 800182a:	d107      	bne.n	800183c <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 800182c:	2920      	cmp	r1, #32
 800182e:	d005      	beq.n	800183c <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001836:	f7ff fe23 	bl	8001480 <HAL_GetTick>
 800183a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183c:	2220      	movs	r2, #32
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4213      	tst	r3, r2
 8001844:	d1a3      	bne.n	800178e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001846:	f7ff fe1b 	bl	8001480 <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	2819      	cmp	r0, #25
 800184e:	d9f5      	bls.n	800183c <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001850:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8001852:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	e79a      	b.n	800178e <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8001858:	2f00      	cmp	r7, #0
 800185a:	d19f      	bne.n	800179c <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185c:	2220      	movs	r2, #32
 800185e:	61da      	str	r2, [r3, #28]
 8001860:	e79c      	b.n	800179c <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8001862:	2800      	cmp	r0, #0
 8001864:	d1b6      	bne.n	80017d4 <I2C_IsErrorOccurred+0x64>
}
 8001866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001868:	fe00e800 	.word	0xfe00e800

0800186c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	0004      	movs	r4, r0
 8001870:	000d      	movs	r5, r1
 8001872:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001874:	2702      	movs	r7, #2
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	423b      	tst	r3, r7
 800187c:	d001      	beq.n	8001882 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800187e:	2000      	movs	r0, #0
 8001880:	e021      	b.n	80018c6 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001882:	0032      	movs	r2, r6
 8001884:	0029      	movs	r1, r5
 8001886:	0020      	movs	r0, r4
 8001888:	f7ff ff72 	bl	8001770 <I2C_IsErrorOccurred>
 800188c:	2800      	cmp	r0, #0
 800188e:	d119      	bne.n	80018c4 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8001890:	1c6b      	adds	r3, r5, #1
 8001892:	d0f0      	beq.n	8001876 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001894:	f7ff fdf4 	bl	8001480 <HAL_GetTick>
 8001898:	1b80      	subs	r0, r0, r6
 800189a:	42a8      	cmp	r0, r5
 800189c:	d801      	bhi.n	80018a2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800189e:	2d00      	cmp	r5, #0
 80018a0:	d1e9      	bne.n	8001876 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	6999      	ldr	r1, [r3, #24]
 80018a6:	2302      	movs	r3, #2
 80018a8:	000a      	movs	r2, r1
 80018aa:	401a      	ands	r2, r3
 80018ac:	4219      	tst	r1, r3
 80018ae:	d1e2      	bne.n	8001876 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b0:	2120      	movs	r1, #32
 80018b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80018ba:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80018bc:	3341      	adds	r3, #65	@ 0x41
 80018be:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80018c2:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80018c4:	2001      	movs	r0, #1
}
 80018c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018c8 <I2C_WaitOnFlagUntilTimeout>:
{
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	0004      	movs	r4, r0
 80018cc:	000d      	movs	r5, r1
 80018ce:	0017      	movs	r7, r2
 80018d0:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	402b      	ands	r3, r5
 80018d8:	1b5b      	subs	r3, r3, r5
 80018da:	425a      	negs	r2, r3
 80018dc:	4153      	adcs	r3, r2
 80018de:	42bb      	cmp	r3, r7
 80018e0:	d001      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e026      	b.n	8001934 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e6:	0031      	movs	r1, r6
 80018e8:	0020      	movs	r0, r4
 80018ea:	9a06      	ldr	r2, [sp, #24]
 80018ec:	f7ff ff40 	bl	8001770 <I2C_IsErrorOccurred>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d11e      	bne.n	8001932 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80018f4:	1c73      	adds	r3, r6, #1
 80018f6:	d0ec      	beq.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f8:	f7ff fdc2 	bl	8001480 <HAL_GetTick>
 80018fc:	9b06      	ldr	r3, [sp, #24]
 80018fe:	1ac0      	subs	r0, r0, r3
 8001900:	42b0      	cmp	r0, r6
 8001902:	d801      	bhi.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x40>
 8001904:	2e00      	cmp	r6, #0
 8001906:	d1e4      	bne.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	402b      	ands	r3, r5
 800190e:	1b5b      	subs	r3, r3, r5
 8001910:	425a      	negs	r2, r3
 8001912:	4153      	adcs	r3, r2
 8001914:	42bb      	cmp	r3, r7
 8001916:	d1dc      	bne.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001918:	2220      	movs	r2, #32
 800191a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800191c:	4313      	orrs	r3, r2
 800191e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001920:	0023      	movs	r3, r4
 8001922:	3341      	adds	r3, #65	@ 0x41
 8001924:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001926:	0022      	movs	r2, r4
 8001928:	2300      	movs	r3, #0
 800192a:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 800192c:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001930:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
}
 8001934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001936 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001938:	0004      	movs	r4, r0
 800193a:	000e      	movs	r6, r1
 800193c:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800193e:	2520      	movs	r5, #32
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	422b      	tst	r3, r5
 8001946:	d001      	beq.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001948:	2000      	movs	r0, #0
 800194a:	e01d      	b.n	8001988 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800194c:	003a      	movs	r2, r7
 800194e:	0031      	movs	r1, r6
 8001950:	0020      	movs	r0, r4
 8001952:	f7ff ff0d 	bl	8001770 <I2C_IsErrorOccurred>
 8001956:	2800      	cmp	r0, #0
 8001958:	d115      	bne.n	8001986 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff fd91 	bl	8001480 <HAL_GetTick>
 800195e:	1bc0      	subs	r0, r0, r7
 8001960:	42b0      	cmp	r0, r6
 8001962:	d801      	bhi.n	8001968 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001964:	2e00      	cmp	r6, #0
 8001966:	d1eb      	bne.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	001a      	movs	r2, r3
 800196e:	402a      	ands	r2, r5
 8001970:	422b      	tst	r3, r5
 8001972:	d1e5      	bne.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001976:	432b      	orrs	r3, r5
 8001978:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800197a:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 800197c:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800197e:	3341      	adds	r3, #65	@ 0x41
 8001980:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001984:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001986:	2001      	movs	r0, #1
}
 8001988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800198c <HAL_I2C_Init>:
{
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001992:	2c00      	cmp	r4, #0
 8001994:	d04e      	beq.n	8001a34 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001996:	0025      	movs	r5, r4
 8001998:	3541      	adds	r5, #65	@ 0x41
 800199a:	782b      	ldrb	r3, [r5, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	0023      	movs	r3, r4
 80019a4:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80019a6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80019a8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80019aa:	f7ff fc47 	bl	800123c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ae:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80019b4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80019b8:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ba:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80019bc:	438a      	bics	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c0:	491d      	ldr	r1, [pc, #116]	@ (8001a38 <HAL_I2C_Init+0xac>)
 80019c2:	6862      	ldr	r2, [r4, #4]
 80019c4:	400a      	ands	r2, r1
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	491c      	ldr	r1, [pc, #112]	@ (8001a3c <HAL_I2C_Init+0xb0>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019d0:	2801      	cmp	r0, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4332      	orrs	r2, r6
 80019da:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4818      	ldr	r0, [pc, #96]	@ (8001a40 <HAL_I2C_Init+0xb4>)
 80019e0:	4002      	ands	r2, r0
 80019e2:	e009      	b.n	80019f8 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019e4:	2284      	movs	r2, #132	@ 0x84
 80019e6:	0212      	lsls	r2, r2, #8
 80019e8:	4332      	orrs	r2, r6
 80019ea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ec:	2802      	cmp	r0, #2
 80019ee:	d1f5      	bne.n	80019dc <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019f0:	2280      	movs	r2, #128	@ 0x80
 80019f2:	6858      	ldr	r0, [r3, #4]
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019f8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019fa:	6858      	ldr	r0, [r3, #4]
 80019fc:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <HAL_I2C_Init+0xb8>)
 80019fe:	4302      	orrs	r2, r0
 8001a00:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a02:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a04:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a06:	400a      	ands	r2, r1
 8001a08:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a0a:	6961      	ldr	r1, [r4, #20]
 8001a0c:	6922      	ldr	r2, [r4, #16]
 8001a0e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a10:	69a1      	ldr	r1, [r4, #24]
 8001a12:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a18:	6a21      	ldr	r1, [r4, #32]
 8001a1a:	69e2      	ldr	r2, [r4, #28]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001a20:	2201      	movs	r2, #1
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2a:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	3442      	adds	r4, #66	@ 0x42
 8001a32:	7020      	strb	r0, [r4, #0]
}
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	f0ffffff 	.word	0xf0ffffff
 8001a3c:	ffff7fff 	.word	0xffff7fff
 8001a40:	fffff7ff 	.word	0xfffff7ff
 8001a44:	02008000 	.word	0x02008000

08001a48 <HAL_I2C_Master_Transmit>:
{
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4a:	0006      	movs	r6, r0
{
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	9202      	str	r2, [sp, #8]
 8001a50:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a52:	3641      	adds	r6, #65	@ 0x41
 8001a54:	7833      	ldrb	r3, [r6, #0]
{
 8001a56:	0004      	movs	r4, r0
 8001a58:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8001a5a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d114      	bne.n	8001a8a <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8001a60:	0023      	movs	r3, r4
 8001a62:	3340      	adds	r3, #64	@ 0x40
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	2a01      	cmp	r2, #1
 8001a68:	d00f      	beq.n	8001a8a <HAL_I2C_Master_Transmit+0x42>
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fd07 	bl	8001480 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a72:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8001a74:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a76:	9000      	str	r0, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	0020      	movs	r0, r4
 8001a7e:	0209      	lsls	r1, r1, #8
 8001a80:	f7ff ff22 	bl	80018c8 <I2C_WaitOnFlagUntilTimeout>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
}
 8001a8a:	b005      	add	sp, #20
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a8e:	2321      	movs	r3, #33	@ 0x21
 8001a90:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a92:	0023      	movs	r3, r4
 8001a94:	2210      	movs	r2, #16
 8001a96:	3342      	adds	r3, #66	@ 0x42
 8001a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr  = pData;
 8001a9a:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001a9e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aa0:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8001aa2:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8001aa4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001aa8:	2bff      	cmp	r3, #255	@ 0xff
 8001aaa:	d834      	bhi.n	8001b16 <HAL_I2C_Master_Transmit+0xce>
      xfermode = I2C_AUTOEND_MODE;
 8001aac:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001aae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8001ab0:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001ab2:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 8001ab4:	4932      	ldr	r1, [pc, #200]	@ (8001b80 <HAL_I2C_Master_Transmit+0x138>)
 8001ab6:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d00f      	beq.n	8001adc <HAL_I2C_Master_Transmit+0x94>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001abc:	9e02      	ldr	r6, [sp, #8]
 8001abe:	6820      	ldr	r0, [r4, #0]
 8001ac0:	7836      	ldrb	r6, [r6, #0]
      hi2c->XferSize--;
 8001ac2:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ac4:	6286      	str	r6, [r0, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001ac6:	9802      	ldr	r0, [sp, #8]
      hi2c->XferSize--;
 8001ac8:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8001aca:	3001      	adds	r0, #1
 8001acc:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001ace:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ad0:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001ad2:	3801      	subs	r0, #1
 8001ad4:	b280      	uxth	r0, r0
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ad6:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8001ad8:	8560      	strh	r0, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ada:	b2d2      	uxtb	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001adc:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ade:	0039      	movs	r1, r7
 8001ae0:	0020      	movs	r0, r4
 8001ae2:	f7ff fe2f 	bl	8001744 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ae6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae8:	002a      	movs	r2, r5
 8001aea:	0020      	movs	r0, r4
 8001aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_I2C_Master_Transmit+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af2:	f7ff ff20 	bl	8001936 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d1c6      	bne.n	8001a88 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001afa:	2120      	movs	r1, #32
 8001afc:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001afe:	4d21      	ldr	r5, [pc, #132]	@ (8001b84 <HAL_I2C_Master_Transmit+0x13c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b00:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	402a      	ands	r2, r5
 8001b06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001b0a:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	3341      	adds	r3, #65	@ 0x41
 8001b0e:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b10:	7058      	strb	r0, [r3, #1]
    __HAL_UNLOCK(hi2c);
 8001b12:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001b14:	e7b9      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x42>
      xfermode = I2C_RELOAD_MODE;
 8001b16:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b18:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8001b1a:	045b      	lsls	r3, r3, #17
 8001b1c:	e7ca      	b.n	8001ab4 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1e:	f7ff fea5 	bl	800186c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d1b0      	bne.n	8001a88 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001b2c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b2e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001b30:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001b32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b34:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b3c:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b3e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b40:	b292      	uxth	r2, r2
 8001b42:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ce      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0x9e>
 8001b48:	2a00      	cmp	r2, #0
 8001b4a:	d1cc      	bne.n	8001ae6 <HAL_I2C_Master_Transmit+0x9e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b4c:	2180      	movs	r1, #128	@ 0x80
 8001b4e:	0020      	movs	r0, r4
 8001b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001b52:	9500      	str	r5, [sp, #0]
 8001b54:	f7ff feb8 	bl	80018c8 <I2C_WaitOnFlagUntilTimeout>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d000      	beq.n	8001b5e <HAL_I2C_Master_Transmit+0x116>
 8001b5c:	e794      	b.n	8001a88 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b60:	2bff      	cmp	r3, #255	@ 0xff
 8001b62:	d905      	bls.n	8001b70 <HAL_I2C_Master_Transmit+0x128>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b64:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b66:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b68:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b6a:	045b      	lsls	r3, r3, #17
 8001b6c:	9000      	str	r0, [sp, #0]
 8001b6e:	e7b6      	b.n	8001ade <HAL_I2C_Master_Transmit+0x96>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b70:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001b72:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b74:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001b76:	b292      	uxth	r2, r2
 8001b78:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	9000      	str	r0, [sp, #0]
 8001b7e:	e7ae      	b.n	8001ade <HAL_I2C_Master_Transmit+0x96>
 8001b80:	80002000 	.word	0x80002000
 8001b84:	fe00e800 	.word	0xfe00e800

08001b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	0004      	movs	r4, r0
 8001b8c:	3441      	adds	r4, #65	@ 0x41
 8001b8e:	7822      	ldrb	r2, [r4, #0]
{
 8001b90:	0003      	movs	r3, r0
 8001b92:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b94:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b96:	b2d6      	uxtb	r6, r2
 8001b98:	2a20      	cmp	r2, #32
 8001b9a:	d118      	bne.n	8001bce <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001b9c:	001d      	movs	r5, r3
 8001b9e:	3540      	adds	r5, #64	@ 0x40
 8001ba0:	782a      	ldrb	r2, [r5, #0]
 8001ba2:	2a01      	cmp	r2, #1
 8001ba4:	d013      	beq.n	8001bce <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba6:	2224      	movs	r2, #36	@ 0x24
 8001ba8:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3a23      	subs	r2, #35	@ 0x23
 8001bae:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bb0:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001bb2:	4391      	bics	r1, r2
 8001bb4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bba:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bbc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bbe:	6819      	ldr	r1, [r3, #0]
 8001bc0:	4339      	orrs	r1, r7
 8001bc2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001bcc:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd0:	ffffefff 	.word	0xffffefff

08001bd4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd4:	0002      	movs	r2, r0
{
 8001bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd8:	3241      	adds	r2, #65	@ 0x41
 8001bda:	7814      	ldrb	r4, [r2, #0]
{
 8001bdc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bde:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be2:	2c20      	cmp	r4, #32
 8001be4:	d117      	bne.n	8001c16 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001be6:	001c      	movs	r4, r3
 8001be8:	3440      	adds	r4, #64	@ 0x40
 8001bea:	7826      	ldrb	r6, [r4, #0]
 8001bec:	2e01      	cmp	r6, #1
 8001bee:	d012      	beq.n	8001c16 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf0:	3022      	adds	r0, #34	@ 0x22
 8001bf2:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3823      	subs	r0, #35	@ 0x23
 8001bf8:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bfa:	4f07      	ldr	r7, [pc, #28]	@ (8001c18 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001bfc:	4386      	bics	r6, r0
 8001bfe:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001c00:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c02:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001c04:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001c06:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c08:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	4308      	orrs	r0, r1
 8001c0e:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001c14:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	fffff0ff 	.word	0xfffff0ff

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	0004      	movs	r4, r0
 8001c20:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d045      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	6803      	ldr	r3, [r0, #0]
 8001c28:	07db      	lsls	r3, r3, #31
 8001c2a:	d42f      	bmi.n	8001c8c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	079b      	lsls	r3, r3, #30
 8001c30:	d500      	bpl.n	8001c34 <HAL_RCC_OscConfig+0x18>
 8001c32:	e081      	b.n	8001d38 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	071b      	lsls	r3, r3, #28
 8001c38:	d500      	bpl.n	8001c3c <HAL_RCC_OscConfig+0x20>
 8001c3a:	e0bc      	b.n	8001db6 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	075b      	lsls	r3, r3, #29
 8001c40:	d500      	bpl.n	8001c44 <HAL_RCC_OscConfig+0x28>
 8001c42:	e0df      	b.n	8001e04 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	06db      	lsls	r3, r3, #27
 8001c48:	d51a      	bpl.n	8001c80 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c4a:	6962      	ldr	r2, [r4, #20]
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	4db4      	ldr	r5, [pc, #720]	@ (8001f20 <HAL_RCC_OscConfig+0x304>)
 8001c50:	2a01      	cmp	r2, #1
 8001c52:	d000      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a>
 8001c54:	e148      	b.n	8001ee8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c56:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c58:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001c5e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c60:	431a      	orrs	r2, r3
 8001c62:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001c64:	f7ff fc0c 	bl	8001480 <HAL_GetTick>
 8001c68:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c6c:	423b      	tst	r3, r7
 8001c6e:	d100      	bne.n	8001c72 <HAL_RCC_OscConfig+0x56>
 8001c70:	e133      	b.n	8001eda <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c72:	21f8      	movs	r1, #248	@ 0xf8
 8001c74:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001c76:	69a3      	ldr	r3, [r4, #24]
 8001c78:	438a      	bics	r2, r1
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c80:	6a23      	ldr	r3, [r4, #32]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d000      	beq.n	8001c88 <HAL_RCC_OscConfig+0x6c>
 8001c86:	e157      	b.n	8001f38 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
 8001c8a:	e02a      	b.n	8001ce2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	4da4      	ldr	r5, [pc, #656]	@ (8001f20 <HAL_RCC_OscConfig+0x304>)
 8001c90:	686b      	ldr	r3, [r5, #4]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d006      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	686b      	ldr	r3, [r5, #4]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x9a>
 8001ca0:	686b      	ldr	r3, [r5, #4]
 8001ca2:	03db      	lsls	r3, r3, #15
 8001ca4:	d507      	bpl.n	8001cb6 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca6:	682b      	ldr	r3, [r5, #0]
 8001ca8:	039b      	lsls	r3, r3, #14
 8001caa:	d5bf      	bpl.n	8001c2c <HAL_RCC_OscConfig+0x10>
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1bc      	bne.n	8001c2c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d114      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xca>
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	682a      	ldr	r2, [r5, #0]
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fbdb 	bl	8001480 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001ccc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	02bf      	lsls	r7, r7, #10
 8001cd0:	682b      	ldr	r3, [r5, #0]
 8001cd2:	423b      	tst	r3, r7
 8001cd4:	d1aa      	bne.n	8001c2c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd6:	f7ff fbd3 	bl	8001480 <HAL_GetTick>
 8001cda:	1b80      	subs	r0, r0, r6
 8001cdc:	2864      	cmp	r0, #100	@ 0x64
 8001cde:	d9f7      	bls.n	8001cd0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8001ce0:	2003      	movs	r0, #3
}
 8001ce2:	b005      	add	sp, #20
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d116      	bne.n	8001d18 <HAL_RCC_OscConfig+0xfc>
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	4a8d      	ldr	r2, [pc, #564]	@ (8001f24 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	4a8c      	ldr	r2, [pc, #560]	@ (8001f28 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fbbf 	bl	8001480 <HAL_GetTick>
 8001d02:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	423b      	tst	r3, r7
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0xf0>
 8001d0a:	e78f      	b.n	8001c2c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fbb8 	bl	8001480 <HAL_GetTick>
 8001d10:	1b80      	subs	r0, r0, r6
 8001d12:	2864      	cmp	r0, #100	@ 0x64
 8001d14:	d9f6      	bls.n	8001d04 <HAL_RCC_OscConfig+0xe8>
 8001d16:	e7e3      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x10c>
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	682a      	ldr	r2, [r5, #0]
 8001d20:	02db      	lsls	r3, r3, #11
 8001d22:	4313      	orrs	r3, r2
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	e7c9      	b.n	8001cbc <HAL_RCC_OscConfig+0xa0>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f24 <HAL_RCC_OscConfig+0x308>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	602b      	str	r3, [r5, #0]
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	4a7d      	ldr	r2, [pc, #500]	@ (8001f28 <HAL_RCC_OscConfig+0x30c>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	e7c5      	b.n	8001cc4 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d38:	220c      	movs	r2, #12
 8001d3a:	4d79      	ldr	r5, [pc, #484]	@ (8001f20 <HAL_RCC_OscConfig+0x304>)
 8001d3c:	686b      	ldr	r3, [r5, #4]
 8001d3e:	4213      	tst	r3, r2
 8001d40:	d006      	beq.n	8001d50 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d42:	686b      	ldr	r3, [r5, #4]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d110      	bne.n	8001d6c <HAL_RCC_OscConfig+0x150>
 8001d4a:	686b      	ldr	r3, [r5, #4]
 8001d4c:	03db      	lsls	r3, r3, #15
 8001d4e:	d40d      	bmi.n	8001d6c <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	079b      	lsls	r3, r3, #30
 8001d54:	d502      	bpl.n	8001d5c <HAL_RCC_OscConfig+0x140>
 8001d56:	68e3      	ldr	r3, [r4, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d1aa      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	21f8      	movs	r1, #248	@ 0xf8
 8001d5e:	682a      	ldr	r2, [r5, #0]
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	438a      	bics	r2, r1
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	602b      	str	r3, [r5, #0]
 8001d6a:	e763      	b.n	8001c34 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	68e2      	ldr	r2, [r4, #12]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d00f      	beq.n	8001d94 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001d74:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fb80 	bl	8001480 <HAL_GetTick>
 8001d80:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	423b      	tst	r3, r7
 8001d86:	d1e9      	bne.n	8001d5c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fb7a 	bl	8001480 <HAL_GetTick>
 8001d8c:	1b80      	subs	r0, r0, r6
 8001d8e:	2802      	cmp	r0, #2
 8001d90:	d9f7      	bls.n	8001d82 <HAL_RCC_OscConfig+0x166>
 8001d92:	e7a5      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8001d94:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001d98:	439a      	bics	r2, r3
 8001d9a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb70 	bl	8001480 <HAL_GetTick>
 8001da0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	682b      	ldr	r3, [r5, #0]
 8001da4:	423b      	tst	r3, r7
 8001da6:	d100      	bne.n	8001daa <HAL_RCC_OscConfig+0x18e>
 8001da8:	e744      	b.n	8001c34 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb69 	bl	8001480 <HAL_GetTick>
 8001dae:	1b80      	subs	r0, r0, r6
 8001db0:	2802      	cmp	r0, #2
 8001db2:	d9f6      	bls.n	8001da2 <HAL_RCC_OscConfig+0x186>
 8001db4:	e794      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db6:	69e2      	ldr	r2, [r4, #28]
 8001db8:	2301      	movs	r3, #1
 8001dba:	4d59      	ldr	r5, [pc, #356]	@ (8001f20 <HAL_RCC_OscConfig+0x304>)
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001dc0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fb5a 	bl	8001480 <HAL_GetTick>
 8001dcc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001dd0:	423b      	tst	r3, r7
 8001dd2:	d000      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1ba>
 8001dd4:	e732      	b.n	8001c3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fb53 	bl	8001480 <HAL_GetTick>
 8001dda:	1b80      	subs	r0, r0, r6
 8001ddc:	2802      	cmp	r0, #2
 8001dde:	d9f6      	bls.n	8001dce <HAL_RCC_OscConfig+0x1b2>
 8001de0:	e77e      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8001de2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001de6:	439a      	bics	r2, r3
 8001de8:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001dea:	f7ff fb49 	bl	8001480 <HAL_GetTick>
 8001dee:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001df2:	423b      	tst	r3, r7
 8001df4:	d100      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1dc>
 8001df6:	e721      	b.n	8001c3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fb42 	bl	8001480 <HAL_GetTick>
 8001dfc:	1b80      	subs	r0, r0, r6
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	d9f6      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1d4>
 8001e02:	e76d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e08:	4d45      	ldr	r5, [pc, #276]	@ (8001f20 <HAL_RCC_OscConfig+0x304>)
 8001e0a:	0552      	lsls	r2, r2, #21
 8001e0c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e10:	4213      	tst	r3, r2
 8001e12:	d108      	bne.n	8001e26 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	69eb      	ldr	r3, [r5, #28]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61eb      	str	r3, [r5, #28]
 8001e1a:	69eb      	ldr	r3, [r5, #28]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	9303      	str	r3, [sp, #12]
 8001e20:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	2780      	movs	r7, #128	@ 0x80
 8001e28:	4e40      	ldr	r6, [pc, #256]	@ (8001f2c <HAL_RCC_OscConfig+0x310>)
 8001e2a:	007f      	lsls	r7, r7, #1
 8001e2c:	6833      	ldr	r3, [r6, #0]
 8001e2e:	423b      	tst	r3, r7
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e32:	68a3      	ldr	r3, [r4, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d122      	bne.n	8001e7e <HAL_RCC_OscConfig+0x262>
 8001e38:	6a2a      	ldr	r2, [r5, #32]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb1f 	bl	8001480 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001e44:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	6a2b      	ldr	r3, [r5, #32]
 8001e48:	423b      	tst	r3, r7
 8001e4a:	d03f      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8001e4c:	9b00      	ldr	r3, [sp, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d000      	beq.n	8001e54 <HAL_RCC_OscConfig+0x238>
 8001e52:	e6f7      	b.n	8001c44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	69eb      	ldr	r3, [r5, #28]
 8001e56:	4a36      	ldr	r2, [pc, #216]	@ (8001f30 <HAL_RCC_OscConfig+0x314>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61eb      	str	r3, [r5, #28]
 8001e5c:	e6f2      	b.n	8001c44 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5e:	6833      	ldr	r3, [r6, #0]
 8001e60:	433b      	orrs	r3, r7
 8001e62:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e64:	f7ff fb0c 	bl	8001480 <HAL_GetTick>
 8001e68:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	6833      	ldr	r3, [r6, #0]
 8001e6c:	423b      	tst	r3, r7
 8001e6e:	d1e0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7ff fb06 	bl	8001480 <HAL_GetTick>
 8001e74:	9b01      	ldr	r3, [sp, #4]
 8001e76:	1ac0      	subs	r0, r0, r3
 8001e78:	2864      	cmp	r0, #100	@ 0x64
 8001e7a:	d9f6      	bls.n	8001e6a <HAL_RCC_OscConfig+0x24e>
 8001e7c:	e730      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <HAL_RCC_OscConfig+0x292>
 8001e84:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e86:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	4393      	bics	r3, r2
 8001e8a:	622b      	str	r3, [r5, #32]
 8001e8c:	6a2b      	ldr	r3, [r5, #32]
 8001e8e:	3203      	adds	r2, #3
 8001e90:	4393      	bics	r3, r2
 8001e92:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001e94:	f7ff faf4 	bl	8001480 <HAL_GetTick>
 8001e98:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	6a2b      	ldr	r3, [r5, #32]
 8001e9c:	423b      	tst	r3, r7
 8001e9e:	d0d5      	beq.n	8001e4c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff faee 	bl	8001480 <HAL_GetTick>
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_RCC_OscConfig+0x318>)
 8001ea6:	1b80      	subs	r0, r0, r6
 8001ea8:	4298      	cmp	r0, r3
 8001eaa:	d9f6      	bls.n	8001e9a <HAL_RCC_OscConfig+0x27e>
 8001eac:	e718      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2a2>
 8001eb2:	6a29      	ldr	r1, [r5, #32]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	622b      	str	r3, [r5, #32]
 8001eba:	6a2b      	ldr	r3, [r5, #32]
 8001ebc:	e7bd      	b.n	8001e3a <HAL_RCC_OscConfig+0x21e>
 8001ebe:	6a2b      	ldr	r3, [r5, #32]
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	622b      	str	r3, [r5, #32]
 8001ec6:	6a2b      	ldr	r3, [r5, #32]
 8001ec8:	4393      	bics	r3, r2
 8001eca:	e7b7      	b.n	8001e3c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fad8 	bl	8001480 <HAL_GetTick>
 8001ed0:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <HAL_RCC_OscConfig+0x318>)
 8001ed2:	1b80      	subs	r0, r0, r6
 8001ed4:	4298      	cmp	r0, r3
 8001ed6:	d9b6      	bls.n	8001e46 <HAL_RCC_OscConfig+0x22a>
 8001ed8:	e702      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eda:	f7ff fad1 	bl	8001480 <HAL_GetTick>
 8001ede:	1b80      	subs	r0, r0, r6
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	d800      	bhi.n	8001ee6 <HAL_RCC_OscConfig+0x2ca>
 8001ee4:	e6c1      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e>
 8001ee6:	e6fb      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ee8:	3205      	adds	r2, #5
 8001eea:	d103      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001eec:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001eee:	439a      	bics	r2, r3
 8001ef0:	636a      	str	r2, [r5, #52]	@ 0x34
 8001ef2:	e6be      	b.n	8001c72 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ef6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001efa:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001efc:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001efe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001f00:	4393      	bics	r3, r2
 8001f02:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001f04:	f7ff fabc 	bl	8001480 <HAL_GetTick>
 8001f08:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f0a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001f0c:	423b      	tst	r3, r7
 8001f0e:	d100      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2f6>
 8001f10:	e6b6      	b.n	8001c80 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f12:	f7ff fab5 	bl	8001480 <HAL_GetTick>
 8001f16:	1b80      	subs	r0, r0, r6
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d9f6      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2ee>
 8001f1c:	e6e0      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	40021000 	.word	0x40021000
 8001f24:	fffeffff 	.word	0xfffeffff
 8001f28:	fffbffff 	.word	0xfffbffff
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	efffffff 	.word	0xefffffff
 8001f34:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	210c      	movs	r1, #12
 8001f3a:	4d34      	ldr	r5, [pc, #208]	@ (800200c <HAL_RCC_OscConfig+0x3f0>)
 8001f3c:	686a      	ldr	r2, [r5, #4]
 8001f3e:	400a      	ands	r2, r1
 8001f40:	2a08      	cmp	r2, #8
 8001f42:	d047      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <HAL_RCC_OscConfig+0x3f4>)
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d132      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4013      	ands	r3, r2
 8001f50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f52:	f7ff fa95 	bl	8001480 <HAL_GetTick>
 8001f56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	04bf      	lsls	r7, r7, #18
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	423b      	tst	r3, r7
 8001f5e:	d121      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	220f      	movs	r2, #15
 8001f62:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f66:	4393      	bics	r3, r2
 8001f68:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001f70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001f72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f74:	686a      	ldr	r2, [r5, #4]
 8001f76:	430b      	orrs	r3, r1
 8001f78:	4926      	ldr	r1, [pc, #152]	@ (8002014 <HAL_RCC_OscConfig+0x3f8>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	682a      	ldr	r2, [r5, #0]
 8001f84:	045b      	lsls	r3, r3, #17
 8001f86:	4313      	orrs	r3, r2
 8001f88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fa79 	bl	8001480 <HAL_GetTick>
 8001f8e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	4233      	tst	r3, r6
 8001f94:	d000      	beq.n	8001f98 <HAL_RCC_OscConfig+0x37c>
 8001f96:	e677      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff fa72 	bl	8001480 <HAL_GetTick>
 8001f9c:	1b00      	subs	r0, r0, r4
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9f6      	bls.n	8001f90 <HAL_RCC_OscConfig+0x374>
 8001fa2:	e69d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fa6c 	bl	8001480 <HAL_GetTick>
 8001fa8:	1b80      	subs	r0, r0, r6
 8001faa:	2802      	cmp	r0, #2
 8001fac:	d9d5      	bls.n	8001f5a <HAL_RCC_OscConfig+0x33e>
 8001fae:	e697      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa62 	bl	8001480 <HAL_GetTick>
 8001fbc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	04b6      	lsls	r6, r6, #18
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	4233      	tst	r3, r6
 8001fc4:	d100      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3ac>
 8001fc6:	e65f      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fa5a 	bl	8001480 <HAL_GetTick>
 8001fcc:	1b00      	subs	r0, r0, r4
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9f6      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001fd2:	e685      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d100      	bne.n	8001fda <HAL_RCC_OscConfig+0x3be>
 8001fd8:	e66b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8001fdc:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001fe0:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001fe2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe4:	4002      	ands	r2, r0
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d000      	beq.n	8001fec <HAL_RCC_OscConfig+0x3d0>
 8001fea:	e662      	b.n	8001cb2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fec:	220f      	movs	r2, #15
 8001fee:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d000      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x3dc>
 8001ff6:	e65c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff8:	23f0      	movs	r3, #240	@ 0xf0
 8001ffa:	039b      	lsls	r3, r3, #14
 8001ffc:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ffe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002000:	1ac0      	subs	r0, r0, r3
 8002002:	1e43      	subs	r3, r0, #1
 8002004:	4198      	sbcs	r0, r3
 8002006:	b2c0      	uxtb	r0, r0
 8002008:	e66b      	b.n	8001ce2 <HAL_RCC_OscConfig+0xc6>
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	40021000 	.word	0x40021000
 8002010:	feffffff 	.word	0xfeffffff
 8002014:	ffc2ffff 	.word	0xffc2ffff

08002018 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	220c      	movs	r2, #12
{
 800201a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800201c:	4d0c      	ldr	r5, [pc, #48]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x38>)
 800201e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	401a      	ands	r2, r3
 8002022:	2a08      	cmp	r2, #8
 8002024:	d111      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002026:	200f      	movs	r0, #15
 8002028:	490a      	ldr	r1, [pc, #40]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x3c>)
 800202a:	0c9a      	lsrs	r2, r3, #18
 800202c:	4002      	ands	r2, r0
 800202e:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002030:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002032:	03db      	lsls	r3, r3, #15
 8002034:	d507      	bpl.n	8002046 <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002036:	4908      	ldr	r1, [pc, #32]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x40>)
 8002038:	4002      	ands	r2, r0
 800203a:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <HAL_RCC_GetSysClockFreq+0x44>)
 800203e:	f7fe f86d 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002042:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002044:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002046:	4806      	ldr	r0, [pc, #24]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x48>)
 8002048:	e7fb      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800204a:	4804      	ldr	r0, [pc, #16]	@ (800205c <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 800204c:	e7fa      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c>
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40021000 	.word	0x40021000
 8002054:	08002f20 	.word	0x08002f20
 8002058:	08002f10 	.word	0x08002f10
 800205c:	007a1200 	.word	0x007a1200
 8002060:	003d0900 	.word	0x003d0900

08002064 <HAL_RCC_ClockConfig>:
{
 8002064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002066:	0004      	movs	r4, r0
 8002068:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800206a:	2800      	cmp	r0, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800206e:	2001      	movs	r0, #1
}
 8002070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002072:	2201      	movs	r2, #1
 8002074:	4d37      	ldr	r5, [pc, #220]	@ (8002154 <HAL_RCC_ClockConfig+0xf0>)
 8002076:	682b      	ldr	r3, [r5, #0]
 8002078:	4013      	ands	r3, r2
 800207a:	428b      	cmp	r3, r1
 800207c:	d31c      	bcc.n	80020b8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	0793      	lsls	r3, r2, #30
 8002082:	d422      	bmi.n	80020ca <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002084:	07d2      	lsls	r2, r2, #31
 8002086:	d42f      	bmi.n	80020e8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	2301      	movs	r3, #1
 800208a:	682a      	ldr	r2, [r5, #0]
 800208c:	401a      	ands	r2, r3
 800208e:	42b2      	cmp	r2, r6
 8002090:	d851      	bhi.n	8002136 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	4d30      	ldr	r5, [pc, #192]	@ (8002158 <HAL_RCC_ClockConfig+0xf4>)
 8002096:	075b      	lsls	r3, r3, #29
 8002098:	d454      	bmi.n	8002144 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800209a:	f7ff ffbd 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800209e:	686b      	ldr	r3, [r5, #4]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	@ (800215c <HAL_RCC_ClockConfig+0xf8>)
 80020a2:	061b      	lsls	r3, r3, #24
 80020a4:	0f1b      	lsrs	r3, r3, #28
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	492d      	ldr	r1, [pc, #180]	@ (8002160 <HAL_RCC_ClockConfig+0xfc>)
 80020aa:	40d8      	lsrs	r0, r3
 80020ac:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f7ff f9a6 	bl	8001400 <HAL_InitTick>
  return HAL_OK;
 80020b4:	2000      	movs	r0, #0
 80020b6:	e7db      	b.n	8002070 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	4393      	bics	r3, r2
 80020bc:	430b      	orrs	r3, r1
 80020be:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	4013      	ands	r3, r2
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d1d2      	bne.n	800206e <HAL_RCC_ClockConfig+0xa>
 80020c8:	e7d9      	b.n	800207e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ca:	4923      	ldr	r1, [pc, #140]	@ (8002158 <HAL_RCC_ClockConfig+0xf4>)
 80020cc:	0753      	lsls	r3, r2, #29
 80020ce:	d504      	bpl.n	80020da <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020d0:	23e0      	movs	r3, #224	@ 0xe0
 80020d2:	6848      	ldr	r0, [r1, #4]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4303      	orrs	r3, r0
 80020d8:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020da:	20f0      	movs	r0, #240	@ 0xf0
 80020dc:	684b      	ldr	r3, [r1, #4]
 80020de:	4383      	bics	r3, r0
 80020e0:	68a0      	ldr	r0, [r4, #8]
 80020e2:	4303      	orrs	r3, r0
 80020e4:	604b      	str	r3, [r1, #4]
 80020e6:	e7cd      	b.n	8002084 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	4f1b      	ldr	r7, [pc, #108]	@ (8002158 <HAL_RCC_ClockConfig+0xf4>)
 80020ea:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ec:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	2a01      	cmp	r2, #1
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	039b      	lsls	r3, r3, #14
 80020f4:	d5bb      	bpl.n	800206e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	2103      	movs	r1, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	438b      	bics	r3, r1
 80020fc:	4313      	orrs	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002100:	f7ff f9be 	bl	8001480 <HAL_GetTick>
 8002104:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	230c      	movs	r3, #12
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	401a      	ands	r2, r3
 800210c:	6863      	ldr	r3, [r4, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d0b9      	beq.n	8002088 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff f9b4 	bl	8001480 <HAL_GetTick>
 8002118:	9b01      	ldr	r3, [sp, #4]
 800211a:	1ac0      	subs	r0, r0, r3
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_RCC_ClockConfig+0x100>)
 800211e:	4298      	cmp	r0, r3
 8002120:	d9f1      	bls.n	8002106 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002122:	2003      	movs	r0, #3
 8002124:	e7a4      	b.n	8002070 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	2a02      	cmp	r2, #2
 8002128:	d102      	bne.n	8002130 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	019b      	lsls	r3, r3, #6
 800212c:	d4e3      	bmi.n	80020f6 <HAL_RCC_ClockConfig+0x92>
 800212e:	e79e      	b.n	800206e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	079b      	lsls	r3, r3, #30
 8002132:	d4e0      	bmi.n	80020f6 <HAL_RCC_ClockConfig+0x92>
 8002134:	e79b      	b.n	800206e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	682a      	ldr	r2, [r5, #0]
 8002138:	439a      	bics	r2, r3
 800213a:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213c:	682a      	ldr	r2, [r5, #0]
 800213e:	421a      	tst	r2, r3
 8002140:	d0a7      	beq.n	8002092 <HAL_RCC_ClockConfig+0x2e>
 8002142:	e794      	b.n	800206e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	686b      	ldr	r3, [r5, #4]
 8002146:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <HAL_RCC_ClockConfig+0x104>)
 8002148:	4013      	ands	r3, r2
 800214a:	68e2      	ldr	r2, [r4, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	606b      	str	r3, [r5, #4]
 8002150:	e7a3      	b.n	800209a <HAL_RCC_ClockConfig+0x36>
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	08002f00 	.word	0x08002f00
 8002160:	20000004 	.word	0x20000004
 8002164:	00001388 	.word	0x00001388
 8002168:	fffff8ff 	.word	0xfffff8ff

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4905      	ldr	r1, [pc, #20]	@ (8002188 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002174:	055b      	lsls	r3, r3, #21
 8002176:	0f5b      	lsrs	r3, r3, #29
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	6810      	ldr	r0, [r2, #0]
 800217c:	40d8      	lsrs	r0, r3
}    
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	20000004 	.word	0x20000004
 8002188:	08002ef8 	.word	0x08002ef8

0800218c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800218e:	6803      	ldr	r3, [r0, #0]
{
 8002190:	0005      	movs	r5, r0
 8002192:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002194:	03db      	lsls	r3, r3, #15
 8002196:	d52b      	bpl.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002198:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219c:	4c38      	ldr	r4, [pc, #224]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800219e:	0552      	lsls	r2, r2, #21
 80021a0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a4:	4213      	tst	r3, r2
 80021a6:	d108      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	69e3      	ldr	r3, [r4, #28]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61e3      	str	r3, [r4, #28]
 80021ae:	69e3      	ldr	r3, [r4, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	9303      	str	r3, [sp, #12]
 80021b4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	2780      	movs	r7, #128	@ 0x80
 80021bc:	4e31      	ldr	r6, [pc, #196]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80021be:	007f      	lsls	r7, r7, #1
 80021c0:	6833      	ldr	r3, [r6, #0]
 80021c2:	423b      	tst	r3, r7
 80021c4:	d022      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021c6:	6a21      	ldr	r1, [r4, #32]
 80021c8:	22c0      	movs	r2, #192	@ 0xc0
 80021ca:	0008      	movs	r0, r1
 80021cc:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ce:	686b      	ldr	r3, [r5, #4]
 80021d0:	4e2d      	ldr	r6, [pc, #180]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d2:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d4:	4211      	tst	r1, r2
 80021d6:	d12b      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d8:	6a23      	ldr	r3, [r4, #32]
 80021da:	686a      	ldr	r2, [r5, #4]
 80021dc:	4033      	ands	r3, r6
 80021de:	4313      	orrs	r3, r2
 80021e0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e2:	9b00      	ldr	r3, [sp, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d103      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	69e3      	ldr	r3, [r4, #28]
 80021ea:	4a28      	ldr	r2, [pc, #160]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f0:	682a      	ldr	r2, [r5, #0]
 80021f2:	07d3      	lsls	r3, r2, #31
 80021f4:	d506      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f6:	2003      	movs	r0, #3
 80021f8:	4921      	ldr	r1, [pc, #132]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80021fa:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80021fc:	4383      	bics	r3, r0
 80021fe:	68a8      	ldr	r0, [r5, #8]
 8002200:	4303      	orrs	r3, r0
 8002202:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002204:	0692      	lsls	r2, r2, #26
 8002206:	d433      	bmi.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe4>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002208:	2000      	movs	r0, #0
 800220a:	e00f      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	433b      	orrs	r3, r7
 8002210:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002212:	f7ff f935 	bl	8001480 <HAL_GetTick>
 8002216:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	6833      	ldr	r3, [r6, #0]
 800221a:	423b      	tst	r3, r7
 800221c:	d1d3      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7ff f92f 	bl	8001480 <HAL_GetTick>
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	1ac0      	subs	r0, r0, r3
 8002226:	2864      	cmp	r0, #100	@ 0x64
 8002228:	d9f6      	bls.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800222a:	2003      	movs	r0, #3
}
 800222c:	b005      	add	sp, #20
 800222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002230:	4013      	ands	r3, r2
 8002232:	4283      	cmp	r3, r0
 8002234:	d0d0      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002236:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002238:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800223a:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800223c:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	0252      	lsls	r2, r2, #9
 8002240:	4302      	orrs	r2, r0
 8002242:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002244:	6a22      	ldr	r2, [r4, #32]
 8002246:	4812      	ldr	r0, [pc, #72]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002248:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224a:	4002      	ands	r2, r0
 800224c:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 800224e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002250:	07db      	lsls	r3, r3, #31
 8002252:	d5c1      	bpl.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8002254:	f7ff f914 	bl	8001480 <HAL_GetTick>
 8002258:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	2202      	movs	r2, #2
 800225c:	6a23      	ldr	r3, [r4, #32]
 800225e:	4213      	tst	r3, r2
 8002260:	d1ba      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff f90d 	bl	8001480 <HAL_GetTick>
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002268:	1bc0      	subs	r0, r0, r7
 800226a:	4298      	cmp	r0, r3
 800226c:	d9f5      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800226e:	e7dc      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002270:	2110      	movs	r1, #16
 8002272:	4a03      	ldr	r2, [pc, #12]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002274:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002276:	438b      	bics	r3, r1
 8002278:	68e9      	ldr	r1, [r5, #12]
 800227a:	430b      	orrs	r3, r1
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	e7c3      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	fffffcff 	.word	0xfffffcff
 800228c:	efffffff 	.word	0xefffffff
 8002290:	fffeffff 	.word	0xfffeffff
 8002294:	00001388 	.word	0x00001388

08002298 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	000e      	movs	r6, r1
 800229c:	b085      	sub	sp, #20
 800229e:	0015      	movs	r5, r2
 80022a0:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022a2:	f7ff f8ed 	bl	8001480 <HAL_GetTick>
 80022a6:	19ad      	adds	r5, r5, r6
 80022a8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80022aa:	f7ff f8e9 	bl	8001480 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ae:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022b0:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80022b2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	015b      	lsls	r3, r3, #5
 80022b8:	0d1b      	lsrs	r3, r3, #20
 80022ba:	436b      	muls	r3, r5
 80022bc:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	6893      	ldr	r3, [r2, #8]
 80022c2:	0018      	movs	r0, r3
 80022c4:	4038      	ands	r0, r7
 80022c6:	423b      	tst	r3, r7
 80022c8:	d032      	beq.n	8002330 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022ca:	1c73      	adds	r3, r6, #1
 80022cc:	d0f8      	beq.n	80022c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022ce:	f7ff f8d7 	bl	8001480 <HAL_GetTick>
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	1ac0      	subs	r0, r0, r3
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d32c      	bcc.n	8002334 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022da:	21e0      	movs	r1, #224	@ 0xe0
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	438a      	bics	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e4:	2282      	movs	r2, #130	@ 0x82
 80022e6:	6861      	ldr	r1, [r4, #4]
 80022e8:	0052      	lsls	r2, r2, #1
 80022ea:	4291      	cmp	r1, r2
 80022ec:	d10c      	bne.n	8002308 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 80022ee:	2180      	movs	r1, #128	@ 0x80
 80022f0:	68a2      	ldr	r2, [r4, #8]
 80022f2:	0209      	lsls	r1, r1, #8
 80022f4:	428a      	cmp	r2, r1
 80022f6:	d003      	beq.n	8002300 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f8:	2180      	movs	r1, #128	@ 0x80
 80022fa:	00c9      	lsls	r1, r1, #3
 80022fc:	428a      	cmp	r2, r1
 80022fe:	d103      	bne.n	8002308 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002300:	2140      	movs	r1, #64	@ 0x40
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800230c:	0189      	lsls	r1, r1, #6
 800230e:	428a      	cmp	r2, r1
 8002310:	d106      	bne.n	8002320 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	480d      	ldr	r0, [pc, #52]	@ (800234c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8002316:	4001      	ands	r1, r0
 8002318:	6019      	str	r1, [r3, #0]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002320:	0023      	movs	r3, r4
 8002322:	2201      	movs	r2, #1
 8002324:	335d      	adds	r3, #93	@ 0x5d
 8002326:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002328:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 800232a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800232c:	345c      	adds	r4, #92	@ 0x5c
 800232e:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8002330:	b005      	add	sp, #20
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002334:	9b03      	ldr	r3, [sp, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 800233a:	002b      	movs	r3, r5
      count--;
 800233c:	9a03      	ldr	r2, [sp, #12]
 800233e:	001d      	movs	r5, r3
 8002340:	3a01      	subs	r2, #1
 8002342:	9203      	str	r2, [sp, #12]
 8002344:	e7bb      	b.n	80022be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	20000004 	.word	0x20000004
 800234c:	ffffdfff 	.word	0xffffdfff

08002350 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002354:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002356:	b085      	sub	sp, #20
 8002358:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 800235a:	ab02      	add	r3, sp, #8
 800235c:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800235e:	0004      	movs	r4, r0
 8002360:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002362:	f7ff f88d 	bl	8001480 <HAL_GetTick>
 8002366:	19ed      	adds	r5, r5, r7
 8002368:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800236a:	f7ff f889 	bl	8001480 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800236e:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002370:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8002372:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002374:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002376:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4353      	muls	r3, r2
 800237c:	0d1b      	lsrs	r3, r3, #20
 800237e:	436b      	muls	r3, r5
 8002380:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002382:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8002384:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8002386:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8002388:	688b      	ldr	r3, [r1, #8]
 800238a:	0018      	movs	r0, r3
 800238c:	4030      	ands	r0, r6
 800238e:	4233      	tst	r3, r6
 8002390:	d03b      	beq.n	800240a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002392:	23c0      	movs	r3, #192	@ 0xc0
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	429e      	cmp	r6, r3
 8002398:	d104      	bne.n	80023a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 800239a:	9b01      	ldr	r3, [sp, #4]
 800239c:	7b1b      	ldrb	r3, [r3, #12]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80023a2:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023a4:	1c7b      	adds	r3, r7, #1
 80023a6:	d0ef      	beq.n	8002388 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a8:	f7ff f86a 	bl	8001480 <HAL_GetTick>
 80023ac:	9b00      	ldr	r3, [sp, #0]
 80023ae:	1ac0      	subs	r0, r0, r3
 80023b0:	42a8      	cmp	r0, r5
 80023b2:	d32c      	bcc.n	800240e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023b4:	21e0      	movs	r1, #224	@ 0xe0
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	438a      	bics	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023be:	2282      	movs	r2, #130	@ 0x82
 80023c0:	6861      	ldr	r1, [r4, #4]
 80023c2:	0052      	lsls	r2, r2, #1
 80023c4:	4291      	cmp	r1, r2
 80023c6:	d10c      	bne.n	80023e2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	68a2      	ldr	r2, [r4, #8]
 80023cc:	0209      	lsls	r1, r1, #8
 80023ce:	428a      	cmp	r2, r1
 80023d0:	d003      	beq.n	80023da <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	00c9      	lsls	r1, r1, #3
 80023d6:	428a      	cmp	r2, r1
 80023d8:	d103      	bne.n	80023e2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023da:	2140      	movs	r1, #64	@ 0x40
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	438a      	bics	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023e2:	2180      	movs	r1, #128	@ 0x80
 80023e4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80023e6:	0189      	lsls	r1, r1, #6
 80023e8:	428a      	cmp	r2, r1
 80023ea:	d106      	bne.n	80023fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	480d      	ldr	r0, [pc, #52]	@ (8002424 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 80023f0:	4001      	ands	r1, r0
 80023f2:	6019      	str	r1, [r3, #0]
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023fa:	0023      	movs	r3, r4
 80023fc:	2201      	movs	r2, #1
 80023fe:	335d      	adds	r3, #93	@ 0x5d
 8002400:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002402:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8002404:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002406:	345c      	adds	r4, #92	@ 0x5c
 8002408:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 800240a:	b005      	add	sp, #20
 800240c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d000      	beq.n	8002416 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8002414:	002b      	movs	r3, r5
      count--;
 8002416:	9a03      	ldr	r2, [sp, #12]
 8002418:	001d      	movs	r5, r3
 800241a:	3a01      	subs	r2, #1
 800241c:	9203      	str	r2, [sp, #12]
 800241e:	e7b0      	b.n	8002382 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8002420:	20000004 	.word	0x20000004
 8002424:	ffffdfff 	.word	0xffffdfff

08002428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800242a:	0013      	movs	r3, r2
{
 800242c:	000d      	movs	r5, r1
 800242e:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002430:	000a      	movs	r2, r1
 8002432:	21c0      	movs	r1, #192	@ 0xc0
 8002434:	0149      	lsls	r1, r1, #5
{
 8002436:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002438:	f7ff ff8a 	bl	8002350 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800243c:	2800      	cmp	r0, #0
 800243e:	d005      	beq.n	800244c <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002440:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8002442:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002444:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002446:	4313      	orrs	r3, r2
 8002448:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800244a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800244c:	0032      	movs	r2, r6
 800244e:	0029      	movs	r1, r5
 8002450:	0020      	movs	r0, r4
 8002452:	f7ff ff21 	bl	8002298 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002456:	2800      	cmp	r0, #0
 8002458:	d1f2      	bne.n	8002440 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800245a:	21c0      	movs	r1, #192	@ 0xc0
 800245c:	0033      	movs	r3, r6
 800245e:	002a      	movs	r2, r5
 8002460:	0020      	movs	r0, r4
 8002462:	00c9      	lsls	r1, r1, #3
 8002464:	f7ff ff74 	bl	8002350 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002468:	2800      	cmp	r0, #0
 800246a:	d0ee      	beq.n	800244a <SPI_EndRxTxTransaction+0x22>
 800246c:	e7e8      	b.n	8002440 <SPI_EndRxTxTransaction+0x18>
	...

08002470 <HAL_SPI_Init>:
{
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002474:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002476:	2c00      	cmp	r4, #0
 8002478:	d067      	beq.n	800254a <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800247a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800247c:	2b00      	cmp	r3, #0
 800247e:	d165      	bne.n	800254c <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002480:	2282      	movs	r2, #130	@ 0x82
 8002482:	6861      	ldr	r1, [r4, #4]
 8002484:	0052      	lsls	r2, r2, #1
 8002486:	4291      	cmp	r1, r2
 8002488:	d000      	beq.n	800248c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800248a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800248e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002492:	355d      	adds	r5, #93	@ 0x5d
 8002494:	782b      	ldrb	r3, [r5, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800249c:	0023      	movs	r3, r4
 800249e:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80024a0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80024a2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80024a4:	f7fe fefe 	bl	80012a4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80024a8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80024aa:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80024ac:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80024ae:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024b0:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80024b2:	680b      	ldr	r3, [r1, #0]
 80024b4:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024b6:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 80024b8:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ba:	00d2      	lsls	r2, r2, #3
 80024bc:	2300      	movs	r3, #0
 80024be:	4296      	cmp	r6, r2
 80024c0:	d948      	bls.n	8002554 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024c2:	22f0      	movs	r2, #240	@ 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024c4:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	4296      	cmp	r6, r2
 80024ca:	d000      	beq.n	80024ce <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024ce:	2282      	movs	r2, #130	@ 0x82
 80024d0:	2784      	movs	r7, #132	@ 0x84
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	0052      	lsls	r2, r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	68a2      	ldr	r2, [r4, #8]
 80024da:	023f      	lsls	r7, r7, #8
 80024dc:	403a      	ands	r2, r7
 80024de:	2702      	movs	r7, #2
 80024e0:	4313      	orrs	r3, r2
 80024e2:	6922      	ldr	r2, [r4, #16]
 80024e4:	69a5      	ldr	r5, [r4, #24]
 80024e6:	403a      	ands	r2, r7
 80024e8:	4313      	orrs	r3, r2
 80024ea:	2201      	movs	r2, #1
 80024ec:	6967      	ldr	r7, [r4, #20]
 80024ee:	4017      	ands	r7, r2
 80024f0:	433b      	orrs	r3, r7
 80024f2:	2780      	movs	r7, #128	@ 0x80
 80024f4:	00bf      	lsls	r7, r7, #2
 80024f6:	402f      	ands	r7, r5
 80024f8:	433b      	orrs	r3, r7
 80024fa:	69e7      	ldr	r7, [r4, #28]
 80024fc:	3237      	adds	r2, #55	@ 0x37
 80024fe:	4017      	ands	r7, r2
 8002500:	433b      	orrs	r3, r7
 8002502:	6a27      	ldr	r7, [r4, #32]
 8002504:	3248      	adds	r2, #72	@ 0x48
 8002506:	4017      	ands	r7, r2
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	433b      	orrs	r3, r7
 800250c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800250e:	0192      	lsls	r2, r2, #6
 8002510:	4017      	ands	r7, r2
 8002512:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002514:	2710      	movs	r7, #16
 8002516:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002518:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800251a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800251c:	0c2d      	lsrs	r5, r5, #16
 800251e:	403b      	ands	r3, r7
 8002520:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8002522:	4017      	ands	r7, r2
 8002524:	433b      	orrs	r3, r7
 8002526:	27f0      	movs	r7, #240	@ 0xf0
 8002528:	013f      	lsls	r7, r7, #4
 800252a:	403e      	ands	r6, r7
 800252c:	4333      	orrs	r3, r6
 800252e:	2604      	movs	r6, #4
 8002530:	4035      	ands	r5, r6
 8002532:	432b      	orrs	r3, r5
 8002534:	4303      	orrs	r3, r0
 8002536:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002538:	69cb      	ldr	r3, [r1, #28]
 800253a:	4808      	ldr	r0, [pc, #32]	@ (800255c <HAL_SPI_Init+0xec>)
 800253c:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800253e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002540:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002542:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002544:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002546:	345d      	adds	r4, #93	@ 0x5d
 8002548:	7023      	strb	r3, [r4, #0]
}
 800254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002550:	6163      	str	r3, [r4, #20]
 8002552:	e79b      	b.n	800248c <HAL_SPI_Init+0x1c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002554:	2080      	movs	r0, #128	@ 0x80
 8002556:	0140      	lsls	r0, r0, #5
 8002558:	e7b6      	b.n	80024c8 <HAL_SPI_Init+0x58>
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	fffff7ff 	.word	0xfffff7ff

08002560 <HAL_SPI_Transmit>:
{
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8002566:	0003      	movs	r3, r0
 8002568:	335c      	adds	r3, #92	@ 0x5c
{
 800256a:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 800256c:	781a      	ldrb	r2, [r3, #0]
{
 800256e:	0004      	movs	r4, r0
 8002570:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8002572:	2702      	movs	r7, #2
 8002574:	2a01      	cmp	r2, #1
 8002576:	d100      	bne.n	800257a <HAL_SPI_Transmit+0x1a>
 8002578:	e082      	b.n	8002680 <HAL_SPI_Transmit+0x120>
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800257e:	f7fe ff7f 	bl	8001480 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002582:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002584:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8002586:	335d      	adds	r3, #93	@ 0x5d
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	b2d7      	uxtb	r7, r2
 800258c:	2a01      	cmp	r2, #1
 800258e:	d000      	beq.n	8002592 <HAL_SPI_Transmit+0x32>
 8002590:	e0a6      	b.n	80026e0 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8002592:	2d00      	cmp	r5, #0
 8002594:	d071      	beq.n	800267a <HAL_SPI_Transmit+0x11a>
 8002596:	2e00      	cmp	r6, #0
 8002598:	d06f      	beq.n	800267a <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800259a:	3202      	adds	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259e:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80025a0:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025a4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025a6:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80025a8:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80025aa:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 80025ac:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80025ae:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80025b0:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 80025b6:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80025b8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ba:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 80025bc:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025be:	4291      	cmp	r1, r2
 80025c0:	d108      	bne.n	80025d4 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80025c2:	2140      	movs	r1, #64	@ 0x40
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	438a      	bics	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ca:	2280      	movs	r2, #128	@ 0x80
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	01d2      	lsls	r2, r2, #7
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d4:	2240      	movs	r2, #64	@ 0x40
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	4211      	tst	r1, r2
 80025da:	d102      	bne.n	80025e2 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e2:	21e0      	movs	r1, #224	@ 0xe0
 80025e4:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e6:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e8:	00c9      	lsls	r1, r1, #3
 80025ea:	4288      	cmp	r0, r1
 80025ec:	d94b      	bls.n	8002686 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_SPI_Transmit+0x96>
 80025f2:	2e01      	cmp	r6, #1
 80025f4:	d107      	bne.n	8002606 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80025fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fe:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002600:	3b01      	subs	r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002606:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8002608:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800260a:	2b00      	cmp	r3, #0
 800260c:	d119      	bne.n	8002642 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800260e:	0020      	movs	r0, r4
 8002610:	9a01      	ldr	r2, [sp, #4]
 8002612:	9900      	ldr	r1, [sp, #0]
 8002614:	f7ff ff08 	bl	8002428 <SPI_EndRxTxTransaction>
 8002618:	2800      	cmp	r0, #0
 800261a:	d15e      	bne.n	80026da <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800261c:	68a3      	ldr	r3, [r4, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	9203      	str	r2, [sp, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	9303      	str	r3, [sp, #12]
 800262e:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002630:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002632:	2a00      	cmp	r2, #0
 8002634:	d121      	bne.n	800267a <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8002636:	0023      	movs	r3, r4
 8002638:	2101      	movs	r1, #1
 800263a:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800263c:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 800263e:	7019      	strb	r1, [r3, #0]
 8002640:	e01b      	b.n	800267a <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	6893      	ldr	r3, [r2, #8]
 8002646:	422b      	tst	r3, r5
 8002648:	d009      	beq.n	800265e <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800264c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800264e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002650:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002654:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002656:	3b01      	subs	r3, #1
 8002658:	b29b      	uxth	r3, r3
 800265a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800265c:	e7d4      	b.n	8002608 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800265e:	f7fe ff0f 	bl	8001480 <HAL_GetTick>
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	1ac0      	subs	r0, r0, r3
 8002666:	9b00      	ldr	r3, [sp, #0]
 8002668:	4298      	cmp	r0, r3
 800266a:	d3cd      	bcc.n	8002608 <HAL_SPI_Transmit+0xa8>
 800266c:	3301      	adds	r3, #1
 800266e:	d0cb      	beq.n	8002608 <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8002670:	0023      	movs	r3, r4
 8002672:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8002674:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8002676:	335d      	adds	r3, #93	@ 0x5d
 8002678:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800267a:	2300      	movs	r3, #0
 800267c:	345c      	adds	r4, #92	@ 0x5c
 800267e:	7023      	strb	r3, [r4, #0]
}
 8002680:	0038      	movs	r0, r7
 8002682:	b005      	add	sp, #20
 8002684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002686:	2a00      	cmp	r2, #0
 8002688:	d001      	beq.n	800268e <HAL_SPI_Transmit+0x12e>
 800268a:	2e01      	cmp	r6, #1
 800268c:	d108      	bne.n	80026a0 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268e:	782a      	ldrb	r2, [r5, #0]
 8002690:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002692:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002694:	3301      	adds	r3, #1
 8002696:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002698:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800269a:	3b01      	subs	r3, #1
 800269c:	b29b      	uxth	r3, r3
 800269e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a0:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80026a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0b2      	beq.n	800260e <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	422a      	tst	r2, r5
 80026ae:	d00a      	beq.n	80026c6 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026b6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026b8:	3301      	adds	r3, #1
 80026ba:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80026bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80026c4:	e7ed      	b.n	80026a2 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c6:	f7fe fedb 	bl	8001480 <HAL_GetTick>
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	1ac0      	subs	r0, r0, r3
 80026ce:	9b00      	ldr	r3, [sp, #0]
 80026d0:	4298      	cmp	r0, r3
 80026d2:	d3e6      	bcc.n	80026a2 <HAL_SPI_Transmit+0x142>
 80026d4:	3301      	adds	r3, #1
 80026d6:	d0e4      	beq.n	80026a2 <HAL_SPI_Transmit+0x142>
 80026d8:	e7ca      	b.n	8002670 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026da:	2320      	movs	r3, #32
 80026dc:	6623      	str	r3, [r4, #96]	@ 0x60
 80026de:	e79d      	b.n	800261c <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 80026e0:	2702      	movs	r7, #2
 80026e2:	e7ca      	b.n	800267a <HAL_SPI_Transmit+0x11a>

080026e4 <HAL_SPI_TransmitReceive>:
{
 80026e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026e6:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80026e8:	0003      	movs	r3, r0
 80026ea:	335c      	adds	r3, #92	@ 0x5c
{
 80026ec:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80026ee:	781a      	ldrb	r2, [r3, #0]
{
 80026f0:	0004      	movs	r4, r0
 80026f2:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80026f4:	2002      	movs	r0, #2
 80026f6:	2a01      	cmp	r2, #1
 80026f8:	d01b      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x4e>
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80026fe:	f7fe febf 	bl	8001480 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002702:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002704:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8002706:	335d      	adds	r3, #93	@ 0x5d
 8002708:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800270a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800270c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800270e:	2b01      	cmp	r3, #1
 8002710:	d009      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x42>
 8002712:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8002714:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4299      	cmp	r1, r3
 800271a:	d107      	bne.n	800272c <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800271c:	68a3      	ldr	r3, [r4, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <HAL_SPI_TransmitReceive+0x48>
 8002722:	2a04      	cmp	r2, #4
 8002724:	d102      	bne.n	800272c <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002726:	2d00      	cmp	r5, #0
 8002728:	d104      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 800272a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800272c:	2300      	movs	r3, #0
 800272e:	345c      	adds	r4, #92	@ 0x5c
 8002730:	7023      	strb	r3, [r4, #0]
}
 8002732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002734:	2f00      	cmp	r7, #0
 8002736:	d0f8      	beq.n	800272a <HAL_SPI_TransmitReceive+0x46>
 8002738:	2e00      	cmp	r6, #0
 800273a:	d0f6      	beq.n	800272a <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800273c:	0023      	movs	r3, r4
 800273e:	335d      	adds	r3, #93	@ 0x5d
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	2a04      	cmp	r2, #4
 8002744:	d001      	beq.n	800274a <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002746:	2205      	movs	r2, #5
 8002748:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 800274a:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274c:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 800274e:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002750:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002752:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002754:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002756:	1da2      	adds	r2, r4, #6
 8002758:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800275a:	22e0      	movs	r2, #224	@ 0xe0
 800275c:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 800275e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002760:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002762:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002764:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8002766:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002768:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800276a:	00d2      	lsls	r2, r2, #3
 800276c:	4290      	cmp	r0, r2
 800276e:	d935      	bls.n	80027dc <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4f60      	ldr	r7, [pc, #384]	@ (80028f4 <HAL_SPI_TransmitReceive+0x210>)
 8002774:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002776:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002778:	2240      	movs	r2, #64	@ 0x40
 800277a:	681f      	ldr	r7, [r3, #0]
 800277c:	4217      	tst	r7, r2
 800277e:	d102      	bne.n	8002786 <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8002780:	681f      	ldr	r7, [r3, #0]
 8002782:	433a      	orrs	r2, r7
 8002784:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002786:	22e0      	movs	r2, #224	@ 0xe0
 8002788:	00d2      	lsls	r2, r2, #3
 800278a:	4290      	cmp	r0, r2
 800278c:	d961      	bls.n	8002852 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800278e:	2900      	cmp	r1, #0
 8002790:	d001      	beq.n	8002796 <HAL_SPI_TransmitReceive+0xb2>
 8002792:	2e01      	cmp	r6, #1
 8002794:	d107      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002796:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002798:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800279c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800279e:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80027a6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027aa:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d119      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x102>
 80027b2:	0023      	movs	r3, r4
 80027b4:	3308      	adds	r3, #8
 80027b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d114      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027bc:	0020      	movs	r0, r4
 80027be:	9a01      	ldr	r2, [sp, #4]
 80027c0:	9908      	ldr	r1, [sp, #32]
 80027c2:	f7ff fe31 	bl	8002428 <SPI_EndRxTxTransaction>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d000      	beq.n	80027cc <HAL_SPI_TransmitReceive+0xe8>
 80027ca:	e08f      	b.n	80028ec <HAL_SPI_TransmitReceive+0x208>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027cc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ab      	bne.n	800272a <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 80027d2:	0023      	movs	r3, r4
 80027d4:	2201      	movs	r2, #1
 80027d6:	335d      	adds	r3, #93	@ 0x5d
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e7a7      	b.n	800272c <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027dc:	2280      	movs	r2, #128	@ 0x80
 80027de:	685f      	ldr	r7, [r3, #4]
 80027e0:	0152      	lsls	r2, r2, #5
 80027e2:	433a      	orrs	r2, r7
 80027e4:	e7c7      	b.n	8002776 <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	6883      	ldr	r3, [r0, #8]
 80027ea:	423b      	tst	r3, r7
 80027ec:	d00e      	beq.n	800280c <HAL_SPI_TransmitReceive+0x128>
 80027ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_SPI_TransmitReceive+0x128>
 80027f4:	2d01      	cmp	r5, #1
 80027f6:	d108      	bne.n	800280a <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027fa:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fc:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fe:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002800:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002802:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002804:	3b01      	subs	r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800280a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800280c:	6883      	ldr	r3, [r0, #8]
 800280e:	0019      	movs	r1, r3
 8002810:	4031      	ands	r1, r6
 8002812:	4233      	tst	r3, r6
 8002814:	d00e      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x150>
 8002816:	0022      	movs	r2, r4
 8002818:	3208      	adds	r2, #8
 800281a:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8002820:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002822:	68c0      	ldr	r0, [r0, #12]
 8002824:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002826:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002828:	3302      	adds	r3, #2
 800282a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800282c:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 800282e:	3b01      	subs	r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002834:	f7fe fe24 	bl	8001480 <HAL_GetTick>
 8002838:	9b01      	ldr	r3, [sp, #4]
 800283a:	1ac0      	subs	r0, r0, r3
 800283c:	9b08      	ldr	r3, [sp, #32]
 800283e:	4298      	cmp	r0, r3
 8002840:	d3b4      	bcc.n	80027ac <HAL_SPI_TransmitReceive+0xc8>
 8002842:	3301      	adds	r3, #1
 8002844:	d0b2      	beq.n	80027ac <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8002846:	0023      	movs	r3, r4
 8002848:	2201      	movs	r2, #1
 800284a:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800284c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800284e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002850:	e76c      	b.n	800272c <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002852:	2900      	cmp	r1, #0
 8002854:	d001      	beq.n	800285a <HAL_SPI_TransmitReceive+0x176>
 8002856:	2e01      	cmp	r6, #1
 8002858:	d108      	bne.n	800286c <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285a:	782a      	ldrb	r2, [r5, #0]
 800285c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800285e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002860:	3301      	adds	r3, #1
 8002862:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002864:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002866:	3b01      	subs	r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800286c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800286e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002870:	002e      	movs	r6, r5
 8002872:	e032      	b.n	80028da <HAL_SPI_TransmitReceive+0x1f6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	423a      	tst	r2, r7
 800287a:	d00f      	beq.n	800289c <HAL_SPI_TransmitReceive+0x1b8>
 800287c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800287e:	2a00      	cmp	r2, #0
 8002880:	d00c      	beq.n	800289c <HAL_SPI_TransmitReceive+0x1b8>
 8002882:	2d01      	cmp	r5, #1
 8002884:	d109      	bne.n	800289a <HAL_SPI_TransmitReceive+0x1b6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002886:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800288c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800288e:	3301      	adds	r3, #1
 8002890:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002892:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002894:	3b01      	subs	r3, #1
 8002896:	b29b      	uxth	r3, r3
 8002898:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800289a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	0011      	movs	r1, r2
 80028a2:	4031      	ands	r1, r6
 80028a4:	4232      	tst	r2, r6
 80028a6:	d00f      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x1e4>
 80028a8:	0022      	movs	r2, r4
 80028aa:	3208      	adds	r2, #8
 80028ac:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 80028b2:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028b4:	7b1b      	ldrb	r3, [r3, #12]
 80028b6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80028b8:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 80028ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028bc:	3301      	adds	r3, #1
 80028be:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80028c0:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028c8:	f7fe fdda 	bl	8001480 <HAL_GetTick>
 80028cc:	9b01      	ldr	r3, [sp, #4]
 80028ce:	1ac0      	subs	r0, r0, r3
 80028d0:	9b08      	ldr	r3, [sp, #32]
 80028d2:	4298      	cmp	r0, r3
 80028d4:	d301      	bcc.n	80028da <HAL_SPI_TransmitReceive+0x1f6>
 80028d6:	3301      	adds	r3, #1
 80028d8:	d1b5      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x162>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1c9      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x190>
 80028e0:	0023      	movs	r3, r4
 80028e2:	3308      	adds	r3, #8
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1c4      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x190>
 80028ea:	e767      	b.n	80027bc <HAL_SPI_TransmitReceive+0xd8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ec:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f0:	6623      	str	r3, [r4, #96]	@ 0x60
 80028f2:	e76b      	b.n	80027cc <HAL_SPI_TransmitReceive+0xe8>
 80028f4:	ffffefff 	.word	0xffffefff

080028f8 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80028fc:	6803      	ldr	r3, [r0, #0]
{
 80028fe:	b530      	push	{r4, r5, lr}
 8002900:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002902:	2041      	movs	r0, #65	@ 0x41
  uint32_t itsource = hspi->Instance->CR2;
 8002904:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002906:	689a      	ldr	r2, [r3, #8]
{
 8002908:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800290a:	4010      	ands	r0, r2
 800290c:	2801      	cmp	r0, #1
 800290e:	d106      	bne.n	800291e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002910:	0648      	lsls	r0, r1, #25
 8002912:	d504      	bpl.n	800291e <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 8002914:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    hspi->TxISR(hspi);
 8002916:	0020      	movs	r0, r4
 8002918:	4798      	blx	r3
}
 800291a:	b005      	add	sp, #20
 800291c:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800291e:	0790      	lsls	r0, r2, #30
 8002920:	d503      	bpl.n	800292a <HAL_SPI_IRQHandler+0x2e>
 8002922:	0608      	lsls	r0, r1, #24
 8002924:	d501      	bpl.n	800292a <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002926:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002928:	e7f5      	b.n	8002916 <HAL_SPI_IRQHandler+0x1a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800292a:	20b0      	movs	r0, #176	@ 0xb0
 800292c:	0040      	lsls	r0, r0, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800292e:	4202      	tst	r2, r0
 8002930:	d0f3      	beq.n	800291a <HAL_SPI_IRQHandler+0x1e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002932:	0688      	lsls	r0, r1, #26
 8002934:	d5f1      	bpl.n	800291a <HAL_SPI_IRQHandler+0x1e>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002936:	0650      	lsls	r0, r2, #25
 8002938:	d50f      	bpl.n	800295a <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800293a:	0020      	movs	r0, r4
 800293c:	305d      	adds	r0, #93	@ 0x5d
 800293e:	7800      	ldrb	r0, [r0, #0]
 8002940:	2803      	cmp	r0, #3
 8002942:	d050      	beq.n	80029e6 <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002944:	2004      	movs	r0, #4
 8002946:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8002948:	4328      	orrs	r0, r5
 800294a:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800294c:	2000      	movs	r0, #0
 800294e:	9000      	str	r0, [sp, #0]
 8002950:	68d8      	ldr	r0, [r3, #12]
 8002952:	9000      	str	r0, [sp, #0]
 8002954:	6898      	ldr	r0, [r3, #8]
 8002956:	9000      	str	r0, [sp, #0]
 8002958:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800295a:	0690      	lsls	r0, r2, #26
 800295c:	d50c      	bpl.n	8002978 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800295e:	2001      	movs	r0, #1
 8002960:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8002962:	4328      	orrs	r0, r5
 8002964:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002966:	2000      	movs	r0, #0
 8002968:	2540      	movs	r5, #64	@ 0x40
 800296a:	9002      	str	r0, [sp, #8]
 800296c:	6898      	ldr	r0, [r3, #8]
 800296e:	9002      	str	r0, [sp, #8]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	43a8      	bics	r0, r5
 8002974:	6018      	str	r0, [r3, #0]
 8002976:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002978:	05d2      	lsls	r2, r2, #23
 800297a:	d508      	bpl.n	800298e <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800297c:	2208      	movs	r2, #8
 800297e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002980:	4302      	orrs	r2, r0
 8002982:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002984:	2200      	movs	r2, #0
 8002986:	9203      	str	r2, [sp, #12]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	9203      	str	r2, [sp, #12]
 800298c:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800298e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002990:	2a00      	cmp	r2, #0
 8002992:	d0c2      	beq.n	800291a <HAL_SPI_IRQHandler+0x1e>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002994:	20e0      	movs	r0, #224	@ 0xe0
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4382      	bics	r2, r0
 800299a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800299c:	0022      	movs	r2, r4
 800299e:	38df      	subs	r0, #223	@ 0xdf
 80029a0:	325d      	adds	r2, #93	@ 0x5d
 80029a2:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80029a4:	3002      	adds	r0, #2
 80029a6:	4201      	tst	r1, r0
 80029a8:	d025      	beq.n	80029f6 <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 80029ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80029b0:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d009      	beq.n	80029ca <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_SPI_IRQHandler+0x104>)
 80029b8:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80029ba:	f7fe fdc9 	bl	8001550 <HAL_DMA_Abort_IT>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d003      	beq.n	80029ca <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029c2:	2340      	movs	r3, #64	@ 0x40
 80029c4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80029c6:	4313      	orrs	r3, r2
 80029c8:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80029ca:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d0a4      	beq.n	800291a <HAL_SPI_IRQHandler+0x1e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_SPI_IRQHandler+0x104>)
 80029d2:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80029d4:	f7fe fdbc 	bl	8001550 <HAL_DMA_Abort_IT>
 80029d8:	2800      	cmp	r0, #0
 80029da:	d09e      	beq.n	800291a <HAL_SPI_IRQHandler+0x1e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029dc:	2340      	movs	r3, #64	@ 0x40
 80029de:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80029e0:	4313      	orrs	r3, r2
 80029e2:	6623      	str	r3, [r4, #96]	@ 0x60
 80029e4:	e799      	b.n	800291a <HAL_SPI_IRQHandler+0x1e>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e6:	2200      	movs	r2, #0
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	9b01      	ldr	r3, [sp, #4]
        return;
 80029f4:	e791      	b.n	800291a <HAL_SPI_IRQHandler+0x1e>
        HAL_SPI_ErrorCallback(hspi);
 80029f6:	0020      	movs	r0, r4
 80029f8:	f7ff ff7e 	bl	80028f8 <HAL_SPI_ErrorCallback>
 80029fc:	e78d      	b.n	800291a <HAL_SPI_IRQHandler+0x1e>
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	08002a05 	.word	0x08002a05

08002a04 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a04:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	0002      	movs	r2, r0
{
 8002a0a:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002a10:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8002a12:	f7ff ff71 	bl	80028f8 <HAL_SPI_ErrorCallback>
}
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a18:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a24:	6801      	ldr	r1, [r0, #0]
 8002a26:	4d12      	ldr	r5, [pc, #72]	@ (8002a70 <UART_EndRxTransfer+0x58>)
 8002a28:	680b      	ldr	r3, [r1, #0]
 8002a2a:	402b      	ands	r3, r5
 8002a2c:	600b      	str	r3, [r1, #0]
 8002a2e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	6801      	ldr	r1, [r0, #0]
 8002a3c:	688b      	ldr	r3, [r1, #8]
 8002a3e:	4393      	bics	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
 8002a42:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a46:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10a      	bne.n	8002a62 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a54:	2410      	movs	r4, #16
 8002a56:	6802      	ldr	r2, [r0, #0]
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	43a3      	bics	r3, r4
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a62:	2220      	movs	r2, #32
 8002a64:	1d03      	adds	r3, r0, #4
 8002a66:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a6c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002a6e:	bd30      	pop	{r4, r5, pc}
 8002a70:	fffffedf 	.word	0xfffffedf

08002a74 <UART_SetConfig>:
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a78:	6925      	ldr	r5, [r4, #16]
 8002a7a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a7c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a7e:	432a      	orrs	r2, r5
 8002a80:	6965      	ldr	r5, [r4, #20]
 8002a82:	69c3      	ldr	r3, [r0, #28]
 8002a84:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a86:	6808      	ldr	r0, [r1, #0]
 8002a88:	4d38      	ldr	r5, [pc, #224]	@ (8002b6c <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a8a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a8c:	4028      	ands	r0, r5
 8002a8e:	4302      	orrs	r2, r0
 8002a90:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a92:	684a      	ldr	r2, [r1, #4]
 8002a94:	4836      	ldr	r0, [pc, #216]	@ (8002b70 <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 8002a96:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a98:	4002      	ands	r2, r0
 8002a9a:	68e0      	ldr	r0, [r4, #12]
 8002a9c:	4302      	orrs	r2, r0
 8002a9e:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aa0:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa2:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002aa4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa6:	4d33      	ldr	r5, [pc, #204]	@ (8002b74 <UART_SetConfig+0x100>)
 8002aa8:	4028      	ands	r0, r5
 8002aaa:	4302      	orrs	r2, r0
 8002aac:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aae:	2103      	movs	r1, #3
 8002ab0:	4a31      	ldr	r2, [pc, #196]	@ (8002b78 <UART_SetConfig+0x104>)
 8002ab2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	2180      	movs	r1, #128	@ 0x80
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	0209      	lsls	r1, r1, #8
 8002abc:	2a02      	cmp	r2, #2
 8002abe:	d849      	bhi.n	8002b54 <UART_SetConfig+0xe0>
 8002ac0:	482e      	ldr	r0, [pc, #184]	@ (8002b7c <UART_SetConfig+0x108>)
 8002ac2:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d121      	bne.n	8002b0c <UART_SetConfig+0x98>
    switch (clocksource)
 8002ac8:	2808      	cmp	r0, #8
 8002aca:	d841      	bhi.n	8002b50 <UART_SetConfig+0xdc>
 8002acc:	f7fd fb1c 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002ad0:	40084044 	.word	0x40084044
 8002ad4:	40404005 	.word	0x40404005
 8002ad8:	09          	.byte	0x09
 8002ad9:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002ada:	f7ff fa9d 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8002ade:	e03d      	b.n	8002b5c <UART_SetConfig+0xe8>
    switch (clocksource)
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ae2:	6861      	ldr	r1, [r4, #4]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	0848      	lsrs	r0, r1, #1
 8002ae8:	1818      	adds	r0, r3, r0
 8002aea:	f7fd fb17 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aee:	0002      	movs	r2, r0
 8002af0:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <UART_SetConfig+0x110>)
 8002af2:	3a10      	subs	r2, #16
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d82b      	bhi.n	8002b50 <UART_SetConfig+0xdc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af8:	230f      	movs	r3, #15
 8002afa:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002afc:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002afe:	439a      	bics	r2, r3
 8002b00:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b02:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002b04:	6822      	ldr	r2, [r4, #0]
 8002b06:	4303      	orrs	r3, r0
 8002b08:	60d3      	str	r3, [r2, #12]
 8002b0a:	e029      	b.n	8002b60 <UART_SetConfig+0xec>
    switch (clocksource)
 8002b0c:	2808      	cmp	r0, #8
 8002b0e:	d81f      	bhi.n	8002b50 <UART_SetConfig+0xdc>
 8002b10:	f7fd fafa 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002b14:	1e051e13 	.word	0x1e051e13
 8002b18:	1e1e1e18 	.word	0x1e1e1e18
 8002b1c:	1b          	.byte	0x1b
 8002b1d:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8002b1e:	4818      	ldr	r0, [pc, #96]	@ (8002b80 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b20:	6861      	ldr	r1, [r4, #4]
 8002b22:	084b      	lsrs	r3, r1, #1
 8002b24:	1818      	adds	r0, r3, r0
 8002b26:	f7fd faf9 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <UART_SetConfig+0x110>)
 8002b2e:	3a10      	subs	r2, #16
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d80d      	bhi.n	8002b50 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	60d8      	str	r0, [r3, #12]
 8002b38:	e012      	b.n	8002b60 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b3a:	f7ff fb17 	bl	800216c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d00e      	beq.n	8002b60 <UART_SetConfig+0xec>
 8002b42:	e7ed      	b.n	8002b20 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b44:	f7ff fa68 	bl	8002018 <HAL_RCC_GetSysClockFreq>
        break;
 8002b48:	e7f9      	b.n	8002b3e <UART_SetConfig+0xca>
    switch (clocksource)
 8002b4a:	2080      	movs	r0, #128	@ 0x80
 8002b4c:	0200      	lsls	r0, r0, #8
 8002b4e:	e7e7      	b.n	8002b20 <UART_SetConfig+0xac>
        ret = HAL_ERROR;
 8002b50:	2001      	movs	r0, #1
 8002b52:	e006      	b.n	8002b62 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d1f0      	bne.n	8002b3a <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b58:	f7ff fb08 	bl	800216c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5c:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002b5e:	d1c0      	bne.n	8002ae2 <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 8002b60:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b66:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	ffff69f3 	.word	0xffff69f3
 8002b70:	ffffcfff 	.word	0xffffcfff
 8002b74:	fffff4ff 	.word	0xfffff4ff
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08002f30 	.word	0x08002f30
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	0000ffef 	.word	0x0000ffef

08002b88 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b88:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002b8a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8c:	071a      	lsls	r2, r3, #28
 8002b8e:	d506      	bpl.n	8002b9e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b90:	6801      	ldr	r1, [r0, #0]
 8002b92:	4c28      	ldr	r4, [pc, #160]	@ (8002c34 <UART_AdvFeatureConfig+0xac>)
 8002b94:	684a      	ldr	r2, [r1, #4]
 8002b96:	4022      	ands	r2, r4
 8002b98:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002b9a:	4322      	orrs	r2, r4
 8002b9c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b9e:	07da      	lsls	r2, r3, #31
 8002ba0:	d506      	bpl.n	8002bb0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ba2:	6801      	ldr	r1, [r0, #0]
 8002ba4:	4c24      	ldr	r4, [pc, #144]	@ (8002c38 <UART_AdvFeatureConfig+0xb0>)
 8002ba6:	684a      	ldr	r2, [r1, #4]
 8002ba8:	4022      	ands	r2, r4
 8002baa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002bac:	4322      	orrs	r2, r4
 8002bae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bb0:	079a      	lsls	r2, r3, #30
 8002bb2:	d506      	bpl.n	8002bc2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bb4:	6801      	ldr	r1, [r0, #0]
 8002bb6:	4c21      	ldr	r4, [pc, #132]	@ (8002c3c <UART_AdvFeatureConfig+0xb4>)
 8002bb8:	684a      	ldr	r2, [r1, #4]
 8002bba:	4022      	ands	r2, r4
 8002bbc:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002bbe:	4322      	orrs	r2, r4
 8002bc0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc2:	075a      	lsls	r2, r3, #29
 8002bc4:	d506      	bpl.n	8002bd4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bc6:	6801      	ldr	r1, [r0, #0]
 8002bc8:	4c1d      	ldr	r4, [pc, #116]	@ (8002c40 <UART_AdvFeatureConfig+0xb8>)
 8002bca:	684a      	ldr	r2, [r1, #4]
 8002bcc:	4022      	ands	r2, r4
 8002bce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002bd0:	4322      	orrs	r2, r4
 8002bd2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bd4:	06da      	lsls	r2, r3, #27
 8002bd6:	d506      	bpl.n	8002be6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bd8:	6801      	ldr	r1, [r0, #0]
 8002bda:	4c1a      	ldr	r4, [pc, #104]	@ (8002c44 <UART_AdvFeatureConfig+0xbc>)
 8002bdc:	688a      	ldr	r2, [r1, #8]
 8002bde:	4022      	ands	r2, r4
 8002be0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002be2:	4322      	orrs	r2, r4
 8002be4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002be6:	069a      	lsls	r2, r3, #26
 8002be8:	d506      	bpl.n	8002bf8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bea:	6801      	ldr	r1, [r0, #0]
 8002bec:	4c16      	ldr	r4, [pc, #88]	@ (8002c48 <UART_AdvFeatureConfig+0xc0>)
 8002bee:	688a      	ldr	r2, [r1, #8]
 8002bf0:	4022      	ands	r2, r4
 8002bf2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002bf4:	4322      	orrs	r2, r4
 8002bf6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf8:	065a      	lsls	r2, r3, #25
 8002bfa:	d510      	bpl.n	8002c1e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bfc:	6801      	ldr	r1, [r0, #0]
 8002bfe:	4d13      	ldr	r5, [pc, #76]	@ (8002c4c <UART_AdvFeatureConfig+0xc4>)
 8002c00:	684a      	ldr	r2, [r1, #4]
 8002c02:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002c04:	402a      	ands	r2, r5
 8002c06:	4322      	orrs	r2, r4
 8002c08:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	0352      	lsls	r2, r2, #13
 8002c0e:	4294      	cmp	r4, r2
 8002c10:	d105      	bne.n	8002c1e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c12:	684a      	ldr	r2, [r1, #4]
 8002c14:	4c0e      	ldr	r4, [pc, #56]	@ (8002c50 <UART_AdvFeatureConfig+0xc8>)
 8002c16:	4022      	ands	r2, r4
 8002c18:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002c1a:	4322      	orrs	r2, r4
 8002c1c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	d506      	bpl.n	8002c30 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c22:	6802      	ldr	r2, [r0, #0]
 8002c24:	490b      	ldr	r1, [pc, #44]	@ (8002c54 <UART_AdvFeatureConfig+0xcc>)
 8002c26:	6853      	ldr	r3, [r2, #4]
 8002c28:	400b      	ands	r3, r1
 8002c2a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6053      	str	r3, [r2, #4]
}
 8002c30:	bd30      	pop	{r4, r5, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	ffff7fff 	.word	0xffff7fff
 8002c38:	fffdffff 	.word	0xfffdffff
 8002c3c:	fffeffff 	.word	0xfffeffff
 8002c40:	fffbffff 	.word	0xfffbffff
 8002c44:	ffffefff 	.word	0xffffefff
 8002c48:	ffffdfff 	.word	0xffffdfff
 8002c4c:	ffefffff 	.word	0xffefffff
 8002c50:	ff9fffff 	.word	0xff9fffff
 8002c54:	fff7ffff 	.word	0xfff7ffff

08002c58 <UART_WaitOnFlagUntilTimeout>:
{
 8002c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c5a:	0004      	movs	r4, r0
 8002c5c:	000d      	movs	r5, r1
 8002c5e:	0017      	movs	r7, r2
 8002c60:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	69d3      	ldr	r3, [r2, #28]
 8002c66:	402b      	ands	r3, r5
 8002c68:	1b5b      	subs	r3, r3, r5
 8002c6a:	4259      	negs	r1, r3
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	42bb      	cmp	r3, r7
 8002c70:	d001      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002c72:	2000      	movs	r0, #0
 8002c74:	e025      	b.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	9b08      	ldr	r3, [sp, #32]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	d0f3      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7fe fc00 	bl	8001480 <HAL_GetTick>
 8002c80:	9b00      	ldr	r3, [sp, #0]
 8002c82:	1ac0      	subs	r0, r0, r3
 8002c84:	9b08      	ldr	r3, [sp, #32]
 8002c86:	4298      	cmp	r0, r3
 8002c88:	d82c      	bhi.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02a      	beq.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	0752      	lsls	r2, r2, #29
 8002c94:	d5e5      	bpl.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xa>
 8002c96:	002a      	movs	r2, r5
 8002c98:	2140      	movs	r1, #64	@ 0x40
 8002c9a:	3a40      	subs	r2, #64	@ 0x40
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	d0e0      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	2608      	movs	r6, #8
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	4031      	ands	r1, r6
 8002ca8:	9101      	str	r1, [sp, #4]
 8002caa:	4232      	tst	r2, r6
 8002cac:	d00a      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 8002cae:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cb0:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8002cb2:	f7ff feb1 	bl	8002a18 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cb6:	19a3      	adds	r3, r4, r6
 8002cb8:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002cba:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8002cbe:	3478      	adds	r4, #120	@ 0x78
 8002cc0:	7023      	strb	r3, [r4, #0]
}
 8002cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cc4:	2280      	movs	r2, #128	@ 0x80
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	4211      	tst	r1, r2
 8002ccc:	d0c9      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cce:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f7ff fea1 	bl	8002a18 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cd6:	0023      	movs	r3, r4
 8002cd8:	2220      	movs	r2, #32
 8002cda:	3308      	adds	r3, #8
 8002cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002cde:	9b01      	ldr	r3, [sp, #4]
 8002ce0:	3478      	adds	r4, #120	@ 0x78
 8002ce2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	e7ec      	b.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0x6a>

08002ce8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce8:	0003      	movs	r3, r0
{
 8002cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	2500      	movs	r5, #0
{
 8002cee:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fbc4 	bl	8001480 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cf8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002cfa:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	071b      	lsls	r3, r3, #28
 8002d00:	d51d      	bpl.n	8002d3e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d02:	2180      	movs	r1, #128	@ 0x80
 8002d04:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <UART_CheckIdleState+0xb8>)
 8002d06:	002a      	movs	r2, r5
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	0389      	lsls	r1, r1, #14
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	0020      	movs	r0, r4
 8002d10:	f7ff ffa2 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 8002d14:	42a8      	cmp	r0, r5
 8002d16:	d012      	beq.n	8002d3e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d22:	2080      	movs	r0, #128	@ 0x80
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	4383      	bics	r3, r0
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002d30:	2320      	movs	r3, #32
 8002d32:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002d34:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002d36:	2300      	movs	r3, #0
 8002d38:	3478      	adds	r4, #120	@ 0x78
 8002d3a:	7023      	strb	r3, [r4, #0]
}
 8002d3c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3e:	0025      	movs	r5, r4
 8002d40:	cd08      	ldmia	r5!, {r3}
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	075b      	lsls	r3, r3, #29
 8002d46:	d523      	bpl.n	8002d90 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d48:	2180      	movs	r1, #128	@ 0x80
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <UART_CheckIdleState+0xb8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	0020      	movs	r0, r4
 8002d52:	0033      	movs	r3, r6
 8002d54:	03c9      	lsls	r1, r1, #15
 8002d56:	f7ff ff7f 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d018      	beq.n	8002d90 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	2201      	movs	r2, #1
 8002d64:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	4e0e      	ldr	r6, [pc, #56]	@ (8002da4 <UART_CheckIdleState+0xbc>)
 8002d6c:	680b      	ldr	r3, [r1, #0]
 8002d6e:	4033      	ands	r3, r6
 8002d70:	600b      	str	r3, [r1, #0]
 8002d72:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	6821      	ldr	r1, [r4, #0]
 8002d80:	688b      	ldr	r3, [r1, #8]
 8002d82:	4393      	bics	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
 8002d86:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002d8e:	e7d1      	b.n	8002d34 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d92:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d94:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d96:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d98:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d9a:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002d9c:	e7cb      	b.n	8002d36 <UART_CheckIdleState+0x4e>
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	01ffffff 	.word	0x01ffffff
 8002da4:	fffffedf 	.word	0xfffffedf

08002da8 <HAL_UART_Init>:
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002dae:	2001      	movs	r0, #1
}
 8002db0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002db8:	0002      	movs	r2, r0
 8002dba:	3278      	adds	r2, #120	@ 0x78
 8002dbc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002dbe:	f7fe faa9 	bl	8001314 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002dc2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	438b      	bics	r3, r1
 8002dce:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002dd6:	0020      	movs	r0, r4
 8002dd8:	f7ff fed6 	bl	8002b88 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ddc:	0020      	movs	r0, r4
 8002dde:	f7ff fe49 	bl	8002a74 <UART_SetConfig>
 8002de2:	2801      	cmp	r0, #1
 8002de4:	d0e3      	beq.n	8002dae <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <HAL_UART_Init+0x60>)
 8002dea:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002dec:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002dee:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002df0:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	438a      	bics	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002e02:	f7ff ff71 	bl	8002ce8 <UART_CheckIdleState>
 8002e06:	e7d3      	b.n	8002db0 <HAL_UART_Init+0x8>
 8002e08:	fffff7ff 	.word	0xfffff7ff

08002e0c <memset>:
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	1882      	adds	r2, r0, r2
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d100      	bne.n	8002e16 <memset+0xa>
 8002e14:	4770      	bx	lr
 8002e16:	7019      	strb	r1, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	e7f9      	b.n	8002e10 <memset+0x4>

08002e1c <__libc_init_array>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	2600      	movs	r6, #0
 8002e20:	4c0c      	ldr	r4, [pc, #48]	@ (8002e54 <__libc_init_array+0x38>)
 8002e22:	4d0d      	ldr	r5, [pc, #52]	@ (8002e58 <__libc_init_array+0x3c>)
 8002e24:	1b64      	subs	r4, r4, r5
 8002e26:	10a4      	asrs	r4, r4, #2
 8002e28:	42a6      	cmp	r6, r4
 8002e2a:	d109      	bne.n	8002e40 <__libc_init_array+0x24>
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	f000 f819 	bl	8002e64 <_init>
 8002e32:	4c0a      	ldr	r4, [pc, #40]	@ (8002e5c <__libc_init_array+0x40>)
 8002e34:	4d0a      	ldr	r5, [pc, #40]	@ (8002e60 <__libc_init_array+0x44>)
 8002e36:	1b64      	subs	r4, r4, r5
 8002e38:	10a4      	asrs	r4, r4, #2
 8002e3a:	42a6      	cmp	r6, r4
 8002e3c:	d105      	bne.n	8002e4a <__libc_init_array+0x2e>
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	00b3      	lsls	r3, r6, #2
 8002e42:	58eb      	ldr	r3, [r5, r3]
 8002e44:	4798      	blx	r3
 8002e46:	3601      	adds	r6, #1
 8002e48:	e7ee      	b.n	8002e28 <__libc_init_array+0xc>
 8002e4a:	00b3      	lsls	r3, r6, #2
 8002e4c:	58eb      	ldr	r3, [r5, r3]
 8002e4e:	4798      	blx	r3
 8002e50:	3601      	adds	r6, #1
 8002e52:	e7f2      	b.n	8002e3a <__libc_init_array+0x1e>
 8002e54:	08002f34 	.word	0x08002f34
 8002e58:	08002f34 	.word	0x08002f34
 8002e5c:	08002f38 	.word	0x08002f38
 8002e60:	08002f34 	.word	0x08002f34

08002e64 <_init>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr

08002e70 <_fini>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr
