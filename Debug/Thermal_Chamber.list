
Thermal_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08002fa8  08002fa8  00003fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003800  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000014  08003814  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08003814  00005598  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd2  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002984  00000000  00000000  0001600e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a330  00000000  00000000  00018992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  00022cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  00023698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000116f9  00000000  00000000  000247f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cd6  00000000  00000000  00035ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00061587  00000000  00000000  00049bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab14e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c50  00000000  00000000  000ab194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f90 	.word	0x08002f90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002f90 	.word	0x08002f90

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_fdiv>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	464f      	mov	r7, r9
 800040c:	4646      	mov	r6, r8
 800040e:	46d6      	mov	lr, sl
 8000410:	0244      	lsls	r4, r0, #9
 8000412:	b5c0      	push	{r6, r7, lr}
 8000414:	0047      	lsls	r7, r0, #1
 8000416:	1c0e      	adds	r6, r1, #0
 8000418:	0a64      	lsrs	r4, r4, #9
 800041a:	0e3f      	lsrs	r7, r7, #24
 800041c:	0fc5      	lsrs	r5, r0, #31
 800041e:	2f00      	cmp	r7, #0
 8000420:	d03c      	beq.n	800049c <__aeabi_fdiv+0x94>
 8000422:	2fff      	cmp	r7, #255	@ 0xff
 8000424:	d042      	beq.n	80004ac <__aeabi_fdiv+0xa4>
 8000426:	2300      	movs	r3, #0
 8000428:	2280      	movs	r2, #128	@ 0x80
 800042a:	4699      	mov	r9, r3
 800042c:	469a      	mov	sl, r3
 800042e:	00e4      	lsls	r4, r4, #3
 8000430:	04d2      	lsls	r2, r2, #19
 8000432:	4314      	orrs	r4, r2
 8000434:	3f7f      	subs	r7, #127	@ 0x7f
 8000436:	0273      	lsls	r3, r6, #9
 8000438:	0a5b      	lsrs	r3, r3, #9
 800043a:	4698      	mov	r8, r3
 800043c:	0073      	lsls	r3, r6, #1
 800043e:	0e1b      	lsrs	r3, r3, #24
 8000440:	0ff6      	lsrs	r6, r6, #31
 8000442:	2b00      	cmp	r3, #0
 8000444:	d01b      	beq.n	800047e <__aeabi_fdiv+0x76>
 8000446:	2bff      	cmp	r3, #255	@ 0xff
 8000448:	d013      	beq.n	8000472 <__aeabi_fdiv+0x6a>
 800044a:	4642      	mov	r2, r8
 800044c:	2180      	movs	r1, #128	@ 0x80
 800044e:	00d2      	lsls	r2, r2, #3
 8000450:	04c9      	lsls	r1, r1, #19
 8000452:	4311      	orrs	r1, r2
 8000454:	4688      	mov	r8, r1
 8000456:	2000      	movs	r0, #0
 8000458:	3b7f      	subs	r3, #127	@ 0x7f
 800045a:	0029      	movs	r1, r5
 800045c:	1aff      	subs	r7, r7, r3
 800045e:	464b      	mov	r3, r9
 8000460:	4071      	eors	r1, r6
 8000462:	b2c9      	uxtb	r1, r1
 8000464:	2b0f      	cmp	r3, #15
 8000466:	d900      	bls.n	800046a <__aeabi_fdiv+0x62>
 8000468:	e0b5      	b.n	80005d6 <__aeabi_fdiv+0x1ce>
 800046a:	4a74      	ldr	r2, [pc, #464]	@ (800063c <__aeabi_fdiv+0x234>)
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	58d3      	ldr	r3, [r2, r3]
 8000470:	469f      	mov	pc, r3
 8000472:	4643      	mov	r3, r8
 8000474:	2b00      	cmp	r3, #0
 8000476:	d13f      	bne.n	80004f8 <__aeabi_fdiv+0xf0>
 8000478:	3fff      	subs	r7, #255	@ 0xff
 800047a:	3302      	adds	r3, #2
 800047c:	e003      	b.n	8000486 <__aeabi_fdiv+0x7e>
 800047e:	4643      	mov	r3, r8
 8000480:	2b00      	cmp	r3, #0
 8000482:	d12d      	bne.n	80004e0 <__aeabi_fdiv+0xd8>
 8000484:	2301      	movs	r3, #1
 8000486:	0029      	movs	r1, r5
 8000488:	464a      	mov	r2, r9
 800048a:	4071      	eors	r1, r6
 800048c:	b2c9      	uxtb	r1, r1
 800048e:	431a      	orrs	r2, r3
 8000490:	2a0e      	cmp	r2, #14
 8000492:	d838      	bhi.n	8000506 <__aeabi_fdiv+0xfe>
 8000494:	486a      	ldr	r0, [pc, #424]	@ (8000640 <__aeabi_fdiv+0x238>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	5882      	ldr	r2, [r0, r2]
 800049a:	4697      	mov	pc, r2
 800049c:	2c00      	cmp	r4, #0
 800049e:	d113      	bne.n	80004c8 <__aeabi_fdiv+0xc0>
 80004a0:	2304      	movs	r3, #4
 80004a2:	4699      	mov	r9, r3
 80004a4:	3b03      	subs	r3, #3
 80004a6:	2700      	movs	r7, #0
 80004a8:	469a      	mov	sl, r3
 80004aa:	e7c4      	b.n	8000436 <__aeabi_fdiv+0x2e>
 80004ac:	2c00      	cmp	r4, #0
 80004ae:	d105      	bne.n	80004bc <__aeabi_fdiv+0xb4>
 80004b0:	2308      	movs	r3, #8
 80004b2:	4699      	mov	r9, r3
 80004b4:	3b06      	subs	r3, #6
 80004b6:	27ff      	movs	r7, #255	@ 0xff
 80004b8:	469a      	mov	sl, r3
 80004ba:	e7bc      	b.n	8000436 <__aeabi_fdiv+0x2e>
 80004bc:	230c      	movs	r3, #12
 80004be:	4699      	mov	r9, r3
 80004c0:	3b09      	subs	r3, #9
 80004c2:	27ff      	movs	r7, #255	@ 0xff
 80004c4:	469a      	mov	sl, r3
 80004c6:	e7b6      	b.n	8000436 <__aeabi_fdiv+0x2e>
 80004c8:	0020      	movs	r0, r4
 80004ca:	f000 fc0b 	bl	8000ce4 <__clzsi2>
 80004ce:	2776      	movs	r7, #118	@ 0x76
 80004d0:	1f43      	subs	r3, r0, #5
 80004d2:	409c      	lsls	r4, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	427f      	negs	r7, r7
 80004d8:	4699      	mov	r9, r3
 80004da:	469a      	mov	sl, r3
 80004dc:	1a3f      	subs	r7, r7, r0
 80004de:	e7aa      	b.n	8000436 <__aeabi_fdiv+0x2e>
 80004e0:	4640      	mov	r0, r8
 80004e2:	f000 fbff 	bl	8000ce4 <__clzsi2>
 80004e6:	4642      	mov	r2, r8
 80004e8:	1f43      	subs	r3, r0, #5
 80004ea:	409a      	lsls	r2, r3
 80004ec:	2376      	movs	r3, #118	@ 0x76
 80004ee:	425b      	negs	r3, r3
 80004f0:	1a1b      	subs	r3, r3, r0
 80004f2:	4690      	mov	r8, r2
 80004f4:	2000      	movs	r0, #0
 80004f6:	e7b0      	b.n	800045a <__aeabi_fdiv+0x52>
 80004f8:	2303      	movs	r3, #3
 80004fa:	464a      	mov	r2, r9
 80004fc:	431a      	orrs	r2, r3
 80004fe:	4691      	mov	r9, r2
 8000500:	2003      	movs	r0, #3
 8000502:	33fc      	adds	r3, #252	@ 0xfc
 8000504:	e7a9      	b.n	800045a <__aeabi_fdiv+0x52>
 8000506:	000d      	movs	r5, r1
 8000508:	20ff      	movs	r0, #255	@ 0xff
 800050a:	2200      	movs	r2, #0
 800050c:	05c0      	lsls	r0, r0, #23
 800050e:	07ed      	lsls	r5, r5, #31
 8000510:	4310      	orrs	r0, r2
 8000512:	4328      	orrs	r0, r5
 8000514:	bce0      	pop	{r5, r6, r7}
 8000516:	46ba      	mov	sl, r7
 8000518:	46b1      	mov	r9, r6
 800051a:	46a8      	mov	r8, r5
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	000d      	movs	r5, r1
 8000520:	2000      	movs	r0, #0
 8000522:	2200      	movs	r2, #0
 8000524:	e7f2      	b.n	800050c <__aeabi_fdiv+0x104>
 8000526:	4653      	mov	r3, sl
 8000528:	2b02      	cmp	r3, #2
 800052a:	d0ed      	beq.n	8000508 <__aeabi_fdiv+0x100>
 800052c:	2b03      	cmp	r3, #3
 800052e:	d033      	beq.n	8000598 <__aeabi_fdiv+0x190>
 8000530:	46a0      	mov	r8, r4
 8000532:	2b01      	cmp	r3, #1
 8000534:	d105      	bne.n	8000542 <__aeabi_fdiv+0x13a>
 8000536:	2000      	movs	r0, #0
 8000538:	2200      	movs	r2, #0
 800053a:	e7e7      	b.n	800050c <__aeabi_fdiv+0x104>
 800053c:	0035      	movs	r5, r6
 800053e:	2803      	cmp	r0, #3
 8000540:	d07a      	beq.n	8000638 <__aeabi_fdiv+0x230>
 8000542:	003b      	movs	r3, r7
 8000544:	337f      	adds	r3, #127	@ 0x7f
 8000546:	2b00      	cmp	r3, #0
 8000548:	dd2d      	ble.n	80005a6 <__aeabi_fdiv+0x19e>
 800054a:	4642      	mov	r2, r8
 800054c:	0752      	lsls	r2, r2, #29
 800054e:	d007      	beq.n	8000560 <__aeabi_fdiv+0x158>
 8000550:	220f      	movs	r2, #15
 8000552:	4641      	mov	r1, r8
 8000554:	400a      	ands	r2, r1
 8000556:	2a04      	cmp	r2, #4
 8000558:	d002      	beq.n	8000560 <__aeabi_fdiv+0x158>
 800055a:	2204      	movs	r2, #4
 800055c:	4694      	mov	ip, r2
 800055e:	44e0      	add	r8, ip
 8000560:	4642      	mov	r2, r8
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	d505      	bpl.n	8000572 <__aeabi_fdiv+0x16a>
 8000566:	4642      	mov	r2, r8
 8000568:	4b36      	ldr	r3, [pc, #216]	@ (8000644 <__aeabi_fdiv+0x23c>)
 800056a:	401a      	ands	r2, r3
 800056c:	003b      	movs	r3, r7
 800056e:	4690      	mov	r8, r2
 8000570:	3380      	adds	r3, #128	@ 0x80
 8000572:	2bfe      	cmp	r3, #254	@ 0xfe
 8000574:	dcc8      	bgt.n	8000508 <__aeabi_fdiv+0x100>
 8000576:	4642      	mov	r2, r8
 8000578:	0192      	lsls	r2, r2, #6
 800057a:	0a52      	lsrs	r2, r2, #9
 800057c:	b2d8      	uxtb	r0, r3
 800057e:	e7c5      	b.n	800050c <__aeabi_fdiv+0x104>
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	2500      	movs	r5, #0
 8000584:	20ff      	movs	r0, #255	@ 0xff
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	e7c0      	b.n	800050c <__aeabi_fdiv+0x104>
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	03d2      	lsls	r2, r2, #15
 800058e:	4214      	tst	r4, r2
 8000590:	d002      	beq.n	8000598 <__aeabi_fdiv+0x190>
 8000592:	4643      	mov	r3, r8
 8000594:	4213      	tst	r3, r2
 8000596:	d049      	beq.n	800062c <__aeabi_fdiv+0x224>
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	03d2      	lsls	r2, r2, #15
 800059c:	4322      	orrs	r2, r4
 800059e:	0252      	lsls	r2, r2, #9
 80005a0:	20ff      	movs	r0, #255	@ 0xff
 80005a2:	0a52      	lsrs	r2, r2, #9
 80005a4:	e7b2      	b.n	800050c <__aeabi_fdiv+0x104>
 80005a6:	2201      	movs	r2, #1
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2b1b      	cmp	r3, #27
 80005ac:	dcc3      	bgt.n	8000536 <__aeabi_fdiv+0x12e>
 80005ae:	4642      	mov	r2, r8
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	4643      	mov	r3, r8
 80005b4:	379e      	adds	r7, #158	@ 0x9e
 80005b6:	40bb      	lsls	r3, r7
 80005b8:	1e59      	subs	r1, r3, #1
 80005ba:	418b      	sbcs	r3, r1
 80005bc:	431a      	orrs	r2, r3
 80005be:	0753      	lsls	r3, r2, #29
 80005c0:	d004      	beq.n	80005cc <__aeabi_fdiv+0x1c4>
 80005c2:	230f      	movs	r3, #15
 80005c4:	4013      	ands	r3, r2
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d000      	beq.n	80005cc <__aeabi_fdiv+0x1c4>
 80005ca:	3204      	adds	r2, #4
 80005cc:	0153      	lsls	r3, r2, #5
 80005ce:	d529      	bpl.n	8000624 <__aeabi_fdiv+0x21c>
 80005d0:	2001      	movs	r0, #1
 80005d2:	2200      	movs	r2, #0
 80005d4:	e79a      	b.n	800050c <__aeabi_fdiv+0x104>
 80005d6:	4642      	mov	r2, r8
 80005d8:	0163      	lsls	r3, r4, #5
 80005da:	0155      	lsls	r5, r2, #5
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d215      	bcs.n	800060c <__aeabi_fdiv+0x204>
 80005e0:	201b      	movs	r0, #27
 80005e2:	2200      	movs	r2, #0
 80005e4:	3f01      	subs	r7, #1
 80005e6:	2601      	movs	r6, #1
 80005e8:	001c      	movs	r4, r3
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	db01      	blt.n	80005f6 <__aeabi_fdiv+0x1ee>
 80005f2:	429d      	cmp	r5, r3
 80005f4:	d801      	bhi.n	80005fa <__aeabi_fdiv+0x1f2>
 80005f6:	1b5b      	subs	r3, r3, r5
 80005f8:	4332      	orrs	r2, r6
 80005fa:	3801      	subs	r0, #1
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d1f3      	bne.n	80005e8 <__aeabi_fdiv+0x1e0>
 8000600:	1e58      	subs	r0, r3, #1
 8000602:	4183      	sbcs	r3, r0
 8000604:	4313      	orrs	r3, r2
 8000606:	4698      	mov	r8, r3
 8000608:	000d      	movs	r5, r1
 800060a:	e79a      	b.n	8000542 <__aeabi_fdiv+0x13a>
 800060c:	201a      	movs	r0, #26
 800060e:	2201      	movs	r2, #1
 8000610:	1b5b      	subs	r3, r3, r5
 8000612:	e7e8      	b.n	80005e6 <__aeabi_fdiv+0x1de>
 8000614:	3b02      	subs	r3, #2
 8000616:	425a      	negs	r2, r3
 8000618:	4153      	adcs	r3, r2
 800061a:	425b      	negs	r3, r3
 800061c:	0035      	movs	r5, r6
 800061e:	2200      	movs	r2, #0
 8000620:	b2d8      	uxtb	r0, r3
 8000622:	e773      	b.n	800050c <__aeabi_fdiv+0x104>
 8000624:	0192      	lsls	r2, r2, #6
 8000626:	2000      	movs	r0, #0
 8000628:	0a52      	lsrs	r2, r2, #9
 800062a:	e76f      	b.n	800050c <__aeabi_fdiv+0x104>
 800062c:	431a      	orrs	r2, r3
 800062e:	0252      	lsls	r2, r2, #9
 8000630:	0035      	movs	r5, r6
 8000632:	20ff      	movs	r0, #255	@ 0xff
 8000634:	0a52      	lsrs	r2, r2, #9
 8000636:	e769      	b.n	800050c <__aeabi_fdiv+0x104>
 8000638:	4644      	mov	r4, r8
 800063a:	e7ad      	b.n	8000598 <__aeabi_fdiv+0x190>
 800063c:	08002fa8 	.word	0x08002fa8
 8000640:	08002fe8 	.word	0x08002fe8
 8000644:	f7ffffff 	.word	0xf7ffffff

08000648 <__aeabi_fmul>:
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	464f      	mov	r7, r9
 800064c:	4646      	mov	r6, r8
 800064e:	46d6      	mov	lr, sl
 8000650:	0243      	lsls	r3, r0, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	0045      	lsls	r5, r0, #1
 8000656:	b5c0      	push	{r6, r7, lr}
 8000658:	4699      	mov	r9, r3
 800065a:	1c0f      	adds	r7, r1, #0
 800065c:	0e2d      	lsrs	r5, r5, #24
 800065e:	0fc6      	lsrs	r6, r0, #31
 8000660:	2d00      	cmp	r5, #0
 8000662:	d100      	bne.n	8000666 <__aeabi_fmul+0x1e>
 8000664:	e088      	b.n	8000778 <__aeabi_fmul+0x130>
 8000666:	2dff      	cmp	r5, #255	@ 0xff
 8000668:	d100      	bne.n	800066c <__aeabi_fmul+0x24>
 800066a:	e08d      	b.n	8000788 <__aeabi_fmul+0x140>
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	04d2      	lsls	r2, r2, #19
 8000672:	431a      	orrs	r2, r3
 8000674:	2300      	movs	r3, #0
 8000676:	4691      	mov	r9, r2
 8000678:	4698      	mov	r8, r3
 800067a:	469a      	mov	sl, r3
 800067c:	3d7f      	subs	r5, #127	@ 0x7f
 800067e:	027c      	lsls	r4, r7, #9
 8000680:	007b      	lsls	r3, r7, #1
 8000682:	0a64      	lsrs	r4, r4, #9
 8000684:	0e1b      	lsrs	r3, r3, #24
 8000686:	0fff      	lsrs	r7, r7, #31
 8000688:	2b00      	cmp	r3, #0
 800068a:	d068      	beq.n	800075e <__aeabi_fmul+0x116>
 800068c:	2bff      	cmp	r3, #255	@ 0xff
 800068e:	d021      	beq.n	80006d4 <__aeabi_fmul+0x8c>
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	00e4      	lsls	r4, r4, #3
 8000694:	04d2      	lsls	r2, r2, #19
 8000696:	4314      	orrs	r4, r2
 8000698:	4642      	mov	r2, r8
 800069a:	3b7f      	subs	r3, #127	@ 0x7f
 800069c:	195b      	adds	r3, r3, r5
 800069e:	2100      	movs	r1, #0
 80006a0:	1c5d      	adds	r5, r3, #1
 80006a2:	2a0a      	cmp	r2, #10
 80006a4:	dc2e      	bgt.n	8000704 <__aeabi_fmul+0xbc>
 80006a6:	407e      	eors	r6, r7
 80006a8:	4642      	mov	r2, r8
 80006aa:	2a02      	cmp	r2, #2
 80006ac:	dc23      	bgt.n	80006f6 <__aeabi_fmul+0xae>
 80006ae:	3a01      	subs	r2, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d900      	bls.n	80006b6 <__aeabi_fmul+0x6e>
 80006b4:	e0bd      	b.n	8000832 <__aeabi_fmul+0x1ea>
 80006b6:	2902      	cmp	r1, #2
 80006b8:	d06e      	beq.n	8000798 <__aeabi_fmul+0x150>
 80006ba:	2901      	cmp	r1, #1
 80006bc:	d12c      	bne.n	8000718 <__aeabi_fmul+0xd0>
 80006be:	2000      	movs	r0, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	05c0      	lsls	r0, r0, #23
 80006c4:	07f6      	lsls	r6, r6, #31
 80006c6:	4310      	orrs	r0, r2
 80006c8:	4330      	orrs	r0, r6
 80006ca:	bce0      	pop	{r5, r6, r7}
 80006cc:	46ba      	mov	sl, r7
 80006ce:	46b1      	mov	r9, r6
 80006d0:	46a8      	mov	r8, r5
 80006d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d4:	002b      	movs	r3, r5
 80006d6:	33ff      	adds	r3, #255	@ 0xff
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d065      	beq.n	80007a8 <__aeabi_fmul+0x160>
 80006dc:	2203      	movs	r2, #3
 80006de:	4641      	mov	r1, r8
 80006e0:	4311      	orrs	r1, r2
 80006e2:	0032      	movs	r2, r6
 80006e4:	3501      	adds	r5, #1
 80006e6:	4688      	mov	r8, r1
 80006e8:	407a      	eors	r2, r7
 80006ea:	35ff      	adds	r5, #255	@ 0xff
 80006ec:	290a      	cmp	r1, #10
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_fmul+0xaa>
 80006f0:	e0d8      	b.n	80008a4 <__aeabi_fmul+0x25c>
 80006f2:	0016      	movs	r6, r2
 80006f4:	2103      	movs	r1, #3
 80006f6:	4640      	mov	r0, r8
 80006f8:	2201      	movs	r2, #1
 80006fa:	4082      	lsls	r2, r0
 80006fc:	20a6      	movs	r0, #166	@ 0xa6
 80006fe:	00c0      	lsls	r0, r0, #3
 8000700:	4202      	tst	r2, r0
 8000702:	d020      	beq.n	8000746 <__aeabi_fmul+0xfe>
 8000704:	4653      	mov	r3, sl
 8000706:	2b02      	cmp	r3, #2
 8000708:	d046      	beq.n	8000798 <__aeabi_fmul+0x150>
 800070a:	2b03      	cmp	r3, #3
 800070c:	d100      	bne.n	8000710 <__aeabi_fmul+0xc8>
 800070e:	e0bb      	b.n	8000888 <__aeabi_fmul+0x240>
 8000710:	4651      	mov	r1, sl
 8000712:	464c      	mov	r4, r9
 8000714:	2901      	cmp	r1, #1
 8000716:	d0d2      	beq.n	80006be <__aeabi_fmul+0x76>
 8000718:	002b      	movs	r3, r5
 800071a:	337f      	adds	r3, #127	@ 0x7f
 800071c:	2b00      	cmp	r3, #0
 800071e:	dd70      	ble.n	8000802 <__aeabi_fmul+0x1ba>
 8000720:	0762      	lsls	r2, r4, #29
 8000722:	d004      	beq.n	800072e <__aeabi_fmul+0xe6>
 8000724:	220f      	movs	r2, #15
 8000726:	4022      	ands	r2, r4
 8000728:	2a04      	cmp	r2, #4
 800072a:	d000      	beq.n	800072e <__aeabi_fmul+0xe6>
 800072c:	3404      	adds	r4, #4
 800072e:	0122      	lsls	r2, r4, #4
 8000730:	d503      	bpl.n	800073a <__aeabi_fmul+0xf2>
 8000732:	4b63      	ldr	r3, [pc, #396]	@ (80008c0 <__aeabi_fmul+0x278>)
 8000734:	401c      	ands	r4, r3
 8000736:	002b      	movs	r3, r5
 8000738:	3380      	adds	r3, #128	@ 0x80
 800073a:	2bfe      	cmp	r3, #254	@ 0xfe
 800073c:	dc2c      	bgt.n	8000798 <__aeabi_fmul+0x150>
 800073e:	01a2      	lsls	r2, r4, #6
 8000740:	0a52      	lsrs	r2, r2, #9
 8000742:	b2d8      	uxtb	r0, r3
 8000744:	e7bd      	b.n	80006c2 <__aeabi_fmul+0x7a>
 8000746:	2090      	movs	r0, #144	@ 0x90
 8000748:	0080      	lsls	r0, r0, #2
 800074a:	4202      	tst	r2, r0
 800074c:	d127      	bne.n	800079e <__aeabi_fmul+0x156>
 800074e:	38b9      	subs	r0, #185	@ 0xb9
 8000750:	38ff      	subs	r0, #255	@ 0xff
 8000752:	4210      	tst	r0, r2
 8000754:	d06d      	beq.n	8000832 <__aeabi_fmul+0x1ea>
 8000756:	003e      	movs	r6, r7
 8000758:	46a1      	mov	r9, r4
 800075a:	468a      	mov	sl, r1
 800075c:	e7d2      	b.n	8000704 <__aeabi_fmul+0xbc>
 800075e:	2c00      	cmp	r4, #0
 8000760:	d141      	bne.n	80007e6 <__aeabi_fmul+0x19e>
 8000762:	2301      	movs	r3, #1
 8000764:	4642      	mov	r2, r8
 8000766:	431a      	orrs	r2, r3
 8000768:	4690      	mov	r8, r2
 800076a:	002b      	movs	r3, r5
 800076c:	4642      	mov	r2, r8
 800076e:	2101      	movs	r1, #1
 8000770:	1c5d      	adds	r5, r3, #1
 8000772:	2a0a      	cmp	r2, #10
 8000774:	dd97      	ble.n	80006a6 <__aeabi_fmul+0x5e>
 8000776:	e7c5      	b.n	8000704 <__aeabi_fmul+0xbc>
 8000778:	2b00      	cmp	r3, #0
 800077a:	d126      	bne.n	80007ca <__aeabi_fmul+0x182>
 800077c:	2304      	movs	r3, #4
 800077e:	4698      	mov	r8, r3
 8000780:	3b03      	subs	r3, #3
 8000782:	2500      	movs	r5, #0
 8000784:	469a      	mov	sl, r3
 8000786:	e77a      	b.n	800067e <__aeabi_fmul+0x36>
 8000788:	2b00      	cmp	r3, #0
 800078a:	d118      	bne.n	80007be <__aeabi_fmul+0x176>
 800078c:	2308      	movs	r3, #8
 800078e:	4698      	mov	r8, r3
 8000790:	3b06      	subs	r3, #6
 8000792:	25ff      	movs	r5, #255	@ 0xff
 8000794:	469a      	mov	sl, r3
 8000796:	e772      	b.n	800067e <__aeabi_fmul+0x36>
 8000798:	20ff      	movs	r0, #255	@ 0xff
 800079a:	2200      	movs	r2, #0
 800079c:	e791      	b.n	80006c2 <__aeabi_fmul+0x7a>
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	2600      	movs	r6, #0
 80007a2:	20ff      	movs	r0, #255	@ 0xff
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	e78c      	b.n	80006c2 <__aeabi_fmul+0x7a>
 80007a8:	4641      	mov	r1, r8
 80007aa:	2202      	movs	r2, #2
 80007ac:	3501      	adds	r5, #1
 80007ae:	4311      	orrs	r1, r2
 80007b0:	4688      	mov	r8, r1
 80007b2:	35ff      	adds	r5, #255	@ 0xff
 80007b4:	290a      	cmp	r1, #10
 80007b6:	dca5      	bgt.n	8000704 <__aeabi_fmul+0xbc>
 80007b8:	2102      	movs	r1, #2
 80007ba:	407e      	eors	r6, r7
 80007bc:	e774      	b.n	80006a8 <__aeabi_fmul+0x60>
 80007be:	230c      	movs	r3, #12
 80007c0:	4698      	mov	r8, r3
 80007c2:	3b09      	subs	r3, #9
 80007c4:	25ff      	movs	r5, #255	@ 0xff
 80007c6:	469a      	mov	sl, r3
 80007c8:	e759      	b.n	800067e <__aeabi_fmul+0x36>
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fa8a 	bl	8000ce4 <__clzsi2>
 80007d0:	464a      	mov	r2, r9
 80007d2:	1f43      	subs	r3, r0, #5
 80007d4:	2576      	movs	r5, #118	@ 0x76
 80007d6:	409a      	lsls	r2, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	426d      	negs	r5, r5
 80007dc:	4691      	mov	r9, r2
 80007de:	4698      	mov	r8, r3
 80007e0:	469a      	mov	sl, r3
 80007e2:	1a2d      	subs	r5, r5, r0
 80007e4:	e74b      	b.n	800067e <__aeabi_fmul+0x36>
 80007e6:	0020      	movs	r0, r4
 80007e8:	f000 fa7c 	bl	8000ce4 <__clzsi2>
 80007ec:	4642      	mov	r2, r8
 80007ee:	1f43      	subs	r3, r0, #5
 80007f0:	409c      	lsls	r4, r3
 80007f2:	1a2b      	subs	r3, r5, r0
 80007f4:	3b76      	subs	r3, #118	@ 0x76
 80007f6:	2100      	movs	r1, #0
 80007f8:	1c5d      	adds	r5, r3, #1
 80007fa:	2a0a      	cmp	r2, #10
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_fmul+0x1b8>
 80007fe:	e752      	b.n	80006a6 <__aeabi_fmul+0x5e>
 8000800:	e780      	b.n	8000704 <__aeabi_fmul+0xbc>
 8000802:	2201      	movs	r2, #1
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	2b1b      	cmp	r3, #27
 8000808:	dd00      	ble.n	800080c <__aeabi_fmul+0x1c4>
 800080a:	e758      	b.n	80006be <__aeabi_fmul+0x76>
 800080c:	359e      	adds	r5, #158	@ 0x9e
 800080e:	0022      	movs	r2, r4
 8000810:	40ac      	lsls	r4, r5
 8000812:	40da      	lsrs	r2, r3
 8000814:	1e63      	subs	r3, r4, #1
 8000816:	419c      	sbcs	r4, r3
 8000818:	4322      	orrs	r2, r4
 800081a:	0753      	lsls	r3, r2, #29
 800081c:	d004      	beq.n	8000828 <__aeabi_fmul+0x1e0>
 800081e:	230f      	movs	r3, #15
 8000820:	4013      	ands	r3, r2
 8000822:	2b04      	cmp	r3, #4
 8000824:	d000      	beq.n	8000828 <__aeabi_fmul+0x1e0>
 8000826:	3204      	adds	r2, #4
 8000828:	0153      	lsls	r3, r2, #5
 800082a:	d537      	bpl.n	800089c <__aeabi_fmul+0x254>
 800082c:	2001      	movs	r0, #1
 800082e:	2200      	movs	r2, #0
 8000830:	e747      	b.n	80006c2 <__aeabi_fmul+0x7a>
 8000832:	0c21      	lsrs	r1, r4, #16
 8000834:	464a      	mov	r2, r9
 8000836:	0424      	lsls	r4, r4, #16
 8000838:	0c24      	lsrs	r4, r4, #16
 800083a:	0027      	movs	r7, r4
 800083c:	0c10      	lsrs	r0, r2, #16
 800083e:	0412      	lsls	r2, r2, #16
 8000840:	0c12      	lsrs	r2, r2, #16
 8000842:	4344      	muls	r4, r0
 8000844:	4357      	muls	r7, r2
 8000846:	4348      	muls	r0, r1
 8000848:	4351      	muls	r1, r2
 800084a:	0c3a      	lsrs	r2, r7, #16
 800084c:	1909      	adds	r1, r1, r4
 800084e:	1852      	adds	r2, r2, r1
 8000850:	4294      	cmp	r4, r2
 8000852:	d903      	bls.n	800085c <__aeabi_fmul+0x214>
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	0249      	lsls	r1, r1, #9
 8000858:	468c      	mov	ip, r1
 800085a:	4460      	add	r0, ip
 800085c:	043f      	lsls	r7, r7, #16
 800085e:	0411      	lsls	r1, r2, #16
 8000860:	0c3f      	lsrs	r7, r7, #16
 8000862:	19c9      	adds	r1, r1, r7
 8000864:	018c      	lsls	r4, r1, #6
 8000866:	1e67      	subs	r7, r4, #1
 8000868:	41bc      	sbcs	r4, r7
 800086a:	0c12      	lsrs	r2, r2, #16
 800086c:	0e89      	lsrs	r1, r1, #26
 800086e:	1812      	adds	r2, r2, r0
 8000870:	430c      	orrs	r4, r1
 8000872:	0192      	lsls	r2, r2, #6
 8000874:	4314      	orrs	r4, r2
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	d50e      	bpl.n	8000898 <__aeabi_fmul+0x250>
 800087a:	2301      	movs	r3, #1
 800087c:	0862      	lsrs	r2, r4, #1
 800087e:	401c      	ands	r4, r3
 8000880:	4314      	orrs	r4, r2
 8000882:	e749      	b.n	8000718 <__aeabi_fmul+0xd0>
 8000884:	003e      	movs	r6, r7
 8000886:	46a1      	mov	r9, r4
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	464b      	mov	r3, r9
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	431a      	orrs	r2, r3
 8000890:	0252      	lsls	r2, r2, #9
 8000892:	20ff      	movs	r0, #255	@ 0xff
 8000894:	0a52      	lsrs	r2, r2, #9
 8000896:	e714      	b.n	80006c2 <__aeabi_fmul+0x7a>
 8000898:	001d      	movs	r5, r3
 800089a:	e73d      	b.n	8000718 <__aeabi_fmul+0xd0>
 800089c:	0192      	lsls	r2, r2, #6
 800089e:	2000      	movs	r0, #0
 80008a0:	0a52      	lsrs	r2, r2, #9
 80008a2:	e70e      	b.n	80006c2 <__aeabi_fmul+0x7a>
 80008a4:	290f      	cmp	r1, #15
 80008a6:	d1ed      	bne.n	8000884 <__aeabi_fmul+0x23c>
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	464b      	mov	r3, r9
 80008ac:	03d2      	lsls	r2, r2, #15
 80008ae:	4213      	tst	r3, r2
 80008b0:	d0ea      	beq.n	8000888 <__aeabi_fmul+0x240>
 80008b2:	4214      	tst	r4, r2
 80008b4:	d1e8      	bne.n	8000888 <__aeabi_fmul+0x240>
 80008b6:	003e      	movs	r6, r7
 80008b8:	20ff      	movs	r0, #255	@ 0xff
 80008ba:	4322      	orrs	r2, r4
 80008bc:	e701      	b.n	80006c2 <__aeabi_fmul+0x7a>
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	f7ffffff 	.word	0xf7ffffff

080008c4 <__aeabi_fsub>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	4647      	mov	r7, r8
 80008c8:	46ce      	mov	lr, r9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0243      	lsls	r3, r0, #9
 80008ce:	0045      	lsls	r5, r0, #1
 80008d0:	0a72      	lsrs	r2, r6, #9
 80008d2:	0fc4      	lsrs	r4, r0, #31
 80008d4:	0048      	lsls	r0, r1, #1
 80008d6:	b580      	push	{r7, lr}
 80008d8:	4694      	mov	ip, r2
 80008da:	0a5f      	lsrs	r7, r3, #9
 80008dc:	0e2d      	lsrs	r5, r5, #24
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0e00      	lsrs	r0, r0, #24
 80008e2:	0fc9      	lsrs	r1, r1, #31
 80008e4:	09b6      	lsrs	r6, r6, #6
 80008e6:	28ff      	cmp	r0, #255	@ 0xff
 80008e8:	d024      	beq.n	8000934 <__aeabi_fsub+0x70>
 80008ea:	2201      	movs	r2, #1
 80008ec:	4051      	eors	r1, r2
 80008ee:	1a2a      	subs	r2, r5, r0
 80008f0:	428c      	cmp	r4, r1
 80008f2:	d00f      	beq.n	8000914 <__aeabi_fsub+0x50>
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	dc00      	bgt.n	80008fa <__aeabi_fsub+0x36>
 80008f8:	e16a      	b.n	8000bd0 <__aeabi_fsub+0x30c>
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d135      	bne.n	800096a <__aeabi_fsub+0xa6>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_fsub+0x40>
 8000902:	e0a2      	b.n	8000a4a <__aeabi_fsub+0x186>
 8000904:	1e51      	subs	r1, r2, #1
 8000906:	2a01      	cmp	r2, #1
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0x48>
 800090a:	e124      	b.n	8000b56 <__aeabi_fsub+0x292>
 800090c:	2aff      	cmp	r2, #255	@ 0xff
 800090e:	d021      	beq.n	8000954 <__aeabi_fsub+0x90>
 8000910:	000a      	movs	r2, r1
 8000912:	e02f      	b.n	8000974 <__aeabi_fsub+0xb0>
 8000914:	2a00      	cmp	r2, #0
 8000916:	dc00      	bgt.n	800091a <__aeabi_fsub+0x56>
 8000918:	e167      	b.n	8000bea <__aeabi_fsub+0x326>
 800091a:	2800      	cmp	r0, #0
 800091c:	d05e      	beq.n	80009dc <__aeabi_fsub+0x118>
 800091e:	2dff      	cmp	r5, #255	@ 0xff
 8000920:	d018      	beq.n	8000954 <__aeabi_fsub+0x90>
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	04c9      	lsls	r1, r1, #19
 8000926:	430e      	orrs	r6, r1
 8000928:	2a1b      	cmp	r2, #27
 800092a:	dc00      	bgt.n	800092e <__aeabi_fsub+0x6a>
 800092c:	e076      	b.n	8000a1c <__aeabi_fsub+0x158>
 800092e:	002a      	movs	r2, r5
 8000930:	3301      	adds	r3, #1
 8000932:	e032      	b.n	800099a <__aeabi_fsub+0xd6>
 8000934:	002a      	movs	r2, r5
 8000936:	3aff      	subs	r2, #255	@ 0xff
 8000938:	4691      	mov	r9, r2
 800093a:	2e00      	cmp	r6, #0
 800093c:	d042      	beq.n	80009c4 <__aeabi_fsub+0x100>
 800093e:	428c      	cmp	r4, r1
 8000940:	d055      	beq.n	80009ee <__aeabi_fsub+0x12a>
 8000942:	464a      	mov	r2, r9
 8000944:	2a00      	cmp	r2, #0
 8000946:	d100      	bne.n	800094a <__aeabi_fsub+0x86>
 8000948:	e09c      	b.n	8000a84 <__aeabi_fsub+0x1c0>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x8c>
 800094e:	e077      	b.n	8000a40 <__aeabi_fsub+0x17c>
 8000950:	000c      	movs	r4, r1
 8000952:	0033      	movs	r3, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x98>
 800095a:	e06e      	b.n	8000a3a <__aeabi_fsub+0x176>
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	03d2      	lsls	r2, r2, #15
 8000960:	4313      	orrs	r3, r2
 8000962:	025b      	lsls	r3, r3, #9
 8000964:	20ff      	movs	r0, #255	@ 0xff
 8000966:	0a5b      	lsrs	r3, r3, #9
 8000968:	e024      	b.n	80009b4 <__aeabi_fsub+0xf0>
 800096a:	2dff      	cmp	r5, #255	@ 0xff
 800096c:	d0f2      	beq.n	8000954 <__aeabi_fsub+0x90>
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	04c9      	lsls	r1, r1, #19
 8000972:	430e      	orrs	r6, r1
 8000974:	2101      	movs	r1, #1
 8000976:	2a1b      	cmp	r2, #27
 8000978:	dc08      	bgt.n	800098c <__aeabi_fsub+0xc8>
 800097a:	0031      	movs	r1, r6
 800097c:	2020      	movs	r0, #32
 800097e:	40d1      	lsrs	r1, r2
 8000980:	1a82      	subs	r2, r0, r2
 8000982:	4096      	lsls	r6, r2
 8000984:	0032      	movs	r2, r6
 8000986:	1e50      	subs	r0, r2, #1
 8000988:	4182      	sbcs	r2, r0
 800098a:	4311      	orrs	r1, r2
 800098c:	1a5b      	subs	r3, r3, r1
 800098e:	015a      	lsls	r2, r3, #5
 8000990:	d460      	bmi.n	8000a54 <__aeabi_fsub+0x190>
 8000992:	2107      	movs	r1, #7
 8000994:	002a      	movs	r2, r5
 8000996:	4019      	ands	r1, r3
 8000998:	d057      	beq.n	8000a4a <__aeabi_fsub+0x186>
 800099a:	210f      	movs	r1, #15
 800099c:	4019      	ands	r1, r3
 800099e:	2904      	cmp	r1, #4
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fsub+0xe0>
 80009a2:	3304      	adds	r3, #4
 80009a4:	0159      	lsls	r1, r3, #5
 80009a6:	d550      	bpl.n	8000a4a <__aeabi_fsub+0x186>
 80009a8:	1c50      	adds	r0, r2, #1
 80009aa:	2afe      	cmp	r2, #254	@ 0xfe
 80009ac:	d045      	beq.n	8000a3a <__aeabi_fsub+0x176>
 80009ae:	019b      	lsls	r3, r3, #6
 80009b0:	b2c0      	uxtb	r0, r0
 80009b2:	0a5b      	lsrs	r3, r3, #9
 80009b4:	05c0      	lsls	r0, r0, #23
 80009b6:	4318      	orrs	r0, r3
 80009b8:	07e4      	lsls	r4, r4, #31
 80009ba:	4320      	orrs	r0, r4
 80009bc:	bcc0      	pop	{r6, r7}
 80009be:	46b9      	mov	r9, r7
 80009c0:	46b0      	mov	r8, r6
 80009c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009c4:	2201      	movs	r2, #1
 80009c6:	4051      	eors	r1, r2
 80009c8:	428c      	cmp	r4, r1
 80009ca:	d1ba      	bne.n	8000942 <__aeabi_fsub+0x7e>
 80009cc:	464a      	mov	r2, r9
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d010      	beq.n	80009f4 <__aeabi_fsub+0x130>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fsub+0x114>
 80009d6:	e098      	b.n	8000b0a <__aeabi_fsub+0x246>
 80009d8:	2300      	movs	r3, #0
 80009da:	e7bb      	b.n	8000954 <__aeabi_fsub+0x90>
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d034      	beq.n	8000a4a <__aeabi_fsub+0x186>
 80009e0:	1e51      	subs	r1, r2, #1
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d06e      	beq.n	8000ac4 <__aeabi_fsub+0x200>
 80009e6:	2aff      	cmp	r2, #255	@ 0xff
 80009e8:	d0b4      	beq.n	8000954 <__aeabi_fsub+0x90>
 80009ea:	000a      	movs	r2, r1
 80009ec:	e79c      	b.n	8000928 <__aeabi_fsub+0x64>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d000      	beq.n	80009f4 <__aeabi_fsub+0x130>
 80009f2:	e088      	b.n	8000b06 <__aeabi_fsub+0x242>
 80009f4:	20fe      	movs	r0, #254	@ 0xfe
 80009f6:	1c6a      	adds	r2, r5, #1
 80009f8:	4210      	tst	r0, r2
 80009fa:	d000      	beq.n	80009fe <__aeabi_fsub+0x13a>
 80009fc:	e092      	b.n	8000b24 <__aeabi_fsub+0x260>
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fsub+0x140>
 8000a02:	e0a4      	b.n	8000b4e <__aeabi_fsub+0x28a>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x146>
 8000a08:	e0cb      	b.n	8000ba2 <__aeabi_fsub+0x2de>
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fsub+0x14c>
 8000a0e:	e0ca      	b.n	8000ba6 <__aeabi_fsub+0x2e2>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e7cb      	b.n	80009b4 <__aeabi_fsub+0xf0>
 8000a1c:	0031      	movs	r1, r6
 8000a1e:	2020      	movs	r0, #32
 8000a20:	40d1      	lsrs	r1, r2
 8000a22:	1a82      	subs	r2, r0, r2
 8000a24:	4096      	lsls	r6, r2
 8000a26:	0032      	movs	r2, r6
 8000a28:	1e50      	subs	r0, r2, #1
 8000a2a:	4182      	sbcs	r2, r0
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	189b      	adds	r3, r3, r2
 8000a30:	015a      	lsls	r2, r3, #5
 8000a32:	d5ae      	bpl.n	8000992 <__aeabi_fsub+0xce>
 8000a34:	1c6a      	adds	r2, r5, #1
 8000a36:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a38:	d14a      	bne.n	8000ad0 <__aeabi_fsub+0x20c>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e7b9      	b.n	80009b4 <__aeabi_fsub+0xf0>
 8000a40:	22ff      	movs	r2, #255	@ 0xff
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d14b      	bne.n	8000ade <__aeabi_fsub+0x21a>
 8000a46:	000c      	movs	r4, r1
 8000a48:	0033      	movs	r3, r6
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	2aff      	cmp	r2, #255	@ 0xff
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fsub+0x18e>
 8000a50:	e781      	b.n	8000956 <__aeabi_fsub+0x92>
 8000a52:	e7df      	b.n	8000a14 <__aeabi_fsub+0x150>
 8000a54:	019f      	lsls	r7, r3, #6
 8000a56:	09bf      	lsrs	r7, r7, #6
 8000a58:	0038      	movs	r0, r7
 8000a5a:	f000 f943 	bl	8000ce4 <__clzsi2>
 8000a5e:	3805      	subs	r0, #5
 8000a60:	4087      	lsls	r7, r0
 8000a62:	4285      	cmp	r5, r0
 8000a64:	dc21      	bgt.n	8000aaa <__aeabi_fsub+0x1e6>
 8000a66:	003b      	movs	r3, r7
 8000a68:	2120      	movs	r1, #32
 8000a6a:	1b42      	subs	r2, r0, r5
 8000a6c:	3201      	adds	r2, #1
 8000a6e:	40d3      	lsrs	r3, r2
 8000a70:	1a8a      	subs	r2, r1, r2
 8000a72:	4097      	lsls	r7, r2
 8000a74:	1e7a      	subs	r2, r7, #1
 8000a76:	4197      	sbcs	r7, r2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	433b      	orrs	r3, r7
 8000a7c:	0759      	lsls	r1, r3, #29
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0x1be>
 8000a80:	e78b      	b.n	800099a <__aeabi_fsub+0xd6>
 8000a82:	e78f      	b.n	80009a4 <__aeabi_fsub+0xe0>
 8000a84:	20fe      	movs	r0, #254	@ 0xfe
 8000a86:	1c6a      	adds	r2, r5, #1
 8000a88:	4210      	tst	r0, r2
 8000a8a:	d112      	bne.n	8000ab2 <__aeabi_fsub+0x1ee>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d152      	bne.n	8000b36 <__aeabi_fsub+0x272>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d07c      	beq.n	8000b8e <__aeabi_fsub+0x2ca>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d0bb      	beq.n	8000a10 <__aeabi_fsub+0x14c>
 8000a98:	1b9a      	subs	r2, r3, r6
 8000a9a:	0150      	lsls	r0, r2, #5
 8000a9c:	d400      	bmi.n	8000aa0 <__aeabi_fsub+0x1dc>
 8000a9e:	e08b      	b.n	8000bb8 <__aeabi_fsub+0x2f4>
 8000aa0:	2401      	movs	r4, #1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	1af3      	subs	r3, r6, r3
 8000aa6:	400c      	ands	r4, r1
 8000aa8:	e7e8      	b.n	8000a7c <__aeabi_fsub+0x1b8>
 8000aaa:	4b56      	ldr	r3, [pc, #344]	@ (8000c04 <__aeabi_fsub+0x340>)
 8000aac:	1a2a      	subs	r2, r5, r0
 8000aae:	403b      	ands	r3, r7
 8000ab0:	e7e4      	b.n	8000a7c <__aeabi_fsub+0x1b8>
 8000ab2:	1b9f      	subs	r7, r3, r6
 8000ab4:	017a      	lsls	r2, r7, #5
 8000ab6:	d446      	bmi.n	8000b46 <__aeabi_fsub+0x282>
 8000ab8:	2f00      	cmp	r7, #0
 8000aba:	d1cd      	bne.n	8000a58 <__aeabi_fsub+0x194>
 8000abc:	2400      	movs	r4, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e777      	b.n	80009b4 <__aeabi_fsub+0xf0>
 8000ac4:	199b      	adds	r3, r3, r6
 8000ac6:	2501      	movs	r5, #1
 8000ac8:	3201      	adds	r2, #1
 8000aca:	0159      	lsls	r1, r3, #5
 8000acc:	d400      	bmi.n	8000ad0 <__aeabi_fsub+0x20c>
 8000ace:	e760      	b.n	8000992 <__aeabi_fsub+0xce>
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	484d      	ldr	r0, [pc, #308]	@ (8000c08 <__aeabi_fsub+0x344>)
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	4003      	ands	r3, r0
 8000ada:	430b      	orrs	r3, r1
 8000adc:	e7ce      	b.n	8000a7c <__aeabi_fsub+0x1b8>
 8000ade:	1e57      	subs	r7, r2, #1
 8000ae0:	2a01      	cmp	r2, #1
 8000ae2:	d05a      	beq.n	8000b9a <__aeabi_fsub+0x2d6>
 8000ae4:	000c      	movs	r4, r1
 8000ae6:	2aff      	cmp	r2, #255	@ 0xff
 8000ae8:	d033      	beq.n	8000b52 <__aeabi_fsub+0x28e>
 8000aea:	2201      	movs	r2, #1
 8000aec:	2f1b      	cmp	r7, #27
 8000aee:	dc07      	bgt.n	8000b00 <__aeabi_fsub+0x23c>
 8000af0:	2120      	movs	r1, #32
 8000af2:	1bc9      	subs	r1, r1, r7
 8000af4:	001a      	movs	r2, r3
 8000af6:	408b      	lsls	r3, r1
 8000af8:	40fa      	lsrs	r2, r7
 8000afa:	1e59      	subs	r1, r3, #1
 8000afc:	418b      	sbcs	r3, r1
 8000afe:	431a      	orrs	r2, r3
 8000b00:	0005      	movs	r5, r0
 8000b02:	1ab3      	subs	r3, r6, r2
 8000b04:	e743      	b.n	800098e <__aeabi_fsub+0xca>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d123      	bne.n	8000b52 <__aeabi_fsub+0x28e>
 8000b0a:	22ff      	movs	r2, #255	@ 0xff
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d09b      	beq.n	8000a48 <__aeabi_fsub+0x184>
 8000b10:	1e51      	subs	r1, r2, #1
 8000b12:	2a01      	cmp	r2, #1
 8000b14:	d0d6      	beq.n	8000ac4 <__aeabi_fsub+0x200>
 8000b16:	2aff      	cmp	r2, #255	@ 0xff
 8000b18:	d01b      	beq.n	8000b52 <__aeabi_fsub+0x28e>
 8000b1a:	291b      	cmp	r1, #27
 8000b1c:	dd2c      	ble.n	8000b78 <__aeabi_fsub+0x2b4>
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1c73      	adds	r3, r6, #1
 8000b22:	e73a      	b.n	800099a <__aeabi_fsub+0xd6>
 8000b24:	2aff      	cmp	r2, #255	@ 0xff
 8000b26:	d088      	beq.n	8000a3a <__aeabi_fsub+0x176>
 8000b28:	199b      	adds	r3, r3, r6
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	0759      	lsls	r1, r3, #29
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fsub+0x26e>
 8000b30:	e733      	b.n	800099a <__aeabi_fsub+0xd6>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fsub+0x150>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d110      	bne.n	8000b5c <__aeabi_fsub+0x298>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d043      	beq.n	8000bc6 <__aeabi_fsub+0x302>
 8000b3e:	2401      	movs	r4, #1
 8000b40:	0033      	movs	r3, r6
 8000b42:	400c      	ands	r4, r1
 8000b44:	e706      	b.n	8000954 <__aeabi_fsub+0x90>
 8000b46:	2401      	movs	r4, #1
 8000b48:	1af7      	subs	r7, r6, r3
 8000b4a:	400c      	ands	r4, r1
 8000b4c:	e784      	b.n	8000a58 <__aeabi_fsub+0x194>
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d104      	bne.n	8000b5c <__aeabi_fsub+0x298>
 8000b52:	0033      	movs	r3, r6
 8000b54:	e6fe      	b.n	8000954 <__aeabi_fsub+0x90>
 8000b56:	2501      	movs	r5, #1
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	e718      	b.n	800098e <__aeabi_fsub+0xca>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fsub+0x29e>
 8000b60:	e6f8      	b.n	8000954 <__aeabi_fsub+0x90>
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	03d2      	lsls	r2, r2, #15
 8000b66:	4297      	cmp	r7, r2
 8000b68:	d304      	bcc.n	8000b74 <__aeabi_fsub+0x2b0>
 8000b6a:	4594      	cmp	ip, r2
 8000b6c:	d202      	bcs.n	8000b74 <__aeabi_fsub+0x2b0>
 8000b6e:	2401      	movs	r4, #1
 8000b70:	0033      	movs	r3, r6
 8000b72:	400c      	ands	r4, r1
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	e6f1      	b.n	800095c <__aeabi_fsub+0x98>
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2520      	movs	r5, #32
 8000b7c:	40ca      	lsrs	r2, r1
 8000b7e:	1a69      	subs	r1, r5, r1
 8000b80:	408b      	lsls	r3, r1
 8000b82:	1e59      	subs	r1, r3, #1
 8000b84:	418b      	sbcs	r3, r1
 8000b86:	4313      	orrs	r3, r2
 8000b88:	0005      	movs	r5, r0
 8000b8a:	199b      	adds	r3, r3, r6
 8000b8c:	e750      	b.n	8000a30 <__aeabi_fsub+0x16c>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d094      	beq.n	8000abc <__aeabi_fsub+0x1f8>
 8000b92:	2401      	movs	r4, #1
 8000b94:	0033      	movs	r3, r6
 8000b96:	400c      	ands	r4, r1
 8000b98:	e73a      	b.n	8000a10 <__aeabi_fsub+0x14c>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	2501      	movs	r5, #1
 8000b9e:	1af3      	subs	r3, r6, r3
 8000ba0:	e6f5      	b.n	800098e <__aeabi_fsub+0xca>
 8000ba2:	0033      	movs	r3, r6
 8000ba4:	e734      	b.n	8000a10 <__aeabi_fsub+0x14c>
 8000ba6:	199b      	adds	r3, r3, r6
 8000ba8:	2200      	movs	r2, #0
 8000baa:	0159      	lsls	r1, r3, #5
 8000bac:	d5c1      	bpl.n	8000b32 <__aeabi_fsub+0x26e>
 8000bae:	4a15      	ldr	r2, [pc, #84]	@ (8000c04 <__aeabi_fsub+0x340>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	e72d      	b.n	8000a14 <__aeabi_fsub+0x150>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fsub+0x2fa>
 8000bbc:	e77e      	b.n	8000abc <__aeabi_fsub+0x1f8>
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	e726      	b.n	8000a14 <__aeabi_fsub+0x150>
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	2400      	movs	r4, #0
 8000bca:	20ff      	movs	r0, #255	@ 0xff
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	e6f1      	b.n	80009b4 <__aeabi_fsub+0xf0>
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x312>
 8000bd4:	e756      	b.n	8000a84 <__aeabi_fsub+0x1c0>
 8000bd6:	1b47      	subs	r7, r0, r5
 8000bd8:	003a      	movs	r2, r7
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x31c>
 8000bde:	e730      	b.n	8000a42 <__aeabi_fsub+0x17e>
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	04d2      	lsls	r2, r2, #19
 8000be4:	000c      	movs	r4, r1
 8000be6:	4313      	orrs	r3, r2
 8000be8:	e77f      	b.n	8000aea <__aeabi_fsub+0x226>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fsub+0x32c>
 8000bee:	e701      	b.n	80009f4 <__aeabi_fsub+0x130>
 8000bf0:	1b41      	subs	r1, r0, r5
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d101      	bne.n	8000bfa <__aeabi_fsub+0x336>
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	e788      	b.n	8000b0c <__aeabi_fsub+0x248>
 8000bfa:	2280      	movs	r2, #128	@ 0x80
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	e78b      	b.n	8000b1a <__aeabi_fsub+0x256>
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	fbffffff 	.word	0xfbffffff
 8000c08:	7dffffff 	.word	0x7dffffff

08000c0c <__aeabi_f2iz>:
 8000c0c:	0241      	lsls	r1, r0, #9
 8000c0e:	0042      	lsls	r2, r0, #1
 8000c10:	0fc3      	lsrs	r3, r0, #31
 8000c12:	0a49      	lsrs	r1, r1, #9
 8000c14:	2000      	movs	r0, #0
 8000c16:	0e12      	lsrs	r2, r2, #24
 8000c18:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c1a:	dd03      	ble.n	8000c24 <__aeabi_f2iz+0x18>
 8000c1c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c1e:	dd02      	ble.n	8000c26 <__aeabi_f2iz+0x1a>
 8000c20:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <__aeabi_f2iz+0x3c>)
 8000c22:	1898      	adds	r0, r3, r2
 8000c24:	4770      	bx	lr
 8000c26:	2080      	movs	r0, #128	@ 0x80
 8000c28:	0400      	lsls	r0, r0, #16
 8000c2a:	4301      	orrs	r1, r0
 8000c2c:	2a95      	cmp	r2, #149	@ 0x95
 8000c2e:	dc07      	bgt.n	8000c40 <__aeabi_f2iz+0x34>
 8000c30:	2096      	movs	r0, #150	@ 0x96
 8000c32:	1a82      	subs	r2, r0, r2
 8000c34:	40d1      	lsrs	r1, r2
 8000c36:	4248      	negs	r0, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f3      	bne.n	8000c24 <__aeabi_f2iz+0x18>
 8000c3c:	0008      	movs	r0, r1
 8000c3e:	e7f1      	b.n	8000c24 <__aeabi_f2iz+0x18>
 8000c40:	3a96      	subs	r2, #150	@ 0x96
 8000c42:	4091      	lsls	r1, r2
 8000c44:	e7f7      	b.n	8000c36 <__aeabi_f2iz+0x2a>
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	7fffffff 	.word	0x7fffffff

08000c4c <__aeabi_i2f>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d013      	beq.n	8000c7a <__aeabi_i2f+0x2e>
 8000c52:	17c3      	asrs	r3, r0, #31
 8000c54:	18c5      	adds	r5, r0, r3
 8000c56:	405d      	eors	r5, r3
 8000c58:	0fc4      	lsrs	r4, r0, #31
 8000c5a:	0028      	movs	r0, r5
 8000c5c:	f000 f842 	bl	8000ce4 <__clzsi2>
 8000c60:	239e      	movs	r3, #158	@ 0x9e
 8000c62:	0001      	movs	r1, r0
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	2b96      	cmp	r3, #150	@ 0x96
 8000c68:	dc0f      	bgt.n	8000c8a <__aeabi_i2f+0x3e>
 8000c6a:	2808      	cmp	r0, #8
 8000c6c:	d034      	beq.n	8000cd8 <__aeabi_i2f+0x8c>
 8000c6e:	3908      	subs	r1, #8
 8000c70:	408d      	lsls	r5, r1
 8000c72:	026d      	lsls	r5, r5, #9
 8000c74:	0a6d      	lsrs	r5, r5, #9
 8000c76:	b2d8      	uxtb	r0, r3
 8000c78:	e002      	b.n	8000c80 <__aeabi_i2f+0x34>
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	2500      	movs	r5, #0
 8000c80:	05c0      	lsls	r0, r0, #23
 8000c82:	4328      	orrs	r0, r5
 8000c84:	07e4      	lsls	r4, r4, #31
 8000c86:	4320      	orrs	r0, r4
 8000c88:	bd70      	pop	{r4, r5, r6, pc}
 8000c8a:	2b99      	cmp	r3, #153	@ 0x99
 8000c8c:	dc16      	bgt.n	8000cbc <__aeabi_i2f+0x70>
 8000c8e:	1f42      	subs	r2, r0, #5
 8000c90:	2805      	cmp	r0, #5
 8000c92:	d000      	beq.n	8000c96 <__aeabi_i2f+0x4a>
 8000c94:	4095      	lsls	r5, r2
 8000c96:	002a      	movs	r2, r5
 8000c98:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <__aeabi_i2f+0x94>)
 8000c9a:	4002      	ands	r2, r0
 8000c9c:	076e      	lsls	r6, r5, #29
 8000c9e:	d009      	beq.n	8000cb4 <__aeabi_i2f+0x68>
 8000ca0:	260f      	movs	r6, #15
 8000ca2:	4035      	ands	r5, r6
 8000ca4:	2d04      	cmp	r5, #4
 8000ca6:	d005      	beq.n	8000cb4 <__aeabi_i2f+0x68>
 8000ca8:	3204      	adds	r2, #4
 8000caa:	0155      	lsls	r5, r2, #5
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_i2f+0x68>
 8000cae:	239f      	movs	r3, #159	@ 0x9f
 8000cb0:	4002      	ands	r2, r0
 8000cb2:	1a5b      	subs	r3, r3, r1
 8000cb4:	0192      	lsls	r2, r2, #6
 8000cb6:	0a55      	lsrs	r5, r2, #9
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	e7e1      	b.n	8000c80 <__aeabi_i2f+0x34>
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	1a12      	subs	r2, r2, r0
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	40d0      	lsrs	r0, r2
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	0008      	movs	r0, r1
 8000cc8:	301b      	adds	r0, #27
 8000cca:	4085      	lsls	r5, r0
 8000ccc:	0028      	movs	r0, r5
 8000cce:	1e45      	subs	r5, r0, #1
 8000cd0:	41a8      	sbcs	r0, r5
 8000cd2:	4302      	orrs	r2, r0
 8000cd4:	0015      	movs	r5, r2
 8000cd6:	e7de      	b.n	8000c96 <__aeabi_i2f+0x4a>
 8000cd8:	026d      	lsls	r5, r5, #9
 8000cda:	2096      	movs	r0, #150	@ 0x96
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	e7cf      	b.n	8000c80 <__aeabi_i2f+0x34>
 8000ce0:	fbffffff 	.word	0xfbffffff

08000ce4 <__clzsi2>:
 8000ce4:	211c      	movs	r1, #28
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d301      	bcc.n	8000cf2 <__clzsi2+0xe>
 8000cee:	0c00      	lsrs	r0, r0, #16
 8000cf0:	3910      	subs	r1, #16
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d301      	bcc.n	8000cfc <__clzsi2+0x18>
 8000cf8:	0a00      	lsrs	r0, r0, #8
 8000cfa:	3908      	subs	r1, #8
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d301      	bcc.n	8000d06 <__clzsi2+0x22>
 8000d02:	0900      	lsrs	r0, r0, #4
 8000d04:	3904      	subs	r1, #4
 8000d06:	a202      	add	r2, pc, #8	@ (adr r2, 8000d10 <__clzsi2+0x2c>)
 8000d08:	5c10      	ldrb	r0, [r2, r0]
 8000d0a:	1840      	adds	r0, r0, r1
 8000d0c:	4770      	bx	lr
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	02020304 	.word	0x02020304
 8000d14:	01010101 	.word	0x01010101
	...

08000d20 <ADC_Incremental_Write>:
 * @param[in]			- Amount of registers which need to be written
 *
 * @return				- none
 */
uint8_t ADC_Incremental_Write(ADC_Handle_t *pADC, uint8_t RegisterAddress, uint8_t AmountADCRegistersToWrite)
{
 8000d20:	0003      	movs	r3, r0
 8000d22:	b570      	push	{r4, r5, r6, lr}
	// Check if the parameters which were given to the function are correct
	// 1. Check if initial address is okey
	if (RegisterAddress < ADCDATA_ADDRESS || RegisterAddress > CRCCFG_ADDRESS)
 8000d24:	290f      	cmp	r1, #15
 8000d26:	d82f      	bhi.n	8000d88 <ADC_Incremental_Write+0x68>
	{
		// Generate Error
		return 1;
	}
	// 2. Check if amount to write is not too long
	if (AmountADCRegistersToWrite > (0xE - RegisterAddress))
 8000d28:	200e      	movs	r0, #14
 8000d2a:	1a40      	subs	r0, r0, r1
 8000d2c:	4282      	cmp	r2, r0
 8000d2e:	dc2b      	bgt.n	8000d88 <ADC_Incremental_Write+0x68>
	// Forming Fast Command for incremental writing
	// Adding Device address to the bits [7:6];
	FastCommandByte = ADC_DEVICE_ADDRESS << 6;

	// Adding address (bits [5:2]) of ADC's register address we want to start writing to
	FastCommandByte += RegisterAddress << 2;
 8000d30:	0088      	lsls	r0, r1, #2

	// Adding "Increment writing" command (bits [1:0])
	FastCommandByte += COMMAND_INCREMENTAL_WRITE;
 8000d32:	4c3e      	ldr	r4, [pc, #248]	@ (8000e2c <ADC_Incremental_Write+0x10c>)
 8000d34:	3042      	adds	r0, #66	@ 0x42
 8000d36:	b2c0      	uxtb	r0, r0
 8000d38:	7020      	strb	r0, [r4, #0]
	// Assign first byte for sending SPI writing command with desirable address
	SPIMessage[0] = FastCommandByte;

	// Variable will be responsible for creating exact length of the SPI message
	// Initial value "1" because it will be first byte with system information (previous assignment)
	uint8_t SPIAmountofBytes = 1;
 8000d3a:	2401      	movs	r4, #1
	SPIMessage[0] = FastCommandByte;
 8000d3c:	4d3c      	ldr	r5, [pc, #240]	@ (8000e30 <ADC_Incremental_Write+0x110>)
	 *
	 * for loop will go through register which needs to be processed
	 * Switch will decide amount of bytes for each particular register
	 */

	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister < (RegisterAddress + AmountADCRegistersToWrite); CurrentRegister++)
 8000d3e:	1852      	adds	r2, r2, r1
	SPIMessage[0] = FastCommandByte;
 8000d40:	7028      	strb	r0, [r5, #0]
	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister < (RegisterAddress + AmountADCRegistersToWrite); CurrentRegister++)
 8000d42:	4291      	cmp	r1, r2
 8000d44:	db13      	blt.n	8000d6e <ADC_Incremental_Write+0x4e>
				return 1;			//???????????????    Return error for the function    ???????????????????
		}

	}

	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000d46:	2090      	movs	r0, #144	@ 0x90
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	05c0      	lsls	r0, r0, #23
 8000d4e:	f001 f8e7 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, SPIMessage, SPIAmountofBytes, 10);
 8000d52:	230a      	movs	r3, #10
 8000d54:	0022      	movs	r2, r4
 8000d56:	0029      	movs	r1, r5
 8000d58:	4836      	ldr	r0, [pc, #216]	@ (8000e34 <ADC_Incremental_Write+0x114>)
 8000d5a:	f001 fe8b 	bl	8002a74 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000d5e:	2090      	movs	r0, #144	@ 0x90
 8000d60:	2201      	movs	r2, #1
 8000d62:	05c0      	lsls	r0, r0, #23
 8000d64:	2110      	movs	r1, #16
 8000d66:	f001 f8db 	bl	8001f20 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);




	return 0;
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e00d      	b.n	8000d8a <ADC_Incremental_Write+0x6a>
		switch (CurrentRegister)
 8000d6e:	1e48      	subs	r0, r1, #1
 8000d70:	280d      	cmp	r0, #13
 8000d72:	d809      	bhi.n	8000d88 <ADC_Incremental_Write+0x68>
 8000d74:	1c66      	adds	r6, r4, #1
 8000d76:	f7ff f9c7 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000d7a:	0f09      	.short	0x0f09
 8000d7c:	17151311 	.word	0x17151311
 8000d80:	362e2619 	.word	0x362e2619
 8000d84:	4e4c4940 	.word	0x4e4c4940
		return 1;
 8000d88:	2001      	movs	r0, #1
}
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000d8c:	7918      	ldrb	r0, [r3, #4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000d8e:	5528      	strb	r0, [r5, r4]
				SPIAmountofBytes++;
 8000d90:	b2f4      	uxtb	r4, r6
	for (uint8_t CurrentRegister = RegisterAddress; CurrentRegister < (RegisterAddress + AmountADCRegistersToWrite); CurrentRegister++)
 8000d92:	3101      	adds	r1, #1
 8000d94:	b2c9      	uxtb	r1, r1
 8000d96:	e7d4      	b.n	8000d42 <ADC_Incremental_Write+0x22>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000d98:	7958      	ldrb	r0, [r3, #5]
 8000d9a:	e7f8      	b.n	8000d8e <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000d9c:	7998      	ldrb	r0, [r3, #6]
 8000d9e:	e7f6      	b.n	8000d8e <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000da0:	79d8      	ldrb	r0, [r3, #7]
 8000da2:	e7f4      	b.n	8000d8e <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000da4:	7a18      	ldrb	r0, [r3, #8]
 8000da6:	e7f2      	b.n	8000d8e <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000da8:	7a58      	ldrb	r0, [r3, #9]
 8000daa:	e7f0      	b.n	8000d8e <ADC_Incremental_Write+0x6e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dac:	7a98      	ldrb	r0, [r3, #10]
 8000dae:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000db0:	7ade      	ldrb	r6, [r3, #11]
				SPIAmountofBytes++;
 8000db2:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000db4:	b2c0      	uxtb	r0, r0
 8000db6:	542e      	strb	r6, [r5, r0]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000db8:	7b1e      	ldrb	r6, [r3, #12]
				SPIAmountofBytes++;
 8000dba:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dbc:	b2c0      	uxtb	r0, r0
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dbe:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000dc0:	3403      	adds	r4, #3
				SPIAmountofBytes++;
 8000dc2:	b2e4      	uxtb	r4, r4
				break;
 8000dc4:	e7e5      	b.n	8000d92 <ADC_Incremental_Write+0x72>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dc6:	7c18      	ldrb	r0, [r3, #16]
 8000dc8:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dca:	7c5e      	ldrb	r6, [r3, #17]
				SPIAmountofBytes++;
 8000dcc:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dce:	b2c0      	uxtb	r0, r0
 8000dd0:	542e      	strb	r6, [r5, r0]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dd2:	7c9e      	ldrb	r6, [r3, #18]
 8000dd4:	e7f1      	b.n	8000dba <ADC_Incremental_Write+0x9a>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dd6:	7d18      	ldrb	r0, [r3, #20]
 8000dd8:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dda:	7d5e      	ldrb	r6, [r3, #21]
				SPIAmountofBytes++;
 8000ddc:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dde:	b2c0      	uxtb	r0, r0
 8000de0:	542e      	strb	r6, [r5, r0]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000de2:	7d9e      	ldrb	r6, [r3, #22]
 8000de4:	e7e9      	b.n	8000dba <ADC_Incremental_Write+0x9a>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000de6:	7e18      	ldrb	r0, [r3, #24]
 8000de8:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dea:	7e5e      	ldrb	r6, [r3, #25]
				SPIAmountofBytes++;
 8000dec:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dee:	b2c0      	uxtb	r0, r0
 8000df0:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000df2:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000df4:	7e9e      	ldrb	r6, [r3, #26]
 8000df6:	b2c0      	uxtb	r0, r0
 8000df8:	e7e1      	b.n	8000dbe <ADC_Incremental_Write+0x9e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dfa:	7f18      	ldrb	r0, [r3, #28]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dfc:	b2f6      	uxtb	r6, r6
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000dfe:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e00:	7f58      	ldrb	r0, [r3, #29]
 8000e02:	55a8      	strb	r0, [r5, r6]
				SPIAmountofBytes++;
 8000e04:	1ca0      	adds	r0, r4, #2
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e06:	7f9e      	ldrb	r6, [r3, #30]
 8000e08:	b2c0      	uxtb	r0, r0
 8000e0a:	e7d8      	b.n	8000dbe <ADC_Incremental_Write+0x9e>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e0c:	1c58      	adds	r0, r3, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e0e:	7fc0      	ldrb	r0, [r0, #31]
 8000e10:	e7bd      	b.n	8000d8e <ADC_Incremental_Write+0x6e>
 8000e12:	1c98      	adds	r0, r3, #2
 8000e14:	e7fb      	b.n	8000e0e <ADC_Incremental_Write+0xee>
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e16:	1cd8      	adds	r0, r3, #3
 8000e18:	7fc0      	ldrb	r0, [r0, #31]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e1a:	1d1e      	adds	r6, r3, #4
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e1c:	5528      	strb	r0, [r5, r4]
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e1e:	7ff6      	ldrb	r6, [r6, #31]
				SPIAmountofBytes++;
 8000e20:	1c60      	adds	r0, r4, #1
				SPIMessage[SPIAmountofBytes] = *pTemp;
 8000e22:	b2c0      	uxtb	r0, r0
 8000e24:	542e      	strb	r6, [r5, r0]
				SPIAmountofBytes++;
 8000e26:	3402      	adds	r4, #2
 8000e28:	e7cb      	b.n	8000dc2 <ADC_Incremental_Write+0xa2>
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	20000050 	.word	0x20000050
 8000e30:	20000051 	.word	0x20000051
 8000e34:	200004dc 	.word	0x200004dc

08000e38 <ADC_Init>:
	pADC->RESERVED1 = 0x900000;
 8000e38:	2390      	movs	r3, #144	@ 0x90
	pADC->RESERVED2 = 0x50;
 8000e3a:	2250      	movs	r2, #80	@ 0x50
	pADC->RESERVED1 = 0x900000;
 8000e3c:	041b      	lsls	r3, r3, #16
{
 8000e3e:	b510      	push	{r4, lr}
	pADC->RESERVED1 = 0x900000;
 8000e40:	61c3      	str	r3, [r0, #28]
	pADC->RESERVED2 = 0x50;
 8000e42:	1c43      	adds	r3, r0, #1
 8000e44:	77da      	strb	r2, [r3, #31]
	pADC->RESERVED3 = 0x0009;
 8000e46:	2309      	movs	r3, #9
 8000e48:	8443      	strh	r3, [r0, #34]	@ 0x22
	pADC->SCAN.RESERVED = 0x00;
 8000e4a:	7b03      	ldrb	r3, [r0, #12]
 8000e4c:	3a40      	subs	r2, #64	@ 0x40
 8000e4e:	4393      	bics	r3, r2
 8000e50:	7303      	strb	r3, [r0, #12]
	pADC->Config0.CONFIG0 = 0x03;
 8000e52:	8882      	ldrh	r2, [r0, #4]
 8000e54:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <ADC_Init+0x3c>)
	ADC_Incremental_Write(pADC, CONFIG0_ADDRESS, INITIALIZATION_AMOUNT_OF_REGISTERS);
 8000e56:	2101      	movs	r1, #1
	pADC->Config0.CONFIG0 = 0x03;
 8000e58:	401a      	ands	r2, r3
 8000e5a:	23c0      	movs	r3, #192	@ 0xc0
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	8083      	strh	r3, [r0, #4]
	pADC->Config2.RESERVED = 0x03;
 8000e60:	2303      	movs	r3, #3
 8000e62:	7982      	ldrb	r2, [r0, #6]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	7183      	strb	r3, [r0, #6]
	ADC_Incremental_Write(pADC, CONFIG0_ADDRESS, INITIALIZATION_AMOUNT_OF_REGISTERS);
 8000e68:	220d      	movs	r2, #13
 8000e6a:	f7ff ff59 	bl	8000d20 <ADC_Incremental_Write>
}
 8000e6e:	2000      	movs	r0, #0
 8000e70:	bd10      	pop	{r4, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	fffffc3f 	.word	0xfffffc3f

08000e78 <ADC_Start_Conversion>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- none
 */
void ADC_Start_Conversion(ADC_Handle_t *pADC)
{
 8000e78:	b570      	push	{r4, r5, r6, lr}
	// Adding command, bits [5:0]
	FastCommandByte += FC_START_CONVERSION;

	//Start_SPI3_TransmitReceive(&FastCommandByte, SPIDUMMYData, 1);
	// Transfer this via SPI
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000e7a:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += FC_START_CONVERSION;
 8000e7c:	2368      	movs	r3, #104	@ 0x68
 8000e7e:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <ADC_Start_Conversion+0x30>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000e80:	05ed      	lsls	r5, r5, #23
 8000e82:	0028      	movs	r0, r5
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
	FastCommandByte += FC_START_CONVERSION;
 8000e88:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000e8a:	f001 f849 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);
 8000e8e:	230a      	movs	r3, #10
 8000e90:	0021      	movs	r1, r4
 8000e92:	2201      	movs	r2, #1
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <ADC_Start_Conversion+0x34>)
 8000e96:	f001 fded 	bl	8002a74 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_IT(&SPI, &FastCommandByte, 1);
	// HAL_SPI_Transmit_DMA(&SPI, &FastCommandByte, 1);
	//__HAL_DMA_DISABLE_IT(&hdma_spi3_tx, DMA_IT_HT);
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000e9a:	0028      	movs	r0, r5
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	f001 f83e 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	20000050 	.word	0x20000050
 8000eac:	200004dc 	.word	0x200004dc

08000eb0 <ADC_Full_Reset>:
 * @param[in]			- Address of ADC handler
 *
 * @return				- none
 */
void ADC_Full_Reset(ADC_Handle_t *pADC)
{
 8000eb0:	b570      	push	{r4, r5, r6, lr}

	// Adding command, bits [5:0]
	FastCommandByte += FC_DEVICE_FULL_RESET;

	// Transfer this via SPI
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000eb2:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += FC_DEVICE_FULL_RESET;
 8000eb4:	2378      	movs	r3, #120	@ 0x78
 8000eb6:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee0 <ADC_Full_Reset+0x30>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000eb8:	05ed      	lsls	r5, r5, #23
 8000eba:	0028      	movs	r0, r5
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2110      	movs	r1, #16
	FastCommandByte += FC_DEVICE_FULL_RESET;
 8000ec0:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000ec2:	f001 f82d 	bl	8001f20 <HAL_GPIO_WritePin>
	//Start_SPI_Transmit(&FastCommandByte, 1);
	HAL_SPI_Transmit(&SPI, &FastCommandByte, 1, 10);
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	0021      	movs	r1, r4
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <ADC_Full_Reset+0x34>)
 8000ece:	f001 fdd1 	bl	8002a74 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	f001 f822 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	20000050 	.word	0x20000050
 8000ee4:	200004dc 	.word	0x200004dc

08000ee8 <ADC_Proccess_Data>:




void ADC_Proccess_Data(void)
{
 8000ee8:	b510      	push	{r4, lr}
	// Check errors
	ADC_Check_Errors(ADCReceivedData[0]);
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <ADC_Proccess_Data+0x34>)

	// Check if new data available
	if (!(ADCReceivedData[0] & ADC_STATUS_DATA_READY_MASK))
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	0752      	lsls	r2, r2, #29
 8000ef0:	d412      	bmi.n	8000f18 <ADC_Proccess_Data+0x30>
	{
		//Transfer array of bytes to the 32 bit variable:
		ReadData = ADCReceivedData[1];
		ReadData <<= 8;
		ReadData += ADCReceivedData[2];
 8000ef2:	7898      	ldrb	r0, [r3, #2]
 8000ef4:	785a      	ldrb	r2, [r3, #1]
 8000ef6:	0200      	lsls	r0, r0, #8
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <ADC_Proccess_Data+0x38>)
 8000efa:	4310      	orrs	r0, r2
 8000efc:	ba42      	rev16	r2, r0
 8000efe:	801a      	strh	r2, [r3, #0]
 8000f00:	bac0      	revsh	r0, r0

		// Calculating real Voltage
		Voltage =  VREF * ReadData / 32768;
 8000f02:	f7ff fea3 	bl	8000c4c <__aeabi_i2f>
 8000f06:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <ADC_Proccess_Data+0x3c>)
 8000f08:	f7ff fb9e 	bl	8000648 <__aeabi_fmul>
 8000f0c:	21e0      	movs	r1, #224	@ 0xe0
 8000f0e:	0589      	lsls	r1, r1, #22
 8000f10:	f7ff fb9a 	bl	8000648 <__aeabi_fmul>
 8000f14:	4c04      	ldr	r4, [pc, #16]	@ (8000f28 <ADC_Proccess_Data+0x40>)
 8000f16:	6020      	str	r0, [r4, #0]
	{
		// if no new data available, just return previous value
	}
	// Check if new data available to read from ADC:

}
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	20000032 	.word	0x20000032
 8000f20:	20000030 	.word	0x20000030
 8000f24:	40400000 	.word	0x40400000
 8000f28:	200004a4 	.word	0x200004a4

08000f2c <ADC_Get_Measured_DATA>:
{
 8000f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000f2e:	2590      	movs	r5, #144	@ 0x90
	FastCommandByte += COMMAND_STATIC_READ;
 8000f30:	2341      	movs	r3, #65	@ 0x41
 8000f32:	4c0c      	ldr	r4, [pc, #48]	@ (8000f64 <ADC_Get_Measured_DATA+0x38>)
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000f34:	05ed      	lsls	r5, r5, #23
 8000f36:	0028      	movs	r0, r5
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2110      	movs	r1, #16
	FastCommandByte += COMMAND_STATIC_READ;
 8000f3c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_RESET);
 8000f3e:	f000 ffef 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&SPI, &FastCommandByte, ADCReceivedData, 3, 10);
 8000f42:	230a      	movs	r3, #10
 8000f44:	0021      	movs	r1, r4
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <ADC_Get_Measured_DATA+0x3c>)
 8000f4a:	3b07      	subs	r3, #7
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <ADC_Get_Measured_DATA+0x40>)
 8000f4e:	f001 fe53 	bl	8002bf8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000f52:	0028      	movs	r0, r5
 8000f54:	2201      	movs	r2, #1
 8000f56:	2110      	movs	r1, #16
 8000f58:	f000 ffe2 	bl	8001f20 <HAL_GPIO_WritePin>
	ADC_Proccess_Data();
 8000f5c:	f7ff ffc4 	bl	8000ee8 <ADC_Proccess_Data>
}
 8000f60:	2000      	movs	r0, #0
 8000f62:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000f64:	20000050 	.word	0x20000050
 8000f68:	20000032 	.word	0x20000032
 8000f6c:	200004dc 	.word	0x200004dc

08000f70 <Expander_Init>:
 * @return				- none
 */
void Expander_Init(Expander_Handle_t *pExpander)
{
	//temporary variable to create an I2C message
	uint8_t temp[2] = {0};
 8000f70:	2300      	movs	r3, #0
{
 8000f72:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Reset Output register
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
	temp[1] = 0;
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000f74:	270a      	movs	r7, #10
{
 8000f76:	b085      	sub	sp, #20
	uint8_t temp[2] = {0};
 8000f78:	ac03      	add	r4, sp, #12
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000f7a:	4e11      	ldr	r6, [pc, #68]	@ (8000fc0 <Expander_Init+0x50>)
	uint8_t temp[2] = {0};
 8000f7c:	8023      	strh	r3, [r4, #0]
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000f7e:	3301      	adds	r3, #1
{
 8000f80:	0005      	movs	r5, r0
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000f82:	7801      	ldrb	r1, [r0, #0]
	temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000f84:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000f86:	0022      	movs	r2, r4
 8000f88:	0030      	movs	r0, r6
 8000f8a:	9700      	str	r7, [sp, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	f001 f9b9 	bl	8002304 <HAL_I2C_Master_Transmit>

	// Sending configuration register to the Device
	temp[0] = COMMAND_CONFIGURATION_REGISTER;
 8000f92:	2303      	movs	r3, #3
 8000f94:	7023      	strb	r3, [r4, #0]
	temp[1] = pExpander->ConfigReg;
 8000f96:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000f98:	7829      	ldrb	r1, [r5, #0]
	temp[1] = pExpander->ConfigReg;
 8000f9a:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000f9c:	0022      	movs	r2, r4
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	9700      	str	r7, [sp, #0]
 8000fa4:	f001 f9ae 	bl	8002304 <HAL_I2C_Master_Transmit>

	// Sending polarity register to the Device
	temp[0] = COMMAND_POLARITY_INVERSION_REGISTER;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	7023      	strb	r3, [r4, #0]
	temp[1] = pExpander->PolarityPortReg;
 8000fac:	78ea      	ldrb	r2, [r5, #3]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000fae:	7829      	ldrb	r1, [r5, #0]
	temp[1] = pExpander->PolarityPortReg;
 8000fb0:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000fb2:	0030      	movs	r0, r6
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	9700      	str	r7, [sp, #0]
 8000fb8:	f001 f9a4 	bl	8002304 <HAL_I2C_Master_Transmit>



}
 8000fbc:	b005      	add	sp, #20
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc0:	20000540 	.word	0x20000540

08000fc4 <Expander_Write_Single_Bit>:

 *
 * @return				- Error if the pin is configure as an input and user try to assign value to this pin
 */
DeviceState Expander_Write_Single_Bit(Expander_Handle_t *pExpander, uint8_t BitNumber, PinState State)
{
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Before writing to the GPIO pin,
	// we need to make sure that this particular bin was configure as an output
	if (!((pExpander->ConfigReg) & (1 << BitNumber)))
 8000fc6:	7903      	ldrb	r3, [r0, #4]
 8000fc8:	2501      	movs	r5, #1
 8000fca:	410b      	asrs	r3, r1
{
 8000fcc:	0004      	movs	r4, r0
 8000fce:	0016      	movs	r6, r2
			return DEVICE_OK;
		}
	}
	else
	{
		return DEVICE_ERROR;
 8000fd0:	0028      	movs	r0, r5
{
 8000fd2:	b085      	sub	sp, #20
	if (!((pExpander->ConfigReg) & (1 << BitNumber)))
 8000fd4:	422b      	tst	r3, r5
 8000fd6:	d112      	bne.n	8000ffe <Expander_Write_Single_Bit+0x3a>
			pExpander->OutputPortReg |= 1 << BitNumber;
 8000fd8:	002f      	movs	r7, r5
 8000fda:	78a3      	ldrb	r3, [r4, #2]
 8000fdc:	408f      	lsls	r7, r1
 8000fde:	480b      	ldr	r0, [pc, #44]	@ (800100c <Expander_Write_Single_Bit+0x48>)
			HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000fe0:	7821      	ldrb	r1, [r4, #0]
 8000fe2:	aa03      	add	r2, sp, #12
		if (State == PIN_SET)
 8000fe4:	42ae      	cmp	r6, r5
 8000fe6:	d10c      	bne.n	8001002 <Expander_Write_Single_Bit+0x3e>
			pExpander->OutputPortReg |= 1 << BitNumber;
 8000fe8:	433b      	orrs	r3, r7
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	70a3      	strb	r3, [r4, #2]
			temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8000fee:	7016      	strb	r6, [r2, #0]
			temp[1] = pExpander->OutputPortReg;
 8000ff0:	7053      	strb	r3, [r2, #1]
			HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, temp, 2, 10);
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	3b08      	subs	r3, #8
 8000ff8:	f001 f984 	bl	8002304 <HAL_I2C_Master_Transmit>
			return DEVICE_OK;
 8000ffc:	2000      	movs	r0, #0
	}

}
 8000ffe:	b005      	add	sp, #20
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pExpander->OutputPortReg &=~(1 << BitNumber);
 8001002:	43bb      	bics	r3, r7
 8001004:	70a3      	strb	r3, [r4, #2]
			temp[0] = COMMAND_OUTPUT_PORT_REGISTER;
 8001006:	7015      	strb	r5, [r2, #0]
 8001008:	e7f2      	b.n	8000ff0 <Expander_Write_Single_Bit+0x2c>
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	20000540 	.word	0x20000540

08001010 <Expander_Read_Byte>:
 * @param[in]			- Address of Expander handler
 *
 * @return				- value of input register of Expander
 */
uint8_t Expander_Read_Byte(Expander_Handle_t *pExpander)
{
 8001010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t temp = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	466a      	mov	r2, sp
	// First we will program the command, what we want to read
	// We need to read input port
	temp = COMMAND_INPUT_PORT_REGISTER;
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, &temp, 1, 10);
 8001016:	260a      	movs	r6, #10
	uint8_t temp = 0;
 8001018:	73d3      	strb	r3, [r2, #15]
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, &temp, 1, 10);
 800101a:	220f      	movs	r2, #15
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <Expander_Read_Byte+0x38>)
 800101e:	7801      	ldrb	r1, [r0, #0]
{
 8001020:	0005      	movs	r5, r0
	HAL_I2C_Master_Transmit(&I2C, pExpander->ExpanderAddress, &temp, 1, 10);
 8001022:	446a      	add	r2, sp
 8001024:	0020      	movs	r0, r4
 8001026:	9600      	str	r6, [sp, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	f001 f96b 	bl	8002304 <HAL_I2C_Master_Transmit>

	// Now we can read the content of the Input register:
	HAL_I2C_Master_Receive(&I2C, pExpander->ExpanderAddress, &temp, 1, 10);
 800102e:	220f      	movs	r2, #15
 8001030:	7829      	ldrb	r1, [r5, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	0020      	movs	r0, r4
 8001036:	9600      	str	r6, [sp, #0]
 8001038:	446a      	add	r2, sp
 800103a:	f001 fa03 	bl	8002444 <HAL_I2C_Master_Receive>

	return temp;
 800103e:	466b      	mov	r3, sp
 8001040:	7bd8      	ldrb	r0, [r3, #15]
}
 8001042:	b004      	add	sp, #16
 8001044:	bd70      	pop	{r4, r5, r6, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	20000540 	.word	0x20000540

0800104c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800104c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800104e:	2217      	movs	r2, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001050:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 8001052:	446a      	add	r2, sp
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001054:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 8001056:	7010      	strb	r0, [r2, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	3302      	adds	r3, #2
 800105c:	9200      	str	r2, [sp, #0]
 800105e:	2178      	movs	r1, #120	@ 0x78
 8001060:	2200      	movs	r2, #0
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <ssd1306_WriteCommand+0x24>)
 8001066:	f001 fa7d 	bl	8002564 <HAL_I2C_Mem_Write>
}
 800106a:	b007      	add	sp, #28
 800106c:	bd00      	pop	{pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	20000540 	.word	0x20000540

08001074 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001076:	2301      	movs	r3, #1
 8001078:	4c06      	ldr	r4, [pc, #24]	@ (8001094 <ssd1306_WriteData+0x20>)
 800107a:	425b      	negs	r3, r3
 800107c:	b289      	uxth	r1, r1
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	9101      	str	r1, [sp, #4]
 8001082:	9000      	str	r0, [sp, #0]
 8001084:	2240      	movs	r2, #64	@ 0x40
 8001086:	2178      	movs	r1, #120	@ 0x78
 8001088:	0020      	movs	r0, r4
 800108a:	3302      	adds	r3, #2
 800108c:	f001 fa6a 	bl	8002564 <HAL_I2C_Mem_Write>
}
 8001090:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	20000540 	.word	0x20000540

08001098 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001098:	1e43      	subs	r3, r0, #1
 800109a:	4198      	sbcs	r0, r3
 800109c:	2280      	movs	r2, #128	@ 0x80
void ssd1306_Fill(SSD1306_COLOR color) {
 800109e:	b510      	push	{r4, lr}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010a0:	4241      	negs	r1, r0
 80010a2:	b2c9      	uxtb	r1, r1
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <ssd1306_Fill+0x18>)
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	f001 ff46 	bl	8002f38 <memset>
}
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	20000072 	.word	0x20000072

080010b4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	24b0      	movs	r4, #176	@ 0xb0
 80010b8:	4d09      	ldr	r5, [pc, #36]	@ (80010e0 <ssd1306_UpdateScreen+0x2c>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff ffc6 	bl	800104c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ffc3 	bl	800104c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010c6:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80010c8:	2010      	movs	r0, #16
 80010ca:	f7ff ffbf 	bl	800104c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010ce:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80010d0:	0028      	movs	r0, r5
 80010d2:	2180      	movs	r1, #128	@ 0x80
 80010d4:	f7ff ffce 	bl	8001074 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010d8:	3580      	adds	r5, #128	@ 0x80
 80010da:	2cb8      	cmp	r4, #184	@ 0xb8
 80010dc:	d1ed      	bne.n	80010ba <ssd1306_UpdateScreen+0x6>
    }
}
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	20000072 	.word	0x20000072

080010e4 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010e4:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010e6:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0e      	blt.n	800110a <ssd1306_DrawPixel+0x26>
 80010ec:	293f      	cmp	r1, #63	@ 0x3f
 80010ee:	d80c      	bhi.n	800110a <ssd1306_DrawPixel+0x26>
        return;
    }

    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010f0:	2407      	movs	r4, #7
 80010f2:	08cb      	lsrs	r3, r1, #3
 80010f4:	01db      	lsls	r3, r3, #7
 80010f6:	4d06      	ldr	r5, [pc, #24]	@ (8001110 <ssd1306_DrawPixel+0x2c>)
 80010f8:	4021      	ands	r1, r4
 80010fa:	1818      	adds	r0, r3, r0
 80010fc:	3c06      	subs	r4, #6
 80010fe:	408c      	lsls	r4, r1
 8001100:	5c2b      	ldrb	r3, [r5, r0]
    if(color == White) {
 8001102:	2a01      	cmp	r2, #1
 8001104:	d102      	bne.n	800110c <ssd1306_DrawPixel+0x28>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001106:	4323      	orrs	r3, r4
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001108:	542b      	strb	r3, [r5, r0]
    }
}
 800110a:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800110c:	43a3      	bics	r3, r4
 800110e:	e7fb      	b.n	8001108 <ssd1306_DrawPixel+0x24>
 8001110:	20000072 	.word	0x20000072

08001114 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	0004      	movs	r4, r0
 8001118:	b08d      	sub	sp, #52	@ 0x34
 800111a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800111c:	ab12      	add	r3, sp, #72	@ 0x48
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	a809      	add	r0, sp, #36	@ 0x24
 8001122:	9307      	str	r3, [sp, #28]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001124:	0023      	movs	r3, r4
 8001126:	3b20      	subs	r3, #32
 8001128:	9304      	str	r3, [sp, #16]
 800112a:	466b      	mov	r3, sp
 800112c:	7c1b      	ldrb	r3, [r3, #16]
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800112e:	9109      	str	r1, [sp, #36]	@ 0x24
 8001130:	920a      	str	r2, [sp, #40]	@ 0x28
    if (ch < 32 || ch > 126)
 8001132:	2b5e      	cmp	r3, #94	@ 0x5e
 8001134:	d848      	bhi.n	80011c8 <ssd1306_WriteChar+0xb4>
 8001136:	7803      	ldrb	r3, [r0, #0]
 8001138:	9303      	str	r3, [sp, #12]
        return 0;

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <ssd1306_WriteChar+0xb8>)
 800113c:	9903      	ldr	r1, [sp, #12]
 800113e:	881a      	ldrh	r2, [r3, #0]
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	1852      	adds	r2, r2, r1
 8001144:	2a80      	cmp	r2, #128	@ 0x80
 8001146:	dc3f      	bgt.n	80011c8 <ssd1306_WriteChar+0xb4>
 8001148:	7847      	ldrb	r7, [r0, #1]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800114a:	885b      	ldrh	r3, [r3, #2]
 800114c:	9305      	str	r3, [sp, #20]
 800114e:	19db      	adds	r3, r3, r7
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001150:	2b40      	cmp	r3, #64	@ 0x40
 8001152:	dc39      	bgt.n	80011c8 <ssd1306_WriteChar+0xb4>
        // Not enough space on current line
        return 0;
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001154:	2600      	movs	r6, #0
 8001156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001158:	9306      	str	r3, [sp, #24]
 800115a:	9b04      	ldr	r3, [sp, #16]
 800115c:	437b      	muls	r3, r7
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	42b7      	cmp	r7, r6
 8001164:	d80d      	bhi.n	8001182 <ssd1306_WriteChar+0x6e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001166:	9a06      	ldr	r2, [sp, #24]
 8001168:	9b03      	ldr	r3, [sp, #12]
 800116a:	2a00      	cmp	r2, #0
 800116c:	d002      	beq.n	8001174 <ssd1306_WriteChar+0x60>
 800116e:	0013      	movs	r3, r2
 8001170:	9a04      	ldr	r2, [sp, #16]
 8001172:	5c9b      	ldrb	r3, [r3, r2]
 8001174:	9901      	ldr	r1, [sp, #4]
 8001176:	4a15      	ldr	r2, [pc, #84]	@ (80011cc <ssd1306_WriteChar+0xb8>)
 8001178:	18cb      	adds	r3, r1, r3
 800117a:	8013      	strh	r3, [r2, #0]

    // Return written char for validation
    return ch;
}
 800117c:	0020      	movs	r0, r4
 800117e:	b00d      	add	sp, #52	@ 0x34
 8001180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.width; j++) {
 8001182:	2500      	movs	r5, #0
        b = Font.data[(ch - 32) * Font.height + i];
 8001184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001186:	9a02      	ldr	r2, [sp, #8]
 8001188:	5a9b      	ldrh	r3, [r3, r2]
 800118a:	9308      	str	r3, [sp, #32]
        for(j = 0; j < Font.width; j++) {
 800118c:	9b03      	ldr	r3, [sp, #12]
 800118e:	42ab      	cmp	r3, r5
 8001190:	d804      	bhi.n	800119c <ssd1306_WriteChar+0x88>
    for(i = 0; i < Font.height; i++) {
 8001192:	9b02      	ldr	r3, [sp, #8]
 8001194:	3601      	adds	r6, #1
 8001196:	3302      	adds	r3, #2
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	e7e2      	b.n	8001162 <ssd1306_WriteChar+0x4e>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800119c:	9b01      	ldr	r3, [sp, #4]
            if((b << j) & 0x8000)  {
 800119e:	2280      	movs	r2, #128	@ 0x80
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011a0:	18e8      	adds	r0, r5, r3
 80011a2:	9b05      	ldr	r3, [sp, #20]
            if((b << j) & 0x8000)  {
 80011a4:	0212      	lsls	r2, r2, #8
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011a6:	18f1      	adds	r1, r6, r3
            if((b << j) & 0x8000)  {
 80011a8:	9b08      	ldr	r3, [sp, #32]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011aa:	b2c0      	uxtb	r0, r0
            if((b << j) & 0x8000)  {
 80011ac:	40ab      	lsls	r3, r5
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011ae:	b2c9      	uxtb	r1, r1
            if((b << j) & 0x8000)  {
 80011b0:	4213      	tst	r3, r2
 80011b2:	d004      	beq.n	80011be <ssd1306_WriteChar+0xaa>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011b4:	9a07      	ldr	r2, [sp, #28]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011b6:	f7ff ff95 	bl	80010e4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80011ba:	3501      	adds	r5, #1
 80011bc:	e7e6      	b.n	800118c <ssd1306_WriteChar+0x78>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011be:	9b07      	ldr	r3, [sp, #28]
 80011c0:	425a      	negs	r2, r3
 80011c2:	415a      	adcs	r2, r3
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	e7f6      	b.n	80011b6 <ssd1306_WriteChar+0xa2>
        return 0;
 80011c8:	2400      	movs	r4, #0
 80011ca:	e7d7      	b.n	800117c <ssd1306_WriteChar+0x68>
 80011cc:	2000006c 	.word	0x2000006c

080011d0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80011d0:	b530      	push	{r4, r5, lr}
 80011d2:	0004      	movs	r4, r0
 80011d4:	b087      	sub	sp, #28
 80011d6:	9305      	str	r3, [sp, #20]
 80011d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80011da:	781d      	ldrb	r5, [r3, #0]
 80011dc:	9103      	str	r1, [sp, #12]
 80011de:	9204      	str	r2, [sp, #16]
    while (*str) {
 80011e0:	7820      	ldrb	r0, [r4, #0]
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d101      	bne.n	80011ea <ssd1306_WriteString+0x1a>
        str++;
    }

    // Everything ok
    return *str;
}
 80011e6:	b007      	add	sp, #28
 80011e8:	bd30      	pop	{r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80011ea:	9b05      	ldr	r3, [sp, #20]
 80011ec:	9903      	ldr	r1, [sp, #12]
 80011ee:	9a04      	ldr	r2, [sp, #16]
 80011f0:	9500      	str	r5, [sp, #0]
 80011f2:	f7ff ff8f 	bl	8001114 <ssd1306_WriteChar>
 80011f6:	0003      	movs	r3, r0
 80011f8:	7820      	ldrb	r0, [r4, #0]
 80011fa:	4283      	cmp	r3, r0
 80011fc:	d1f3      	bne.n	80011e6 <ssd1306_WriteString+0x16>
        str++;
 80011fe:	3401      	adds	r4, #1
 8001200:	e7ee      	b.n	80011e0 <ssd1306_WriteString+0x10>
	...

08001204 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001204:	4b01      	ldr	r3, [pc, #4]	@ (800120c <ssd1306_SetCursor+0x8>)
 8001206:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001208:	8059      	strh	r1, [r3, #2]
}
 800120a:	4770      	bx	lr
 800120c:	2000006c 	.word	0x2000006c

08001210 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	ab0c      	add	r3, sp, #48	@ 0x30
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0016      	movs	r6, r2
 800121c:	9305      	str	r3, [sp, #20]
    int32_t deltaX = abs(x2 - x1);
 800121e:	1a13      	subs	r3, r2, r0
 8001220:	17da      	asrs	r2, r3, #31
 8001222:	189b      	adds	r3, r3, r2
 8001224:	4053      	eors	r3, r2
 8001226:	9301      	str	r3, [sp, #4]
    int32_t deltaY = abs(y2 - y1);
 8001228:	9b00      	ldr	r3, [sp, #0]
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800122a:	0005      	movs	r5, r0
    int32_t deltaY = abs(y2 - y1);
 800122c:	1a5b      	subs	r3, r3, r1
 800122e:	17da      	asrs	r2, r3, #31
 8001230:	189b      	adds	r3, r3, r2
 8001232:	4053      	eors	r3, r2
 8001234:	9302      	str	r3, [sp, #8]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001236:	2301      	movs	r3, #1
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001238:	000c      	movs	r4, r1
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	4286      	cmp	r6, r0
 800123e:	d801      	bhi.n	8001244 <ssd1306_Line+0x34>
 8001240:	3b02      	subs	r3, #2
 8001242:	9303      	str	r3, [sp, #12]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001244:	2301      	movs	r3, #1
 8001246:	9304      	str	r3, [sp, #16]
 8001248:	9b00      	ldr	r3, [sp, #0]
 800124a:	42a3      	cmp	r3, r4
 800124c:	d802      	bhi.n	8001254 <ssd1306_Line+0x44>
 800124e:	2301      	movs	r3, #1
 8001250:	425b      	negs	r3, r3
 8001252:	9304      	str	r3, [sp, #16]
    int32_t error = deltaX - deltaY;
 8001254:	9a02      	ldr	r2, [sp, #8]
 8001256:	9b01      	ldr	r3, [sp, #4]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8001258:	0030      	movs	r0, r6
    int32_t error = deltaX - deltaY;
 800125a:	1a9f      	subs	r7, r3, r2
    ssd1306_DrawPixel(x2, y2, color);
 800125c:	9900      	ldr	r1, [sp, #0]
 800125e:	9a05      	ldr	r2, [sp, #20]
 8001260:	f7ff ff40 	bl	80010e4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001264:	42b5      	cmp	r5, r6
 8001266:	d104      	bne.n	8001272 <ssd1306_Line+0x62>
 8001268:	9b00      	ldr	r3, [sp, #0]
 800126a:	429c      	cmp	r4, r3
 800126c:	d101      	bne.n	8001272 <ssd1306_Line+0x62>
            error += deltaX;
            y1 += signY;
        }
    }
    return;
}
 800126e:	b007      	add	sp, #28
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ssd1306_DrawPixel(x1, y1, color);
 8001272:	9a05      	ldr	r2, [sp, #20]
 8001274:	0021      	movs	r1, r4
 8001276:	0028      	movs	r0, r5
 8001278:	f7ff ff34 	bl	80010e4 <ssd1306_DrawPixel>
        if(error2 > -deltaY) {
 800127c:	9a02      	ldr	r2, [sp, #8]
        error2 = error * 2;
 800127e:	007b      	lsls	r3, r7, #1
        if(error2 > -deltaY) {
 8001280:	4252      	negs	r2, r2
 8001282:	429a      	cmp	r2, r3
 8001284:	da04      	bge.n	8001290 <ssd1306_Line+0x80>
            error -= deltaY;
 8001286:	9a02      	ldr	r2, [sp, #8]
 8001288:	1abf      	subs	r7, r7, r2
            x1 += signX;
 800128a:	9a03      	ldr	r2, [sp, #12]
 800128c:	18ad      	adds	r5, r5, r2
 800128e:	b2ed      	uxtb	r5, r5
        if(error2 < deltaX) {
 8001290:	9a01      	ldr	r2, [sp, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	dde6      	ble.n	8001264 <ssd1306_Line+0x54>
            y1 += signY;
 8001296:	9b04      	ldr	r3, [sp, #16]
            error += deltaX;
 8001298:	18bf      	adds	r7, r7, r2
            y1 += signY;
 800129a:	18e4      	adds	r4, r4, r3
 800129c:	b2e4      	uxtb	r4, r4
 800129e:	e7e1      	b.n	8001264 <ssd1306_Line+0x54>

080012a0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80012a0:	b510      	push	{r4, lr}
 80012a2:	0004      	movs	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012a4:	2081      	movs	r0, #129	@ 0x81
 80012a6:	f7ff fed1 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012aa:	0020      	movs	r0, r4
 80012ac:	f7ff fece 	bl	800104c <ssd1306_WriteCommand>
}
 80012b0:	bd10      	pop	{r4, pc}
	...

080012b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012b4:	0003      	movs	r3, r0
 80012b6:	b510      	push	{r4, lr}
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 80012b8:	20ae      	movs	r0, #174	@ 0xae
    if (on) {
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <ssd1306_SetDisplayOn+0xe>
        SSD1306.DisplayOn = 1;
 80012be:	2301      	movs	r3, #1
        value = 0xAF;   // Display on
 80012c0:	18c0      	adds	r0, r0, r3
 80012c2:	4a02      	ldr	r2, [pc, #8]	@ (80012cc <ssd1306_SetDisplayOn+0x18>)
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 80012c4:	7153      	strb	r3, [r2, #5]
    ssd1306_WriteCommand(value);
 80012c6:	f7ff fec1 	bl	800104c <ssd1306_WriteCommand>
}
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	2000006c 	.word	0x2000006c

080012d0 <ssd1306_Init>:
void ssd1306_Init(void) {
 80012d0:	b510      	push	{r4, lr}
    HAL_Delay(100);
 80012d2:	2064      	movs	r0, #100	@ 0x64
 80012d4:	f000 fce8 	bl	8001ca8 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffeb 	bl	80012b4 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012de:	2020      	movs	r0, #32
 80012e0:	f7ff feb4 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff feb1 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012ea:	20b0      	movs	r0, #176	@ 0xb0
 80012ec:	f7ff feae 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012f0:	20c8      	movs	r0, #200	@ 0xc8
 80012f2:	f7ff feab 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fea8 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012fc:	2010      	movs	r0, #16
 80012fe:	f7ff fea5 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001302:	2040      	movs	r0, #64	@ 0x40
 8001304:	f7ff fea2 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8001308:	20ff      	movs	r0, #255	@ 0xff
 800130a:	f7ff ffc9 	bl	80012a0 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800130e:	20a1      	movs	r0, #161	@ 0xa1
 8001310:	f7ff fe9c 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001314:	20a6      	movs	r0, #166	@ 0xa6
 8001316:	f7ff fe99 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800131a:	20a8      	movs	r0, #168	@ 0xa8
 800131c:	f7ff fe96 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001320:	203f      	movs	r0, #63	@ 0x3f
 8001322:	f7ff fe93 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001326:	20a4      	movs	r0, #164	@ 0xa4
 8001328:	f7ff fe90 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800132c:	20d3      	movs	r0, #211	@ 0xd3
 800132e:	f7ff fe8d 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fe8a 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001338:	20d5      	movs	r0, #213	@ 0xd5
 800133a:	f7ff fe87 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800133e:	20f0      	movs	r0, #240	@ 0xf0
 8001340:	f7ff fe84 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001344:	20d9      	movs	r0, #217	@ 0xd9
 8001346:	f7ff fe81 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800134a:	2022      	movs	r0, #34	@ 0x22
 800134c:	f7ff fe7e 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001350:	20da      	movs	r0, #218	@ 0xda
 8001352:	f7ff fe7b 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001356:	2012      	movs	r0, #18
 8001358:	f7ff fe78 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 800135c:	20db      	movs	r0, #219	@ 0xdb
 800135e:	f7ff fe75 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001362:	2020      	movs	r0, #32
 8001364:	f7ff fe72 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001368:	208d      	movs	r0, #141	@ 0x8d
 800136a:	f7ff fe6f 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800136e:	2014      	movs	r0, #20
 8001370:	f7ff fe6c 	bl	800104c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff ff9d 	bl	80012b4 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fe8c 	bl	8001098 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001380:	f7ff fe98 	bl	80010b4 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8001384:	2200      	movs	r2, #0
 8001386:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <ssd1306_Init+0xc4>)
 8001388:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800138a:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 800138c:	3201      	adds	r2, #1
 800138e:	711a      	strb	r2, [r3, #4]
}
 8001390:	bd10      	pop	{r4, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	2000006c 	.word	0x2000006c

08001398 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001398:	2301      	movs	r3, #1
 800139a:	4927      	ldr	r1, [pc, #156]	@ (8001438 <SystemClock_Config+0xa0>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b510      	push	{r4, lr}
 800139e:	680a      	ldr	r2, [r1, #0]
 80013a0:	439a      	bics	r2, r3
 80013a2:	431a      	orrs	r2, r3
 80013a4:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80013a6:	680a      	ldr	r2, [r1, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80013a8:	421a      	tst	r2, r3
 80013aa:	d0fc      	beq.n	80013a6 <SystemClock_Config+0xe>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013ac:	4c23      	ldr	r4, [pc, #140]	@ (800143c <SystemClock_Config+0xa4>)
 80013ae:	6822      	ldr	r2, [r4, #0]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80013b4:	2302      	movs	r3, #2
 80013b6:	6822      	ldr	r2, [r4, #0]
  {
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80013b8:	421a      	tst	r2, r3
 80013ba:	d0fc      	beq.n	80013b6 <SystemClock_Config+0x1e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80013bc:	23f8      	movs	r3, #248	@ 0xf8
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	439a      	bics	r2, r3
 80013c2:	3b78      	subs	r3, #120	@ 0x78
 80013c4:	4313      	orrs	r3, r2
 80013c6:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80013c8:	6862      	ldr	r2, [r4, #4]
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <SystemClock_Config+0xa8>)
 80013cc:	401a      	ands	r2, r3
 80013ce:	23a0      	movs	r3, #160	@ 0xa0
 80013d0:	039b      	lsls	r3, r3, #14
 80013d2:	4313      	orrs	r3, r2
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80013d4:	220f      	movs	r2, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80013d6:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80013d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80013da:	4393      	bics	r3, r2
 80013dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	045b      	lsls	r3, r3, #17
 80013e4:	4313      	orrs	r3, r2
 80013e6:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	049b      	lsls	r3, r3, #18
 80013ec:	6822      	ldr	r2, [r4, #0]
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80013ee:	421a      	tst	r2, r3
 80013f0:	d0fc      	beq.n	80013ec <SystemClock_Config+0x54>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013f2:	22f0      	movs	r2, #240	@ 0xf0
 80013f4:	6863      	ldr	r3, [r4, #4]
 80013f6:	4393      	bics	r3, r2
 80013f8:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80013fa:	6863      	ldr	r3, [r4, #4]
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <SystemClock_Config+0xac>)
 80013fe:	4013      	ands	r3, r2
 8001400:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001402:	2303      	movs	r3, #3
 8001404:	6862      	ldr	r2, [r4, #4]
 8001406:	439a      	bics	r2, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	4313      	orrs	r3, r2
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800140c:	220c      	movs	r2, #12
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800140e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001410:	6863      	ldr	r3, [r4, #4]
 8001412:	4013      	ands	r3, r2
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001414:	2b08      	cmp	r3, #8
 8001416:	d1fb      	bne.n	8001410 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8001418:	480b      	ldr	r0, [pc, #44]	@ (8001448 <SystemClock_Config+0xb0>)
 800141a:	f001 fd87 	bl	8002f2c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2003      	movs	r0, #3
 8001420:	f000 fbfc 	bl	8001c1c <HAL_InitTick>
 8001424:	2800      	cmp	r0, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x94>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142a:	e7fe      	b.n	800142a <SystemClock_Config+0x92>
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 800142c:	2210      	movs	r2, #16
 800142e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001430:	4393      	bics	r3, r2
 8001432:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001434:	bd10      	pop	{r4, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40022000 	.word	0x40022000
 800143c:	40021000 	.word	0x40021000
 8001440:	ffc2ffff 	.word	0xffc2ffff
 8001444:	fffff8ff 	.word	0xfffff8ff
 8001448:	02dc6c00 	.word	0x02dc6c00

0800144c <intToStr>:
void intToStr(int N, char *str) {
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	0007      	movs	r7, r0
 8001450:	000d      	movs	r5, r1
    if (N < 0)
 8001452:	000e      	movs	r6, r1
 8001454:	17c3      	asrs	r3, r0, #31
 8001456:	18c4      	adds	r4, r0, r3
 8001458:	405c      	eors	r4, r3
    while (N > 0) {
 800145a:	2c00      	cmp	r4, #0
 800145c:	d10b      	bne.n	8001476 <intToStr+0x2a>
 800145e:	1b73      	subs	r3, r6, r5
    if (sign < 0) {
 8001460:	2f00      	cmp	r7, #0
 8001462:	da02      	bge.n	800146a <intToStr+0x1e>
        str[i++] = '-';
 8001464:	222d      	movs	r2, #45	@ 0x2d
 8001466:	3301      	adds	r3, #1
 8001468:	7032      	strb	r2, [r6, #0]
    str[i] = '\0';
 800146a:	2200      	movs	r2, #0
 800146c:	54ea      	strb	r2, [r5, r3]
    for (int j = 0, k = i - 1; j < k; j++, k--) {
 800146e:	3b01      	subs	r3, #1
 8001470:	429c      	cmp	r4, r3
 8001472:	db0d      	blt.n	8001490 <intToStr+0x44>
}
 8001474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str[i++] = N % 10 + '0';
 8001476:	0020      	movs	r0, r4
 8001478:	210a      	movs	r1, #10
 800147a:	f7fe ffbf 	bl	80003fc <__aeabi_idivmod>
 800147e:	3130      	adds	r1, #48	@ 0x30
 8001480:	7031      	strb	r1, [r6, #0]
      	N /= 10;
 8001482:	0020      	movs	r0, r4
 8001484:	210a      	movs	r1, #10
 8001486:	f7fe fed3 	bl	8000230 <__divsi3>
 800148a:	3601      	adds	r6, #1
 800148c:	0004      	movs	r4, r0
 800148e:	e7e4      	b.n	800145a <intToStr+0xe>
        char temp = str[j];
 8001490:	5d2a      	ldrb	r2, [r5, r4]
        str[j] = str[k];
 8001492:	5ce9      	ldrb	r1, [r5, r3]
 8001494:	5529      	strb	r1, [r5, r4]
        str[k] = temp;
 8001496:	54ea      	strb	r2, [r5, r3]
    for (int j = 0, k = i - 1; j < k; j++, k--) {
 8001498:	3401      	adds	r4, #1
 800149a:	e7e8      	b.n	800146e <intToStr+0x22>

0800149c <HAL_GPIO_EXTI_Callback>:
{
 800149c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800149e:	0005      	movs	r5, r0
	if (GPIO_Pin == IOEXPANDER_INT_L_Pin)
 80014a0:	2801      	cmp	r0, #1
 80014a2:	d154      	bne.n	800154e <HAL_GPIO_EXTI_Callback+0xb2>
		if (Expander_Read_Byte(&MyExpander) & (1<<BUTTON_INCREASE))
 80014a4:	4c2e      	ldr	r4, [pc, #184]	@ (8001560 <HAL_GPIO_EXTI_Callback+0xc4>)
 80014a6:	0020      	movs	r0, r4
 80014a8:	f7ff fdb2 	bl	8001010 <Expander_Read_Byte>
 80014ac:	2340      	movs	r3, #64	@ 0x40
 80014ae:	0006      	movs	r6, r0
 80014b0:	401e      	ands	r6, r3
 80014b2:	4218      	tst	r0, r3
 80014b4:	d018      	beq.n	80014e8 <HAL_GPIO_EXTI_Callback+0x4c>
			if (SetPoint <85)
 80014b6:	4c2b      	ldr	r4, [pc, #172]	@ (8001564 <HAL_GPIO_EXTI_Callback+0xc8>)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	2b54      	cmp	r3, #84	@ 0x54
 80014bc:	dc01      	bgt.n	80014c2 <HAL_GPIO_EXTI_Callback+0x26>
				SetPoint += 5;
 80014be:	3305      	adds	r3, #5
				SetPoint -= 5;
 80014c0:	6023      	str	r3, [r4, #0]
			ssd1306_SetCursor(0,34);
 80014c2:	2122      	movs	r1, #34	@ 0x22
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fe9d 	bl	8001204 <ssd1306_SetCursor>
			intToStr(SetPoint,TempString);
 80014ca:	4d27      	ldr	r5, [pc, #156]	@ (8001568 <HAL_GPIO_EXTI_Callback+0xcc>)
 80014cc:	6820      	ldr	r0, [r4, #0]
 80014ce:	0029      	movs	r1, r5
 80014d0:	f7ff ffbc 	bl	800144c <intToStr>
			ssd1306_WriteString(TempString, Font_7x10, White);
 80014d4:	2201      	movs	r2, #1
 80014d6:	0028      	movs	r0, r5
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_GPIO_EXTI_Callback+0xd0>)
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
				ssd1306_WriteString("TCCU: StandBy     ", Font_7x10, White);
 80014de:	f7ff fe77 	bl	80011d0 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80014e2:	f7ff fde7 	bl	80010b4 <ssd1306_UpdateScreen>
}
 80014e6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		else if (Expander_Read_Byte(&MyExpander) & (1<<BUTTON_DECREASE))
 80014e8:	0020      	movs	r0, r4
 80014ea:	f7ff fd91 	bl	8001010 <Expander_Read_Byte>
 80014ee:	0600      	lsls	r0, r0, #24
 80014f0:	d506      	bpl.n	8001500 <HAL_GPIO_EXTI_Callback+0x64>
			if (SetPoint > -40)
 80014f2:	4c1c      	ldr	r4, [pc, #112]	@ (8001564 <HAL_GPIO_EXTI_Callback+0xc8>)
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	001a      	movs	r2, r3
 80014f8:	3227      	adds	r2, #39	@ 0x27
 80014fa:	dbe2      	blt.n	80014c2 <HAL_GPIO_EXTI_Callback+0x26>
				SetPoint -= 5;
 80014fc:	3b05      	subs	r3, #5
 80014fe:	e7df      	b.n	80014c0 <HAL_GPIO_EXTI_Callback+0x24>
		else if (Expander_Read_Byte(&MyExpander) & (1<<BUTTON_STARTSTOP))
 8001500:	0020      	movs	r0, r4
 8001502:	f7ff fd85 	bl	8001010 <Expander_Read_Byte>
 8001506:	0680      	lsls	r0, r0, #26
 8001508:	d5ed      	bpl.n	80014e6 <HAL_GPIO_EXTI_Callback+0x4a>
			if (TCCU_Mode == StandBy)
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_GPIO_EXTI_Callback+0xd4>)
 800150c:	4c17      	ldr	r4, [pc, #92]	@ (800156c <HAL_GPIO_EXTI_Callback+0xd0>)
 800150e:	7818      	ldrb	r0, [r3, #0]
 8001510:	2800      	cmp	r0, #0
 8001512:	d114      	bne.n	800153e <HAL_GPIO_EXTI_Callback+0xa2>
				if (SetPoint > TemperatureCh2)
 8001514:	4913      	ldr	r1, [pc, #76]	@ (8001564 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001516:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001518:	6809      	ldr	r1, [r1, #0]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	4291      	cmp	r1, r2
 800151e:	dd07      	ble.n	8001530 <HAL_GPIO_EXTI_Callback+0x94>
					ssd1306_SetCursor(0,0);
 8001520:	0001      	movs	r1, r0
					TCCU_Mode = Heating;
 8001522:	701d      	strb	r5, [r3, #0]
					ssd1306_SetCursor(0,0);
 8001524:	f7ff fe6e 	bl	8001204 <ssd1306_SetCursor>
					ssd1306_WriteString("TCCU: ON - Heating", Font_7x10, White);
 8001528:	4813      	ldr	r0, [pc, #76]	@ (8001578 <HAL_GPIO_EXTI_Callback+0xdc>)
				ssd1306_WriteString("TCCU: StandBy     ", Font_7x10, White);
 800152a:	9500      	str	r5, [sp, #0]
 800152c:	cc0e      	ldmia	r4!, {r1, r2, r3}
 800152e:	e7d6      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x42>
					TCCU_Mode = Cooling;
 8001530:	2202      	movs	r2, #2
					ssd1306_SetCursor(0,0);
 8001532:	0001      	movs	r1, r0
					TCCU_Mode = Cooling;
 8001534:	701a      	strb	r2, [r3, #0]
					ssd1306_SetCursor(0,0);
 8001536:	f7ff fe65 	bl	8001204 <ssd1306_SetCursor>
					ssd1306_WriteString("TCCU: ON - Cooling", Font_7x10, White);
 800153a:	4810      	ldr	r0, [pc, #64]	@ (800157c <HAL_GPIO_EXTI_Callback+0xe0>)
 800153c:	e7f5      	b.n	800152a <HAL_GPIO_EXTI_Callback+0x8e>
				TCCU_Mode = Cooling;
 800153e:	2202      	movs	r2, #2
				ssd1306_SetCursor(0,0);
 8001540:	0030      	movs	r0, r6
 8001542:	0031      	movs	r1, r6
				TCCU_Mode = Cooling;
 8001544:	701a      	strb	r2, [r3, #0]
				ssd1306_SetCursor(0,0);
 8001546:	f7ff fe5d 	bl	8001204 <ssd1306_SetCursor>
				ssd1306_WriteString("TCCU: StandBy     ", Font_7x10, White);
 800154a:	480d      	ldr	r0, [pc, #52]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xe4>)
 800154c:	e7ed      	b.n	800152a <HAL_GPIO_EXTI_Callback+0x8e>
	else if (GPIO_Pin == ADC_IRQ_Pin)
 800154e:	2802      	cmp	r0, #2
 8001550:	d1c9      	bne.n	80014e6 <HAL_GPIO_EXTI_Callback+0x4a>
		ADC_Get_Measured_DATA(&MyADC);
 8001552:	480c      	ldr	r0, [pc, #48]	@ (8001584 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001554:	f7ff fcea 	bl	8000f2c <ADC_Get_Measured_DATA>
		ADC_Proccess_Data();
 8001558:	f7ff fcc6 	bl	8000ee8 <ADC_Proccess_Data>
}
 800155c:	e7c3      	b.n	80014e6 <HAL_GPIO_EXTI_Callback+0x4a>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	200004a9 	.word	0x200004a9
 8001564:	20000000 	.word	0x20000000
 8001568:	20000480 	.word	0x20000480
 800156c:	08003024 	.word	0x08003024
 8001570:	200004a8 	.word	0x200004a8
 8001574:	2000047c 	.word	0x2000047c
 8001578:	0800379c 	.word	0x0800379c
 800157c:	080037af 	.word	0x080037af
 8001580:	080037c2 	.word	0x080037c2
 8001584:	200004b4 	.word	0x200004b4

08001588 <main>:
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 800158c:	f000 fb6a 	bl	8001c64 <HAL_Init>
  SystemClock_Config();
 8001590:	f7ff ff02 	bl	8001398 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	2214      	movs	r2, #20
 8001596:	2100      	movs	r1, #0
 8001598:	a80b      	add	r0, sp, #44	@ 0x2c
 800159a:	f001 fccd 	bl	8002f38 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <main+0x168>)
 80015a2:	03c9      	lsls	r1, r1, #15
 80015a4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 80015a6:	4853      	ldr	r0, [pc, #332]	@ (80016f4 <main+0x16c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b0:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b4:	9208      	str	r2, [sp, #32]
 80015b6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	0289      	lsls	r1, r1, #10
 80015bc:	430a      	orrs	r2, r1
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80015ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	02c9      	lsls	r1, r1, #11
 80015d0:	430a      	orrs	r2, r1
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	400b      	ands	r3, r1
 80015da:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 80015dc:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOF, FAN_1_EN_Pin|FAN_2_EN_Pin, GPIO_PIN_RESET);
 80015e0:	f000 fc9e 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FAN_3_EN_GPIO_Port, FAN_3_EN_Pin, GPIO_PIN_RESET);
 80015e4:	2090      	movs	r0, #144	@ 0x90
 80015e6:	2200      	movs	r2, #0
 80015e8:	2102      	movs	r1, #2
 80015ea:	05c0      	lsls	r0, r0, #23
 80015ec:	f000 fc98 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 80015f0:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = FAN_1_EN_Pin|FAN_2_EN_Pin;
 80015f2:	2703      	movs	r7, #3
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2110      	movs	r1, #16
 80015f8:	05c0      	lsls	r0, r0, #23
 80015fa:	f000 fc91 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fe:	483d      	ldr	r0, [pc, #244]	@ (80016f4 <main+0x16c>)
 8001600:	a90b      	add	r1, sp, #44	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	2484      	movs	r4, #132	@ 0x84
  GPIO_InitStruct.Pin = FAN_1_EN_Pin|FAN_2_EN_Pin;
 8001604:	970b      	str	r7, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	960c      	str	r6, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	950e      	str	r5, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800160c:	f000 fbd0 	bl	8001db0 <HAL_GPIO_Init>
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8001610:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	03a4      	lsls	r4, r4, #14
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 8001614:	a90b      	add	r1, sp, #44	@ 0x2c
 8001616:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001618:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = IOEXPANDER_INT_L_Pin;
 800161a:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(IOEXPANDER_INT_L_GPIO_Port, &GPIO_InitStruct);
 800161e:	f000 fbc7 	bl	8001db0 <HAL_GPIO_Init>
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 8001622:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = FAN_3_EN_Pin;
 8001624:	2302      	movs	r3, #2
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 8001626:	a90b      	add	r1, sp, #44	@ 0x2c
 8001628:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = FAN_3_EN_Pin;
 800162a:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	960c      	str	r6, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	950e      	str	r5, [sp, #56]	@ 0x38
  HAL_GPIO_Init(FAN_3_EN_GPIO_Port, &GPIO_InitStruct);
 8001632:	f000 fbbd 	bl	8001db0 <HAL_GPIO_Init>
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001636:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 8001638:	2310      	movs	r3, #16
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 800163a:	a90b      	add	r1, sp, #44	@ 0x2c
 800163c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 800163e:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	960c      	str	r6, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	960d      	str	r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	970e      	str	r7, [sp, #56]	@ 0x38
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001646:	f000 fbb3 	bl	8001db0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 800164a:	2302      	movs	r3, #2
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 800164c:	482a      	ldr	r0, [pc, #168]	@ (80016f8 <main+0x170>)
 800164e:	a90b      	add	r1, sp, #44	@ 0x2c
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 8001650:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001652:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001656:	f000 fbab 	bl	8001db0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800165a:	0029      	movs	r1, r5
 800165c:	002a      	movs	r2, r5
 800165e:	2005      	movs	r0, #5
 8001660:	f000 fb34 	bl	8001ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001664:	2005      	movs	r0, #5
 8001666:	f000 fb5b 	bl	8001d20 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800166a:	4c24      	ldr	r4, [pc, #144]	@ (80016fc <main+0x174>)
 800166c:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <main+0x178>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166e:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 8001670:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <main+0x17c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001674:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.Timing = 0x0000020B;
 8001676:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001678:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167a:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800167c:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167e:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001682:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001684:	f000 fde0 	bl	8002248 <HAL_I2C_Init>
 8001688:	0001      	movs	r1, r0
 800168a:	42a8      	cmp	r0, r5
 800168c:	d001      	beq.n	8001692 <main+0x10a>
 800168e:	b672      	cpsid	i
  while (1)
 8001690:	e7fe      	b.n	8001690 <main+0x108>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	0020      	movs	r0, r4
 8001694:	f001 f840 	bl	8002718 <HAL_I2CEx_ConfigAnalogFilter>
 8001698:	1e01      	subs	r1, r0, #0
 800169a:	d001      	beq.n	80016a0 <main+0x118>
 800169c:	b672      	cpsid	i
  while (1)
 800169e:	e7fe      	b.n	800169e <main+0x116>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a0:	0020      	movs	r0, r4
 80016a2:	f001 f85f 	bl	8002764 <HAL_I2CEx_ConfigDigitalFilter>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <main+0x126>
 80016aa:	b672      	cpsid	i
  while (1)
 80016ac:	e7fe      	b.n	80016ac <main+0x124>
  hspi1.Instance = SPI1;
 80016ae:	4816      	ldr	r0, [pc, #88]	@ (8001708 <main+0x180>)
 80016b0:	4a16      	ldr	r2, [pc, #88]	@ (800170c <main+0x184>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b2:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 80016b4:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016b6:	2282      	movs	r2, #130	@ 0x82
 80016b8:	0052      	lsls	r2, r2, #1
 80016ba:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016bc:	22e0      	movs	r2, #224	@ 0xe0
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c2:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c6:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ca:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ce:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d0:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016d6:	3ae9      	subs	r2, #233	@ 0xe9
 80016d8:	3aff      	subs	r2, #255	@ 0xff
 80016da:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80016dc:	3a11      	subs	r2, #17
 80016de:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e0:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e2:	f001 f94f 	bl	8002984 <HAL_SPI_Init>
 80016e6:	1e04      	subs	r4, r0, #0
 80016e8:	d012      	beq.n	8001710 <main+0x188>
 80016ea:	b672      	cpsid	i
  while (1)
 80016ec:	e7fe      	b.n	80016ec <main+0x164>
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48001400 	.word	0x48001400
 80016f8:	48000400 	.word	0x48000400
 80016fc:	20000540 	.word	0x20000540
 8001700:	40005400 	.word	0x40005400
 8001704:	0000020b 	.word	0x0000020b
 8001708:	200004dc 	.word	0x200004dc
 800170c:	40013000 	.word	0x40013000
  HAL_Delay(1000);
 8001710:	20fa      	movs	r0, #250	@ 0xfa
 8001712:	0080      	lsls	r0, r0, #2
 8001714:	f000 fac8 	bl	8001ca8 <HAL_Delay>
	MyExpander.ConfigReg = 0xF0;				//0b11110000
 8001718:	27f0      	movs	r7, #240	@ 0xf0
	MyExpander.ExpanderAddress = 0x40;			//0b1000000
 800171a:	2340      	movs	r3, #64	@ 0x40
 800171c:	4dc1      	ldr	r5, [pc, #772]	@ (8001a24 <main+0x49c>)
	Expander_Init(&MyExpander);
 800171e:	0028      	movs	r0, r5
	MyExpander.ExpanderAddress = 0x40;			//0b1000000
 8001720:	702b      	strb	r3, [r5, #0]
	MyExpander.ConfigReg = 0xF0;				//0b11110000
 8001722:	712f      	strb	r7, [r5, #4]
	MyExpander.PolarityPortReg = 0xF0;			//0b11110000
 8001724:	70ef      	strb	r7, [r5, #3]
	Expander_Init(&MyExpander);
 8001726:	f7ff fc23 	bl	8000f70 <Expander_Init>
	Expander_Write_Single_Bit(&MyExpander, LED_BLUE, PIN_RESET);
 800172a:	0022      	movs	r2, r4
 800172c:	0021      	movs	r1, r4
 800172e:	0028      	movs	r0, r5
 8001730:	f7ff fc48 	bl	8000fc4 <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_RED, PIN_RESET);
 8001734:	0022      	movs	r2, r4
 8001736:	0031      	movs	r1, r6
 8001738:	0028      	movs	r0, r5
 800173a:	f7ff fc43 	bl	8000fc4 <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_WHITE, PIN_RESET);
 800173e:	0022      	movs	r2, r4
 8001740:	2102      	movs	r1, #2
 8001742:	0028      	movs	r0, r5
 8001744:	f7ff fc3e 	bl	8000fc4 <Expander_Write_Single_Bit>
	Expander_Write_Single_Bit(&MyExpander, LED_AMBER, PIN_RESET);
 8001748:	2103      	movs	r1, #3
 800174a:	0022      	movs	r2, r4
 800174c:	0028      	movs	r0, r5
 800174e:	f7ff fc39 	bl	8000fc4 <Expander_Write_Single_Bit>
	MyDAC.DACAddress = 0x63;
 8001752:	4bb5      	ldr	r3, [pc, #724]	@ (8001a28 <main+0x4a0>)
 8001754:	4ab5      	ldr	r2, [pc, #724]	@ (8001a2c <main+0x4a4>)
 8001756:	801a      	strh	r2, [r3, #0]
	MyDAC.DACValue = 0x0080;    // 0x80 - 1.5V
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	805a      	strh	r2, [r3, #2]
		ssd1306_Init();
 800175c:	f7ff fdb8 	bl	80012d0 <ssd1306_Init>
		ssd1306_Fill(Black);
 8001760:	0020      	movs	r0, r4
 8001762:	f7ff fc99 	bl	8001098 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001766:	f7ff fca5 	bl	80010b4 <ssd1306_UpdateScreen>
		ssd1306_WriteString("TCCU: StandBy", Font_7x10, White);
 800176a:	4db1      	ldr	r5, [pc, #708]	@ (8001a30 <main+0x4a8>)
 800176c:	48b1      	ldr	r0, [pc, #708]	@ (8001a34 <main+0x4ac>)
 800176e:	6829      	ldr	r1, [r5, #0]
 8001770:	686a      	ldr	r2, [r5, #4]
 8001772:	68ab      	ldr	r3, [r5, #8]
 8001774:	9600      	str	r6, [sp, #0]
 8001776:	f7ff fd2b 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800177a:	f7ff fc9b 	bl	80010b4 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 800177e:	20fa      	movs	r0, #250	@ 0xfa
 8001780:	0080      	lsls	r0, r0, #2
 8001782:	f000 fa91 	bl	8001ca8 <HAL_Delay>
		ssd1306_SetCursor(0,20);
 8001786:	0020      	movs	r0, r4
 8001788:	2114      	movs	r1, #20
 800178a:	f7ff fd3b 	bl	8001204 <ssd1306_SetCursor>
		ssd1306_WriteString("Set Point:", Font_7x10, White);
 800178e:	cd0e      	ldmia	r5!, {r1, r2, r3}
 8001790:	48a9      	ldr	r0, [pc, #676]	@ (8001a38 <main+0x4b0>)
 8001792:	9600      	str	r6, [sp, #0]
 8001794:	f7ff fd1c 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001798:	f7ff fc8c 	bl	80010b4 <ssd1306_UpdateScreen>
	MyADC.Config0.ADCMode = ADC_STANDBY_MODE;
 800179c:	23c0      	movs	r3, #192	@ 0xc0
 800179e:	4ca7      	ldr	r4, [pc, #668]	@ (8001a3c <main+0x4b4>)
 80017a0:	6862      	ldr	r2, [r4, #4]
	ADC_Full_Reset(&MyADC);
 80017a2:	0020      	movs	r0, r4
	MyADC.Config0.ADCMode = ADC_STANDBY_MODE;
 80017a4:	401a      	ands	r2, r3
 80017a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <main+0x4b8>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	6063      	str	r3, [r4, #4]
	MyADC.IRQ.EN_STP = CONVERSATION_START_INTERRUPT_DISABLED;
 80017ac:	2383      	movs	r3, #131	@ 0x83
 80017ae:	8922      	ldrh	r2, [r4, #8]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	403a      	ands	r2, r7
 80017b4:	4313      	orrs	r3, r2
	MyADC.LOCK = 0xA5;
 80017b6:	22a5      	movs	r2, #165	@ 0xa5
	MyADC.IRQ.EN_STP = CONVERSATION_START_INTERRUPT_DISABLED;
 80017b8:	8123      	strh	r3, [r4, #8]
	MyADC.LOCK = 0xA5;
 80017ba:	1ca3      	adds	r3, r4, #2
 80017bc:	77da      	strb	r2, [r3, #31]
	ADC_Full_Reset(&MyADC);
 80017be:	f7ff fb77 	bl	8000eb0 <ADC_Full_Reset>
	ADC_Init(&MyADC);
 80017c2:	0020      	movs	r0, r4
 80017c4:	f7ff fb38 	bl	8000e38 <ADC_Init>
		MyADC.MUX.MUX_VinMinus = MUX_CH1;
 80017c8:	2701      	movs	r7, #1
 80017ca:	4c9c      	ldr	r4, [pc, #624]	@ (8001a3c <main+0x4b4>)
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80017cc:	003a      	movs	r2, r7
 80017ce:	2106      	movs	r1, #6
 80017d0:	0020      	movs	r0, r4
		MyADC.MUX.MUX_VinMinus = MUX_CH1;
 80017d2:	7267      	strb	r7, [r4, #9]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80017d4:	f7ff faa4 	bl	8000d20 <ADC_Incremental_Write>
		ADC_Start_Conversion(&MyADC);
 80017d8:	0020      	movs	r0, r4
 80017da:	f7ff fb4d 	bl	8000e78 <ADC_Start_Conversion>
		HAL_Delay(100);
 80017de:	2064      	movs	r0, #100	@ 0x64
 80017e0:	f000 fa62 	bl	8001ca8 <HAL_Delay>
		VoltageCh1 = Voltage;
 80017e4:	4d97      	ldr	r5, [pc, #604]	@ (8001a44 <main+0x4bc>)
 80017e6:	4a98      	ldr	r2, [pc, #608]	@ (8001a48 <main+0x4c0>)
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	0016      	movs	r6, r2
 80017ec:	6013      	str	r3, [r2, #0]
		MyADC.MUX.MUX_VinMinus = MUX_CH2;
 80017ee:	2312      	movs	r3, #18
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80017f0:	003a      	movs	r2, r7
 80017f2:	2106      	movs	r1, #6
 80017f4:	0020      	movs	r0, r4
		MyADC.MUX.MUX_VinMinus = MUX_CH2;
 80017f6:	7263      	strb	r3, [r4, #9]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80017f8:	f7ff fa92 	bl	8000d20 <ADC_Incremental_Write>
		ADC_Start_Conversion(&MyADC);
 80017fc:	0020      	movs	r0, r4
 80017fe:	f7ff fb3b 	bl	8000e78 <ADC_Start_Conversion>
		HAL_Delay(100);
 8001802:	2064      	movs	r0, #100	@ 0x64
 8001804:	f000 fa50 	bl	8001ca8 <HAL_Delay>
		VoltageCh2 = Voltage;
 8001808:	4b90      	ldr	r3, [pc, #576]	@ (8001a4c <main+0x4c4>)
 800180a:	6828      	ldr	r0, [r5, #0]
		ResistanceCh2 = ResistanceCh1*VoltageCh2/VoltageCh1;
 800180c:	4990      	ldr	r1, [pc, #576]	@ (8001a50 <main+0x4c8>)
		VoltageCh2 = Voltage;
 800180e:	6018      	str	r0, [r3, #0]
		ResistanceCh2 = ResistanceCh1*VoltageCh2/VoltageCh1;
 8001810:	f7fe ff1a 	bl	8000648 <__aeabi_fmul>
 8001814:	6831      	ldr	r1, [r6, #0]
 8001816:	f7fe fdf7 	bl	8000408 <__aeabi_fdiv>
 800181a:	4b8e      	ldr	r3, [pc, #568]	@ (8001a54 <main+0x4cc>)
		  TemperatureCh2 = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 800181c:	498c      	ldr	r1, [pc, #560]	@ (8001a50 <main+0x4c8>)
		ResistanceCh2 = ResistanceCh1*VoltageCh2/VoltageCh1;
 800181e:	6018      	str	r0, [r3, #0]
		  TemperatureCh2 = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 8001820:	4b8d      	ldr	r3, [pc, #564]	@ (8001a58 <main+0x4d0>)
 8001822:	9304      	str	r3, [sp, #16]
 8001824:	f7ff f84e 	bl	80008c4 <__aeabi_fsub>
 8001828:	4b8c      	ldr	r3, [pc, #560]	@ (8001a5c <main+0x4d4>)
 800182a:	9005      	str	r0, [sp, #20]
 800182c:	4988      	ldr	r1, [pc, #544]	@ (8001a50 <main+0x4c8>)
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	f7fe ff09 	bl	8000648 <__aeabi_fmul>
 8001836:	1c01      	adds	r1, r0, #0
 8001838:	9805      	ldr	r0, [sp, #20]
 800183a:	f7fe fde5 	bl	8000408 <__aeabi_fdiv>
 800183e:	f7ff f9e5 	bl	8000c0c <__aeabi_f2iz>
 8001842:	9b04      	ldr	r3, [sp, #16]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 8001844:	003a      	movs	r2, r7
		  TemperatureCh2 = (ResistanceCh2 - ResistanceCh1) / (ResistanceCh1 * A);
 8001846:	6018      	str	r0, [r3, #0]
		MyADC.MUX.MUX_VinMinus = MUX_CH3;
 8001848:	2323      	movs	r3, #35	@ 0x23
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 800184a:	2106      	movs	r1, #6
 800184c:	0020      	movs	r0, r4
		MyADC.MUX.MUX_VinMinus = MUX_CH3;
 800184e:	7263      	strb	r3, [r4, #9]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 8001850:	f7ff fa66 	bl	8000d20 <ADC_Incremental_Write>
		ADC_Start_Conversion(&MyADC);
 8001854:	0020      	movs	r0, r4
 8001856:	f7ff fb0f 	bl	8000e78 <ADC_Start_Conversion>
		HAL_Delay(100);
 800185a:	2064      	movs	r0, #100	@ 0x64
 800185c:	f000 fa24 	bl	8001ca8 <HAL_Delay>
		VoltageCh3 = Voltage;
 8001860:	4b7f      	ldr	r3, [pc, #508]	@ (8001a60 <main+0x4d8>)
 8001862:	6828      	ldr	r0, [r5, #0]
		ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 8001864:	497a      	ldr	r1, [pc, #488]	@ (8001a50 <main+0x4c8>)
		VoltageCh3 = Voltage;
 8001866:	6018      	str	r0, [r3, #0]
		ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 8001868:	f7fe feee 	bl	8000648 <__aeabi_fmul>
 800186c:	6831      	ldr	r1, [r6, #0]
 800186e:	f7fe fdcb 	bl	8000408 <__aeabi_fdiv>
 8001872:	4b7c      	ldr	r3, [pc, #496]	@ (8001a64 <main+0x4dc>)
		  TemperatureCh3 = (ResistanceCh3 - ResistanceCh1) / (ResistanceCh1 * A);
 8001874:	4976      	ldr	r1, [pc, #472]	@ (8001a50 <main+0x4c8>)
		ResistanceCh3 = ResistanceCh1*VoltageCh3/VoltageCh1;
 8001876:	6018      	str	r0, [r3, #0]
		  TemperatureCh3 = (ResistanceCh3 - ResistanceCh1) / (ResistanceCh1 * A);
 8001878:	4b7b      	ldr	r3, [pc, #492]	@ (8001a68 <main+0x4e0>)
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	f7ff f822 	bl	80008c4 <__aeabi_fsub>
 8001880:	9b03      	ldr	r3, [sp, #12]
 8001882:	9006      	str	r0, [sp, #24]
 8001884:	4972      	ldr	r1, [pc, #456]	@ (8001a50 <main+0x4c8>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f7fe fede 	bl	8000648 <__aeabi_fmul>
 800188c:	1c01      	adds	r1, r0, #0
 800188e:	9806      	ldr	r0, [sp, #24]
 8001890:	f7fe fdba 	bl	8000408 <__aeabi_fdiv>
 8001894:	f7ff f9ba 	bl	8000c0c <__aeabi_f2iz>
 8001898:	9b05      	ldr	r3, [sp, #20]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 800189a:	003a      	movs	r2, r7
		  TemperatureCh3 = (ResistanceCh3 - ResistanceCh1) / (ResistanceCh1 * A);
 800189c:	6018      	str	r0, [r3, #0]
		MyADC.MUX.MUX_VinMinus = MUX_AGND;
 800189e:	2338      	movs	r3, #56	@ 0x38
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80018a0:	2106      	movs	r1, #6
 80018a2:	0020      	movs	r0, r4
		MyADC.MUX.MUX_VinMinus = MUX_AGND;
 80018a4:	7263      	strb	r3, [r4, #9]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80018a6:	f7ff fa3b 	bl	8000d20 <ADC_Incremental_Write>
		ADC_Start_Conversion(&MyADC);
 80018aa:	0020      	movs	r0, r4
 80018ac:	f7ff fae4 	bl	8000e78 <ADC_Start_Conversion>
		HAL_Delay(100);
 80018b0:	2064      	movs	r0, #100	@ 0x64
 80018b2:	f000 f9f9 	bl	8001ca8 <HAL_Delay>
		VoltageCh4 = Voltage;
 80018b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a6c <main+0x4e4>)
 80018b8:	6828      	ldr	r0, [r5, #0]
		ResistanceCh4 = ResistanceCh1*VoltageCh4/VoltageCh1;
 80018ba:	4965      	ldr	r1, [pc, #404]	@ (8001a50 <main+0x4c8>)
		VoltageCh4 = Voltage;
 80018bc:	6018      	str	r0, [r3, #0]
		ResistanceCh4 = ResistanceCh1*VoltageCh4/VoltageCh1;
 80018be:	f7fe fec3 	bl	8000648 <__aeabi_fmul>
 80018c2:	6831      	ldr	r1, [r6, #0]
 80018c4:	f7fe fda0 	bl	8000408 <__aeabi_fdiv>
 80018c8:	4b69      	ldr	r3, [pc, #420]	@ (8001a70 <main+0x4e8>)
		  TemperatureCh4 = (ResistanceCh4 - ResistanceCh1) / (ResistanceCh1 * A);
 80018ca:	4961      	ldr	r1, [pc, #388]	@ (8001a50 <main+0x4c8>)
		ResistanceCh4 = ResistanceCh1*VoltageCh4/VoltageCh1;
 80018cc:	6018      	str	r0, [r3, #0]
		  TemperatureCh4 = (ResistanceCh4 - ResistanceCh1) / (ResistanceCh1 * A);
 80018ce:	4b69      	ldr	r3, [pc, #420]	@ (8001a74 <main+0x4ec>)
 80018d0:	9306      	str	r3, [sp, #24]
 80018d2:	f7fe fff7 	bl	80008c4 <__aeabi_fsub>
 80018d6:	9b03      	ldr	r3, [sp, #12]
 80018d8:	9007      	str	r0, [sp, #28]
 80018da:	495d      	ldr	r1, [pc, #372]	@ (8001a50 <main+0x4c8>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f7fe feb3 	bl	8000648 <__aeabi_fmul>
 80018e2:	1c01      	adds	r1, r0, #0
 80018e4:	9807      	ldr	r0, [sp, #28]
 80018e6:	f7fe fd8f 	bl	8000408 <__aeabi_fdiv>
 80018ea:	f7ff f98f 	bl	8000c0c <__aeabi_f2iz>
 80018ee:	9b06      	ldr	r3, [sp, #24]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80018f0:	003a      	movs	r2, r7
		  TemperatureCh4 = (ResistanceCh4 - ResistanceCh1) / (ResistanceCh1 * A);
 80018f2:	6018      	str	r0, [r3, #0]
		MyADC.MUX.MUX_VinMinus = MUX_CH3;
 80018f4:	2333      	movs	r3, #51	@ 0x33
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80018f6:	2106      	movs	r1, #6
 80018f8:	0020      	movs	r0, r4
		MyADC.MUX.MUX_VinMinus = MUX_CH3;
 80018fa:	7263      	strb	r3, [r4, #9]
		ADC_Incremental_Write(&MyADC, MUX_ADDRESS, 1);
 80018fc:	f7ff fa10 	bl	8000d20 <ADC_Incremental_Write>
		ADC_Start_Conversion(&MyADC);
 8001900:	0020      	movs	r0, r4
 8001902:	f7ff fab9 	bl	8000e78 <ADC_Start_Conversion>
		HAL_Delay(100);
 8001906:	2064      	movs	r0, #100	@ 0x64
 8001908:	f000 f9ce 	bl	8001ca8 <HAL_Delay>
		ResistanceADCOffset = ResistanceCh1*Voltage/VoltageCh1;
 800190c:	6828      	ldr	r0, [r5, #0]
 800190e:	4950      	ldr	r1, [pc, #320]	@ (8001a50 <main+0x4c8>)
 8001910:	f7fe fe9a 	bl	8000648 <__aeabi_fmul>
 8001914:	6831      	ldr	r1, [r6, #0]
 8001916:	f7fe fd77 	bl	8000408 <__aeabi_fdiv>
 800191a:	4c57      	ldr	r4, [pc, #348]	@ (8001a78 <main+0x4f0>)
		ssd1306_SetCursor(90,20);
 800191c:	2114      	movs	r1, #20
		ResistanceADCOffset = ResistanceCh1*Voltage/VoltageCh1;
 800191e:	6020      	str	r0, [r4, #0]
		ssd1306_SetCursor(90,20);
 8001920:	205a      	movs	r0, #90	@ 0x5a
 8001922:	f7ff fc6f 	bl	8001204 <ssd1306_SetCursor>
		ssd1306_WriteString("Temp:", Font_7x10, White);
 8001926:	4c42      	ldr	r4, [pc, #264]	@ (8001a30 <main+0x4a8>)
 8001928:	9700      	str	r7, [sp, #0]
 800192a:	6821      	ldr	r1, [r4, #0]
 800192c:	6862      	ldr	r2, [r4, #4]
 800192e:	68a3      	ldr	r3, [r4, #8]
 8001930:	4852      	ldr	r0, [pc, #328]	@ (8001a7c <main+0x4f4>)
 8001932:	f7ff fc4d 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_Line(82,20,82,60, White);
 8001936:	2252      	movs	r2, #82	@ 0x52
 8001938:	233c      	movs	r3, #60	@ 0x3c
 800193a:	0010      	movs	r0, r2
 800193c:	2114      	movs	r1, #20
 800193e:	9700      	str	r7, [sp, #0]
 8001940:	f7ff fc66 	bl	8001210 <ssd1306_Line>
		ssd1306_SetCursor(115,34);
 8001944:	2122      	movs	r1, #34	@ 0x22
 8001946:	2073      	movs	r0, #115	@ 0x73
 8001948:	f7ff fc5c 	bl	8001204 <ssd1306_SetCursor>
		ssd1306_WriteString("C", Font_7x10, White);
 800194c:	4e4c      	ldr	r6, [pc, #304]	@ (8001a80 <main+0x4f8>)
 800194e:	6862      	ldr	r2, [r4, #4]
 8001950:	68a3      	ldr	r3, [r4, #8]
 8001952:	6821      	ldr	r1, [r4, #0]
 8001954:	0030      	movs	r0, r6
 8001956:	9700      	str	r7, [sp, #0]
 8001958:	f7ff fc3a 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(90,34);
 800195c:	2122      	movs	r1, #34	@ 0x22
 800195e:	205a      	movs	r0, #90	@ 0x5a
 8001960:	f7ff fc50 	bl	8001204 <ssd1306_SetCursor>
		intToStr(TemperatureCh2,TempString);
 8001964:	4d47      	ldr	r5, [pc, #284]	@ (8001a84 <main+0x4fc>)
 8001966:	9b04      	ldr	r3, [sp, #16]
 8001968:	0029      	movs	r1, r5
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f7ff fd6e 	bl	800144c <intToStr>
		ssd1306_WriteString(TempString, Font_7x10, White);
 8001970:	6862      	ldr	r2, [r4, #4]
 8001972:	68a3      	ldr	r3, [r4, #8]
 8001974:	6821      	ldr	r1, [r4, #0]
 8001976:	0028      	movs	r0, r5
 8001978:	9700      	str	r7, [sp, #0]
 800197a:	f7ff fc29 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(115,44);
 800197e:	212c      	movs	r1, #44	@ 0x2c
 8001980:	2073      	movs	r0, #115	@ 0x73
 8001982:	f7ff fc3f 	bl	8001204 <ssd1306_SetCursor>
		ssd1306_WriteString("C", Font_7x10, White);
 8001986:	6862      	ldr	r2, [r4, #4]
 8001988:	68a3      	ldr	r3, [r4, #8]
 800198a:	6821      	ldr	r1, [r4, #0]
 800198c:	0030      	movs	r0, r6
 800198e:	9700      	str	r7, [sp, #0]
 8001990:	f7ff fc1e 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(90,44);
 8001994:	212c      	movs	r1, #44	@ 0x2c
 8001996:	205a      	movs	r0, #90	@ 0x5a
 8001998:	f7ff fc34 	bl	8001204 <ssd1306_SetCursor>
		intToStr(TemperatureCh3,TempString);
 800199c:	9b05      	ldr	r3, [sp, #20]
 800199e:	0029      	movs	r1, r5
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f7ff fd53 	bl	800144c <intToStr>
		ssd1306_WriteString(TempString, Font_7x10, White);
 80019a6:	6862      	ldr	r2, [r4, #4]
 80019a8:	68a3      	ldr	r3, [r4, #8]
 80019aa:	6821      	ldr	r1, [r4, #0]
 80019ac:	0028      	movs	r0, r5
 80019ae:	9700      	str	r7, [sp, #0]
 80019b0:	f7ff fc0e 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(115,54);
 80019b4:	2136      	movs	r1, #54	@ 0x36
 80019b6:	2073      	movs	r0, #115	@ 0x73
 80019b8:	f7ff fc24 	bl	8001204 <ssd1306_SetCursor>
		ssd1306_WriteString("C", Font_7x10, White);
 80019bc:	6862      	ldr	r2, [r4, #4]
 80019be:	68a3      	ldr	r3, [r4, #8]
 80019c0:	6821      	ldr	r1, [r4, #0]
 80019c2:	0030      	movs	r0, r6
 80019c4:	9700      	str	r7, [sp, #0]
 80019c6:	f7ff fc03 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(90,54);
 80019ca:	2136      	movs	r1, #54	@ 0x36
 80019cc:	205a      	movs	r0, #90	@ 0x5a
 80019ce:	f7ff fc19 	bl	8001204 <ssd1306_SetCursor>
		intToStr(TemperatureCh4,TempString);
 80019d2:	9b06      	ldr	r3, [sp, #24]
 80019d4:	0029      	movs	r1, r5
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	f7ff fd38 	bl	800144c <intToStr>
		ssd1306_WriteString(TempString, Font_7x10, White);
 80019dc:	6862      	ldr	r2, [r4, #4]
 80019de:	68a3      	ldr	r3, [r4, #8]
 80019e0:	6821      	ldr	r1, [r4, #0]
 80019e2:	0028      	movs	r0, r5
 80019e4:	9700      	str	r7, [sp, #0]
 80019e6:	f7ff fbf3 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(25,34);
 80019ea:	2122      	movs	r1, #34	@ 0x22
 80019ec:	2019      	movs	r0, #25
 80019ee:	f7ff fc09 	bl	8001204 <ssd1306_SetCursor>
		ssd1306_WriteString("C", Font_7x10, White);
 80019f2:	6862      	ldr	r2, [r4, #4]
 80019f4:	68a3      	ldr	r3, [r4, #8]
 80019f6:	6821      	ldr	r1, [r4, #0]
 80019f8:	0030      	movs	r0, r6
 80019fa:	9700      	str	r7, [sp, #0]
 80019fc:	f7ff fbe8 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,34);
 8001a00:	2122      	movs	r1, #34	@ 0x22
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff fbfe 	bl	8001204 <ssd1306_SetCursor>
		intToStr(SetPoint,TempString);
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <main+0x500>)
 8001a0a:	0029      	movs	r1, r5
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	f7ff fd1d 	bl	800144c <intToStr>
		ssd1306_WriteString(TempString, Font_7x10, White);
 8001a12:	cc0e      	ldmia	r4!, {r1, r2, r3}
 8001a14:	0028      	movs	r0, r5
 8001a16:	9700      	str	r7, [sp, #0]
 8001a18:	f7ff fbda 	bl	80011d0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001a1c:	f7ff fb4a 	bl	80010b4 <ssd1306_UpdateScreen>
  while (1)
 8001a20:	e6d2      	b.n	80017c8 <main+0x240>
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	200004a9 	.word	0x200004a9
 8001a28:	200004ae 	.word	0x200004ae
 8001a2c:	00005963 	.word	0x00005963
 8001a30:	08003024 	.word	0x08003024
 8001a34:	080037d5 	.word	0x080037d5
 8001a38:	080037e3 	.word	0x080037e3
 8001a3c:	200004b4 	.word	0x200004b4
 8001a40:	808b5c02 	.word	0x808b5c02
 8001a44:	200004a4 	.word	0x200004a4
 8001a48:	200004a0 	.word	0x200004a0
 8001a4c:	2000049c 	.word	0x2000049c
 8001a50:	447a0000 	.word	0x447a0000
 8001a54:	20000490 	.word	0x20000490
 8001a58:	2000047c 	.word	0x2000047c
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	20000498 	.word	0x20000498
 8001a64:	2000048c 	.word	0x2000048c
 8001a68:	20000478 	.word	0x20000478
 8001a6c:	20000494 	.word	0x20000494
 8001a70:	20000488 	.word	0x20000488
 8001a74:	20000474 	.word	0x20000474
 8001a78:	20000484 	.word	0x20000484
 8001a7c:	080037ee 	.word	0x080037ee
 8001a80:	080037f4 	.word	0x080037f4
 8001a84:	20000480 	.word	0x20000480
 8001a88:	20000000 	.word	0x20000000

08001a8c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_MspInit+0x2c>)
{
 8001a90:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	9200      	str	r2, [sp, #0]
 8001aa0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	69da      	ldr	r2, [r3, #28]
 8001aa4:	0549      	lsls	r1, r1, #21
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	61da      	str	r2, [r3, #28]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	400b      	ands	r3, r1
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	b002      	add	sp, #8
 8001ab4:	4770      	bx	lr
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001abc:	b510      	push	{r4, lr}
 8001abe:	0004      	movs	r4, r0
 8001ac0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	2214      	movs	r2, #20
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	a803      	add	r0, sp, #12
 8001ac8:	f001 fa36 	bl	8002f38 <memset>
  if(hi2c->Instance==I2C1)
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_I2C_MspInit+0x60>)
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d120      	bne.n	8001b16 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	2280      	movs	r2, #128	@ 0x80
 8001ad6:	4c12      	ldr	r4, [pc, #72]	@ (8001b20 <HAL_I2C_MspInit+0x64>)
 8001ad8:	0292      	lsls	r2, r2, #10
 8001ada:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	6163      	str	r3, [r4, #20]
 8001ae2:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aec:	23c0      	movs	r3, #192	@ 0xc0
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af2:	2312      	movs	r3, #18
 8001af4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af6:	3b0f      	subs	r3, #15
 8001af8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afc:	3301      	adds	r3, #1
 8001afe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f000 f956 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b04:	2280      	movs	r2, #128	@ 0x80
 8001b06:	69e3      	ldr	r3, [r4, #28]
 8001b08:	0392      	lsls	r2, r2, #14
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61e3      	str	r3, [r4, #28]
 8001b0e:	69e3      	ldr	r3, [r4, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b16:	b008      	add	sp, #32
 8001b18:	bd10      	pop	{r4, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	0004      	movs	r4, r0
 8001b28:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	2214      	movs	r2, #20
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	a803      	add	r0, sp, #12
 8001b30:	f001 fa02 	bl	8002f38 <memset>
  if(hspi->Instance==SPI1)
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_SPI_MspInit+0x68>)
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d125      	bne.n	8001b88 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_SPI_MspInit+0x6c>)
 8001b40:	0149      	lsls	r1, r1, #5
 8001b42:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	430a      	orrs	r2, r1
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	0289      	lsls	r1, r1, #10
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	400b      	ands	r3, r1
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b66:	23e0      	movs	r3, #224	@ 0xe0
 8001b68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	3bde      	subs	r3, #222	@ 0xde
 8001b6c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	3301      	adds	r3, #1
 8001b72:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f000 f91c 	bl	8001db0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2019      	movs	r0, #25
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	f000 f8a5 	bl	8001ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b82:	2019      	movs	r0, #25
 8001b84:	f000 f8cc 	bl	8001d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b88:	b008      	add	sp, #32
 8001b8a:	bd10      	pop	{r4, pc}
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	40021000 	.word	0x40021000

08001b94 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler>

08001b96 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler>

08001b98 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9e:	f000 f871 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bd10      	pop	{r4, pc}

08001ba4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001ba4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOEXPANDER_INT_L_Pin);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 f9c0 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADC_IRQ_Pin);
 8001bac:	2002      	movs	r0, #2
 8001bae:	f000 f9bd 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001bb2:	bd10      	pop	{r4, pc}

08001bb4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bb6:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <SPI1_IRQHandler+0xc>)
 8001bb8:	f001 f92a 	bl	8002e10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bbc:	bd10      	pop	{r4, pc}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	200004dc 	.word	0x200004dc

08001bc4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc8:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bcc:	f7ff fffa 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopForever+0xe>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopForever+0x16>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bf6:	f001 f9a7 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7ff fcc5 	bl	8001588 <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   r0, =_estack
 8001c00:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001c0c:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 8001c10:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001c14:	20000598 	.word	0x20000598

08001c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_IRQHandler>
	...

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	20fa      	movs	r0, #250	@ 0xfa
 8001c22:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_InitTick+0x3c>)
 8001c24:	0080      	lsls	r0, r0, #2
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	f7fe fa78 	bl	800011c <__udivsi3>
 8001c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c5c <HAL_InitTick+0x40>)
 8001c2e:	0001      	movs	r1, r0
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	f7fe fa73 	bl	800011c <__udivsi3>
 8001c36:	f000 f87f 	bl	8001d38 <HAL_SYSTICK_Config>
 8001c3a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3e:	2c00      	cmp	r4, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	2d03      	cmp	r5, #3
 8001c44:	d807      	bhi.n	8001c56 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c46:	3802      	subs	r0, #2
 8001c48:	0022      	movs	r2, r4
 8001c4a:	0029      	movs	r1, r5
 8001c4c:	f000 f83e 	bl	8001ccc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	0020      	movs	r0, r4
 8001c52:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_InitTick+0x44>)
 8001c54:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000010 	.word	0x20000010

08001c64 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	2310      	movs	r3, #16
 8001c66:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <HAL_Init+0x1c>)
{
 8001c68:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	f7ff ffd3 	bl	8001c1c <HAL_InitTick>
  HAL_MspInit();
 8001c76:	f7ff ff09 	bl	8001a8c <HAL_MspInit>
}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	bd10      	pop	{r4, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c84:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <HAL_IncTick+0x10>)
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <HAL_IncTick+0x14>)
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	185b      	adds	r3, r3, r1
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	4770      	bx	lr
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	20000594 	.word	0x20000594
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c9c:	4b01      	ldr	r3, [pc, #4]	@ (8001ca4 <HAL_GetTick+0x8>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
}
 8001ca0:	4770      	bx	lr
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	20000594 	.word	0x20000594

08001ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff fff6 	bl	8001c9c <HAL_GetTick>
 8001cb0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	1c63      	adds	r3, r4, #1
 8001cb4:	d002      	beq.n	8001cbc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <HAL_Delay+0x20>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	1b40      	subs	r0, r0, r5
 8001cc2:	42a0      	cmp	r0, r4
 8001cc4:	d3fa      	bcc.n	8001cbc <HAL_Delay+0x14>
  {
  }
}
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
 8001cc8:	2000000c 	.word	0x2000000c

08001ccc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cce:	24ff      	movs	r4, #255	@ 0xff
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	000b      	movs	r3, r1
 8001cd4:	0021      	movs	r1, r4
 8001cd6:	4002      	ands	r2, r0
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce0:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ce2:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	db0a      	blt.n	8001cfe <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce8:	24c0      	movs	r4, #192	@ 0xc0
 8001cea:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <HAL_NVIC_SetPriority+0x4c>)
 8001cec:	0880      	lsrs	r0, r0, #2
 8001cee:	0080      	lsls	r0, r0, #2
 8001cf0:	1880      	adds	r0, r0, r2
 8001cf2:	00a4      	lsls	r4, r4, #2
 8001cf4:	5902      	ldr	r2, [r0, r4]
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001cfc:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfe:	220f      	movs	r2, #15
 8001d00:	4010      	ands	r0, r2
 8001d02:	3808      	subs	r0, #8
 8001d04:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <HAL_NVIC_SetPriority+0x50>)
 8001d06:	0880      	lsrs	r0, r0, #2
 8001d08:	0080      	lsls	r0, r0, #2
 8001d0a:	1880      	adds	r0, r0, r2
 8001d0c:	69c2      	ldr	r2, [r0, #28]
 8001d0e:	4011      	ands	r1, r2
 8001d10:	4319      	orrs	r1, r3
 8001d12:	61c1      	str	r1, [r0, #28]
 8001d14:	e7f2      	b.n	8001cfc <HAL_NVIC_SetPriority+0x30>
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d20:	2800      	cmp	r0, #0
 8001d22:	db05      	blt.n	8001d30 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d24:	231f      	movs	r3, #31
 8001d26:	4018      	ands	r0, r3
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	4083      	lsls	r3, r0
 8001d2c:	4a01      	ldr	r2, [pc, #4]	@ (8001d34 <HAL_NVIC_EnableIRQ+0x14>)
 8001d2e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d30:	4770      	bx	lr
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	1e43      	subs	r3, r0, #1
 8001d3c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d20d      	bcs.n	8001d60 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d44:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d48:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d4c:	6a03      	ldr	r3, [r0, #32]
 8001d4e:	0609      	lsls	r1, r1, #24
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d60:	4770      	bx	lr
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	e000e010 	.word	0xe000e010
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d6e:	1c84      	adds	r4, r0, #2
 8001d70:	7fe3      	ldrb	r3, [r4, #31]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d003      	beq.n	8001d7e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d76:	2304      	movs	r3, #4
 8001d78:	6383      	str	r3, [r0, #56]	@ 0x38

    status = HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d7e:	210e      	movs	r1, #14
 8001d80:	6803      	ldr	r3, [r0, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	438a      	bics	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d88:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d8a:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	4391      	bics	r1, r2
 8001d90:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d92:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001d94:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001d96:	408d      	lsls	r5, r1
 8001d98:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001d9c:	1883      	adds	r3, r0, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001da2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d000      	beq.n	8001daa <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8001da8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2000      	movs	r0, #0
 8001dac:	e7e6      	b.n	8001d7c <HAL_DMA_Abort_IT+0x10>
	...

08001db0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001db0:	2300      	movs	r3, #0
{
 8001db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	680a      	ldr	r2, [r1, #0]
 8001db8:	0014      	movs	r4, r2
 8001dba:	40dc      	lsrs	r4, r3
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8001dbe:	b007      	add	sp, #28
 8001dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc2:	2501      	movs	r5, #1
 8001dc4:	0014      	movs	r4, r2
 8001dc6:	409d      	lsls	r5, r3
 8001dc8:	402c      	ands	r4, r5
 8001dca:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8001dcc:	422a      	tst	r2, r5
 8001dce:	d100      	bne.n	8001dd2 <HAL_GPIO_Init+0x22>
 8001dd0:	e098      	b.n	8001f04 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd2:	684a      	ldr	r2, [r1, #4]
 8001dd4:	005f      	lsls	r7, r3, #1
 8001dd6:	4694      	mov	ip, r2
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4664      	mov	r4, ip
 8001ddc:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dde:	2403      	movs	r4, #3
 8001de0:	40bc      	lsls	r4, r7
 8001de2:	43e4      	mvns	r4, r4
 8001de4:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de6:	1e54      	subs	r4, r2, #1
 8001de8:	2c01      	cmp	r4, #1
 8001dea:	d82e      	bhi.n	8001e4a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8001dec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dee:	9c01      	ldr	r4, [sp, #4]
 8001df0:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df2:	68cc      	ldr	r4, [r1, #12]
 8001df4:	40bc      	lsls	r4, r7
 8001df6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001df8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001dfa:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfe:	43ac      	bics	r4, r5
 8001e00:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	4664      	mov	r4, ip
 8001e04:	0924      	lsrs	r4, r4, #4
 8001e06:	4034      	ands	r4, r6
 8001e08:	409c      	lsls	r4, r3
 8001e0a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001e0c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e0e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e10:	9c01      	ldr	r4, [sp, #4]
 8001e12:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e14:	688c      	ldr	r4, [r1, #8]
 8001e16:	40bc      	lsls	r4, r7
 8001e18:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001e1a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	2a02      	cmp	r2, #2
 8001e1e:	d116      	bne.n	8001e4e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e20:	2507      	movs	r5, #7
 8001e22:	260f      	movs	r6, #15
 8001e24:	401d      	ands	r5, r3
 8001e26:	00ad      	lsls	r5, r5, #2
 8001e28:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8001e2a:	08dc      	lsrs	r4, r3, #3
 8001e2c:	00a4      	lsls	r4, r4, #2
 8001e2e:	1904      	adds	r4, r0, r4
 8001e30:	9402      	str	r4, [sp, #8]
 8001e32:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e34:	9603      	str	r6, [sp, #12]
 8001e36:	0026      	movs	r6, r4
 8001e38:	9c03      	ldr	r4, [sp, #12]
 8001e3a:	43a6      	bics	r6, r4
 8001e3c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e3e:	690e      	ldr	r6, [r1, #16]
 8001e40:	40ae      	lsls	r6, r5
 8001e42:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001e44:	9c02      	ldr	r4, [sp, #8]
 8001e46:	6226      	str	r6, [r4, #32]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4a:	2a03      	cmp	r2, #3
 8001e4c:	d1df      	bne.n	8001e0e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001e50:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e52:	9d01      	ldr	r5, [sp, #4]
 8001e54:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e56:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e58:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8001e5a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e5c:	4662      	mov	r2, ip
 8001e5e:	02a4      	lsls	r4, r4, #10
 8001e60:	4222      	tst	r2, r4
 8001e62:	d04f      	beq.n	8001f04 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e64:	2501      	movs	r5, #1
 8001e66:	4a28      	ldr	r2, [pc, #160]	@ (8001f08 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e68:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6c:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	432c      	orrs	r4, r5
 8001e70:	6194      	str	r4, [r2, #24]
 8001e72:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e74:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	402a      	ands	r2, r5
 8001e78:	9205      	str	r2, [sp, #20]
 8001e7a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7c:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_GPIO_Init+0x15c>)
 8001e7e:	00a4      	lsls	r4, r4, #2
 8001e80:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e82:	220f      	movs	r2, #15
 8001e84:	3502      	adds	r5, #2
 8001e86:	401d      	ands	r5, r3
 8001e88:	00ad      	lsls	r5, r5, #2
 8001e8a:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e8c:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8e:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e90:	2200      	movs	r2, #0
 8001e92:	42b8      	cmp	r0, r7
 8001e94:	d00c      	beq.n	8001eb0 <HAL_GPIO_Init+0x100>
 8001e96:	4f1e      	ldr	r7, [pc, #120]	@ (8001f10 <HAL_GPIO_Init+0x160>)
 8001e98:	3201      	adds	r2, #1
 8001e9a:	42b8      	cmp	r0, r7
 8001e9c:	d008      	beq.n	8001eb0 <HAL_GPIO_Init+0x100>
 8001e9e:	4f1d      	ldr	r7, [pc, #116]	@ (8001f14 <HAL_GPIO_Init+0x164>)
 8001ea0:	3201      	adds	r2, #1
 8001ea2:	42b8      	cmp	r0, r7
 8001ea4:	d004      	beq.n	8001eb0 <HAL_GPIO_Init+0x100>
 8001ea6:	4f1c      	ldr	r7, [pc, #112]	@ (8001f18 <HAL_GPIO_Init+0x168>)
 8001ea8:	3203      	adds	r2, #3
 8001eaa:	42b8      	cmp	r0, r7
 8001eac:	d100      	bne.n	8001eb0 <HAL_GPIO_Init+0x100>
 8001eae:	3a02      	subs	r2, #2
 8001eb0:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb2:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb4:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb6:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001eb8:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8001eba:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001ebc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001ebe:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001ec0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001ec2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec4:	02ff      	lsls	r7, r7, #11
 8001ec6:	d401      	bmi.n	8001ecc <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8001ec8:	0035      	movs	r5, r6
 8001eca:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ecc:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001ece:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001ed0:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001ed2:	9d00      	ldr	r5, [sp, #0]
 8001ed4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed6:	02bf      	lsls	r7, r7, #10
 8001ed8:	d401      	bmi.n	8001ede <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8001eda:	0035      	movs	r5, r6
 8001edc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ede:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8001ee0:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8001ee2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001ee4:	9d00      	ldr	r5, [sp, #0]
 8001ee6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee8:	03bf      	lsls	r7, r7, #14
 8001eea:	d401      	bmi.n	8001ef0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8001eec:	0035      	movs	r5, r6
 8001eee:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001ef2:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001ef4:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001ef6:	9e00      	ldr	r6, [sp, #0]
 8001ef8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001efa:	03ff      	lsls	r7, r7, #15
 8001efc:	d401      	bmi.n	8001f02 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 8001efe:	4025      	ands	r5, r4
 8001f00:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001f02:	6016      	str	r6, [r2, #0]
    position++;
 8001f04:	3301      	adds	r3, #1
 8001f06:	e756      	b.n	8001db6 <HAL_GPIO_Init+0x6>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	48000400 	.word	0x48000400
 8001f14:	48000800 	.word	0x48000800
 8001f18:	48000c00 	.word	0x48000c00
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f24:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f26:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f28:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001f2a:	e7fc      	b.n	8001f26 <HAL_GPIO_WritePin+0x6>

08001f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001f2e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	4210      	tst	r0, r2
 8001f34:	d002      	beq.n	8001f3c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f36:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f38:	f7ff fab0 	bl	800149c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	40010400 	.word	0x40010400

08001f44 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f44:	6803      	ldr	r3, [r0, #0]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	0792      	lsls	r2, r2, #30
 8001f4a:	d501      	bpl.n	8001f50 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f50:	2201      	movs	r2, #1
 8001f52:	6999      	ldr	r1, [r3, #24]
 8001f54:	4211      	tst	r1, r2
 8001f56:	d102      	bne.n	8001f5e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f58:	6999      	ldr	r1, [r3, #24]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	619a      	str	r2, [r3, #24]
  }
}
 8001f5e:	4770      	bx	lr

08001f60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f60:	b530      	push	{r4, r5, lr}
 8001f62:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f64:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f66:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f68:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6a:	0589      	lsls	r1, r1, #22
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <I2C_TransferConfig+0x28>)
 8001f72:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f74:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f76:	0d64      	lsrs	r4, r4, #21
 8001f78:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f7c:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f80:	432a      	orrs	r2, r5
 8001f82:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f84:	bd30      	pop	{r4, r5, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	03ff63ff 	.word	0x03ff63ff

08001f8c <I2C_IsErrorOccurred>:
{
 8001f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f8e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f90:	6802      	ldr	r2, [r0, #0]
{
 8001f92:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f94:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f96:	2310      	movs	r3, #16
 8001f98:	000f      	movs	r7, r1
{
 8001f9a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f9c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fa0:	4219      	tst	r1, r3
 8001fa2:	d00d      	beq.n	8001fc0 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001fa8:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	2120      	movs	r1, #32
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	420a      	tst	r2, r1
 8001fb2:	d15f      	bne.n	8002074 <I2C_IsErrorOccurred+0xe8>
 8001fb4:	2f00      	cmp	r7, #0
 8001fb6:	d031      	beq.n	800201c <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8001fb8:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001fba:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fc0:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8001fc2:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fc4:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8001fc6:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fc8:	4213      	tst	r3, r2
 8001fca:	d002      	beq.n	8001fd2 <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8001fcc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fce:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001fd0:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	00d2      	lsls	r2, r2, #3
 8001fd6:	4213      	tst	r3, r2
 8001fd8:	d003      	beq.n	8001fe2 <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8001fda:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8001fde:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fe0:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4213      	tst	r3, r2
 8001fe8:	d049      	beq.n	800207e <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fea:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fec:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fee:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f7ff ffa7 	bl	8001f44 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001ff6:	686b      	ldr	r3, [r5, #4]
 8001ff8:	4a22      	ldr	r2, [pc, #136]	@ (8002084 <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8001ffa:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8002000:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002002:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002004:	433b      	orrs	r3, r7
 8002006:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	0023      	movs	r3, r4
 800200a:	3341      	adds	r3, #65	@ 0x41
 800200c:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800200e:	0022      	movs	r2, r4
 8002010:	2300      	movs	r3, #0
 8002012:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002014:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002018:	7023      	strb	r3, [r4, #0]
 800201a:	e032      	b.n	8002082 <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 800201c:	1c72      	adds	r2, r6, #1
 800201e:	d0c5      	beq.n	8001fac <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7ff fe3c 	bl	8001c9c <HAL_GetTick>
 8002024:	1b40      	subs	r0, r0, r5
 8002026:	42b0      	cmp	r0, r6
 8002028:	d801      	bhi.n	800202e <I2C_IsErrorOccurred+0xa2>
 800202a:	2e00      	cmp	r6, #0
 800202c:	d1bd      	bne.n	8001faa <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 800202e:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002030:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002032:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002034:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002036:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002038:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 800203a:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	d50b      	bpl.n	8002058 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002044:	4210      	tst	r0, r2
 8002046:	d107      	bne.n	8002058 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8002048:	2920      	cmp	r1, #32
 800204a:	d005      	beq.n	8002058 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002052:	f7ff fe23 	bl	8001c9c <HAL_GetTick>
 8002056:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002058:	2220      	movs	r2, #32
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4213      	tst	r3, r2
 8002060:	d1a3      	bne.n	8001faa <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002062:	f7ff fe1b 	bl	8001c9c <HAL_GetTick>
 8002066:	1b40      	subs	r0, r0, r5
 8002068:	2819      	cmp	r0, #25
 800206a:	d9f5      	bls.n	8002058 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	2320      	movs	r3, #32
              status = HAL_ERROR;
 800206e:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	e79a      	b.n	8001faa <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8002074:	2f00      	cmp	r7, #0
 8002076:	d19f      	bne.n	8001fb8 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	2220      	movs	r2, #32
 800207a:	61da      	str	r2, [r3, #28]
 800207c:	e79c      	b.n	8001fb8 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 800207e:	2800      	cmp	r0, #0
 8002080:	d1b6      	bne.n	8001ff0 <I2C_IsErrorOccurred+0x64>
}
 8002082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002084:	fe00e800 	.word	0xfe00e800

08002088 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	0004      	movs	r4, r0
 800208c:	000d      	movs	r5, r1
 800208e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002090:	2702      	movs	r7, #2
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	423b      	tst	r3, r7
 8002098:	d001      	beq.n	800209e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800209a:	2000      	movs	r0, #0
 800209c:	e021      	b.n	80020e2 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800209e:	0032      	movs	r2, r6
 80020a0:	0029      	movs	r1, r5
 80020a2:	0020      	movs	r0, r4
 80020a4:	f7ff ff72 	bl	8001f8c <I2C_IsErrorOccurred>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d119      	bne.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 80020ac:	1c6b      	adds	r3, r5, #1
 80020ae:	d0f0      	beq.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b0:	f7ff fdf4 	bl	8001c9c <HAL_GetTick>
 80020b4:	1b80      	subs	r0, r0, r6
 80020b6:	42a8      	cmp	r0, r5
 80020b8:	d801      	bhi.n	80020be <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80020ba:	2d00      	cmp	r5, #0
 80020bc:	d1e9      	bne.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	6999      	ldr	r1, [r3, #24]
 80020c2:	2302      	movs	r3, #2
 80020c4:	000a      	movs	r2, r1
 80020c6:	401a      	ands	r2, r3
 80020c8:	4219      	tst	r1, r3
 80020ca:	d1e2      	bne.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	2120      	movs	r1, #32
 80020ce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80020d6:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	3341      	adds	r3, #65	@ 0x41
 80020da:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80020de:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
}
 80020e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020e4 <I2C_WaitOnFlagUntilTimeout>:
{
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	0004      	movs	r4, r0
 80020e8:	000d      	movs	r5, r1
 80020ea:	0017      	movs	r7, r2
 80020ec:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	402b      	ands	r3, r5
 80020f4:	1b5b      	subs	r3, r3, r5
 80020f6:	425a      	negs	r2, r3
 80020f8:	4153      	adcs	r3, r2
 80020fa:	42bb      	cmp	r3, r7
 80020fc:	d001      	beq.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80020fe:	2000      	movs	r0, #0
 8002100:	e026      	b.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002102:	0031      	movs	r1, r6
 8002104:	0020      	movs	r0, r4
 8002106:	9a06      	ldr	r2, [sp, #24]
 8002108:	f7ff ff40 	bl	8001f8c <I2C_IsErrorOccurred>
 800210c:	2800      	cmp	r0, #0
 800210e:	d11e      	bne.n	800214e <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002110:	1c73      	adds	r3, r6, #1
 8002112:	d0ec      	beq.n	80020ee <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002114:	f7ff fdc2 	bl	8001c9c <HAL_GetTick>
 8002118:	9b06      	ldr	r3, [sp, #24]
 800211a:	1ac0      	subs	r0, r0, r3
 800211c:	42b0      	cmp	r0, r6
 800211e:	d801      	bhi.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x40>
 8002120:	2e00      	cmp	r6, #0
 8002122:	d1e4      	bne.n	80020ee <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	402b      	ands	r3, r5
 800212a:	1b5b      	subs	r3, r3, r5
 800212c:	425a      	negs	r2, r3
 800212e:	4153      	adcs	r3, r2
 8002130:	42bb      	cmp	r3, r7
 8002132:	d1dc      	bne.n	80020ee <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	2220      	movs	r2, #32
 8002136:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002138:	4313      	orrs	r3, r2
 800213a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800213c:	0023      	movs	r3, r4
 800213e:	3341      	adds	r3, #65	@ 0x41
 8002140:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	0022      	movs	r2, r4
 8002144:	2300      	movs	r3, #0
 8002146:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002148:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800214c:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800214e:	2001      	movs	r0, #1
}
 8002150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002152 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002154:	0004      	movs	r4, r0
 8002156:	000e      	movs	r6, r1
 8002158:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215a:	2520      	movs	r5, #32
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	422b      	tst	r3, r5
 8002162:	d001      	beq.n	8002168 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002164:	2000      	movs	r0, #0
 8002166:	e01d      	b.n	80021a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002168:	003a      	movs	r2, r7
 800216a:	0031      	movs	r1, r6
 800216c:	0020      	movs	r0, r4
 800216e:	f7ff ff0d 	bl	8001f8c <I2C_IsErrorOccurred>
 8002172:	2800      	cmp	r0, #0
 8002174:	d115      	bne.n	80021a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002176:	f7ff fd91 	bl	8001c9c <HAL_GetTick>
 800217a:	1bc0      	subs	r0, r0, r7
 800217c:	42b0      	cmp	r0, r6
 800217e:	d801      	bhi.n	8002184 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002180:	2e00      	cmp	r6, #0
 8002182:	d1eb      	bne.n	800215c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	001a      	movs	r2, r3
 800218a:	402a      	ands	r2, r5
 800218c:	422b      	tst	r3, r5
 800218e:	d1e5      	bne.n	800215c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002190:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002192:	432b      	orrs	r3, r5
 8002194:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002196:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002198:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800219a:	3341      	adds	r3, #65	@ 0x41
 800219c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 80021a0:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
}
 80021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80021a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021aa:	0005      	movs	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2400      	movs	r4, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80021ae:	2704      	movs	r7, #4
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80021b0:	2620      	movs	r6, #32
{
 80021b2:	9100      	str	r1, [sp, #0]
 80021b4:	9201      	str	r2, [sp, #4]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	423b      	tst	r3, r7
 80021bc:	d101      	bne.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a>
 80021be:	2c00      	cmp	r4, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
}
 80021c2:	0020      	movs	r0, r4
 80021c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	9a01      	ldr	r2, [sp, #4]
 80021c8:	0028      	movs	r0, r5
 80021ca:	9900      	ldr	r1, [sp, #0]
 80021cc:	f7ff fede 	bl	8001f8c <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80021d0:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d2:	0004      	movs	r4, r0
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	4232      	tst	r2, r6
 80021d8:	d10f      	bne.n	80021fa <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021da:	1e63      	subs	r3, r4, #1
 80021dc:	419c      	sbcs	r4, r3
 80021de:	b2e4      	uxtb	r4, r4
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80021e0:	f7ff fd5c 	bl	8001c9c <HAL_GetTick>
 80021e4:	9b01      	ldr	r3, [sp, #4]
 80021e6:	1ac0      	subs	r0, r0, r3
 80021e8:	9b00      	ldr	r3, [sp, #0]
 80021ea:	4298      	cmp	r0, r3
 80021ec:	d801      	bhi.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1e1      	bne.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	d019      	beq.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0x82>
{
 80021f6:	2401      	movs	r4, #1
 80021f8:	e7dd      	b.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d111      	bne.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021fe:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002200:	2210      	movs	r2, #16
 8002202:	6999      	ldr	r1, [r3, #24]
 8002204:	4211      	tst	r1, r2
 8002206:	d00e      	beq.n	8002226 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002208:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800220a:	646f      	str	r7, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800220c:	61de      	str	r6, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	490c      	ldr	r1, [pc, #48]	@ (8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>)
 8002212:	400a      	ands	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8002216:	002b      	movs	r3, r5
 8002218:	3341      	adds	r3, #65	@ 0x41
 800221a:	701e      	strb	r6, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	7058      	strb	r0, [r3, #1]
        __HAL_UNLOCK(hi2c);
 800221e:	3b01      	subs	r3, #1
 8002220:	7018      	strb	r0, [r3, #0]
{
 8002222:	2401      	movs	r4, #1
 8002224:	e7dc      	b.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002226:	6468      	str	r0, [r5, #68]	@ 0x44
 8002228:	e7da      	b.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800222a:	682b      	ldr	r3, [r5, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	423b      	tst	r3, r7
 8002230:	d1c1      	bne.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002234:	4333      	orrs	r3, r6
 8002236:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002238:	002b      	movs	r3, r5
 800223a:	3341      	adds	r3, #65	@ 0x41
 800223c:	701e      	strb	r6, [r3, #0]
        __HAL_UNLOCK(hi2c);
 800223e:	3b01      	subs	r3, #1
 8002240:	701c      	strb	r4, [r3, #0]
        status = HAL_ERROR;
 8002242:	e7d8      	b.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 8002244:	fe00e800 	.word	0xfe00e800

08002248 <HAL_I2C_Init>:
{
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800224c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800224e:	2c00      	cmp	r4, #0
 8002250:	d04e      	beq.n	80022f0 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	0025      	movs	r5, r4
 8002254:	3541      	adds	r5, #65	@ 0x41
 8002256:	782b      	ldrb	r3, [r5, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	0023      	movs	r3, r4
 8002260:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002262:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002264:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002266:	f7ff fc29 	bl	8001abc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800226a:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 800226c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800226e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002270:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002272:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002274:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002276:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002278:	438a      	bics	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800227c:	491d      	ldr	r1, [pc, #116]	@ (80022f4 <HAL_I2C_Init+0xac>)
 800227e:	6862      	ldr	r2, [r4, #4]
 8002280:	400a      	ands	r2, r1
 8002282:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	491c      	ldr	r1, [pc, #112]	@ (80022f8 <HAL_I2C_Init+0xb0>)
 8002288:	400a      	ands	r2, r1
 800228a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800228c:	2801      	cmp	r0, #1
 800228e:	d107      	bne.n	80022a0 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	0212      	lsls	r2, r2, #8
 8002294:	4332      	orrs	r2, r6
 8002296:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4818      	ldr	r0, [pc, #96]	@ (80022fc <HAL_I2C_Init+0xb4>)
 800229c:	4002      	ands	r2, r0
 800229e:	e009      	b.n	80022b4 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022a0:	2284      	movs	r2, #132	@ 0x84
 80022a2:	0212      	lsls	r2, r2, #8
 80022a4:	4332      	orrs	r2, r6
 80022a6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a8:	2802      	cmp	r0, #2
 80022aa:	d1f5      	bne.n	8002298 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	6858      	ldr	r0, [r3, #4]
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022b4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b6:	6858      	ldr	r0, [r3, #4]
 80022b8:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <HAL_I2C_Init+0xb8>)
 80022ba:	4302      	orrs	r2, r0
 80022bc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022be:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022c2:	400a      	ands	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c6:	6961      	ldr	r1, [r4, #20]
 80022c8:	6922      	ldr	r2, [r4, #16]
 80022ca:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022cc:	69a1      	ldr	r1, [r4, #24]
 80022ce:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022d4:	6a21      	ldr	r1, [r4, #32]
 80022d6:	69e2      	ldr	r2, [r4, #28]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	2201      	movs	r2, #1
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	3442      	adds	r4, #66	@ 0x42
 80022ee:	7020      	strb	r0, [r4, #0]
}
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	f0ffffff 	.word	0xf0ffffff
 80022f8:	ffff7fff 	.word	0xffff7fff
 80022fc:	fffff7ff 	.word	0xfffff7ff
 8002300:	02008000 	.word	0x02008000

08002304 <HAL_I2C_Master_Transmit>:
{
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	0006      	movs	r6, r0
{
 8002308:	b085      	sub	sp, #20
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800230e:	3641      	adds	r6, #65	@ 0x41
 8002310:	7833      	ldrb	r3, [r6, #0]
{
 8002312:	0004      	movs	r4, r0
 8002314:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8002316:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	2b20      	cmp	r3, #32
 800231a:	d114      	bne.n	8002346 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 800231c:	0023      	movs	r3, r4
 800231e:	3340      	adds	r3, #64	@ 0x40
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	2a01      	cmp	r2, #1
 8002324:	d00f      	beq.n	8002346 <HAL_I2C_Master_Transmit+0x42>
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800232a:	f7ff fcb7 	bl	8001c9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800232e:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8002330:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002332:	9000      	str	r0, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	2201      	movs	r2, #1
 8002338:	0020      	movs	r0, r4
 800233a:	0209      	lsls	r1, r1, #8
 800233c:	f7ff fed2 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8002340:	2800      	cmp	r0, #0
 8002342:	d002      	beq.n	800234a <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8002344:	2001      	movs	r0, #1
}
 8002346:	b005      	add	sp, #20
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800234a:	2321      	movs	r3, #33	@ 0x21
 800234c:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800234e:	0023      	movs	r3, r4
 8002350:	2210      	movs	r2, #16
 8002352:	3342      	adds	r3, #66	@ 0x42
 8002354:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr  = pData;
 8002356:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800235a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800235c:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 800235e:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8002360:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002362:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002364:	2bff      	cmp	r3, #255	@ 0xff
 8002366:	d834      	bhi.n	80023d2 <HAL_I2C_Master_Transmit+0xce>
      xfermode = I2C_AUTOEND_MODE;
 8002368:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 800236a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 800236c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800236e:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 8002370:	4932      	ldr	r1, [pc, #200]	@ (800243c <HAL_I2C_Master_Transmit+0x138>)
 8002372:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8002374:	2a00      	cmp	r2, #0
 8002376:	d00f      	beq.n	8002398 <HAL_I2C_Master_Transmit+0x94>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002378:	9e02      	ldr	r6, [sp, #8]
 800237a:	6820      	ldr	r0, [r4, #0]
 800237c:	7836      	ldrb	r6, [r6, #0]
      hi2c->XferSize--;
 800237e:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002380:	6286      	str	r6, [r0, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002382:	9802      	ldr	r0, [sp, #8]
      hi2c->XferSize--;
 8002384:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002386:	3001      	adds	r0, #1
 8002388:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800238a:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800238c:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800238e:	3801      	subs	r0, #1
 8002390:	b280      	uxth	r0, r0
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002392:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8002394:	8560      	strh	r0, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002396:	b2d2      	uxtb	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002398:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239a:	0039      	movs	r1, r7
 800239c:	0020      	movs	r0, r4
 800239e:	f7ff fddf 	bl	8001f60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a4:	002a      	movs	r2, r5
 80023a6:	0020      	movs	r0, r4
 80023a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_I2C_Master_Transmit+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	f7ff fed0 	bl	8002152 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1c6      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b6:	2120      	movs	r1, #32
 80023b8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80023ba:	4d21      	ldr	r5, [pc, #132]	@ (8002440 <HAL_I2C_Master_Transmit+0x13c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023bc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	402a      	ands	r2, r5
 80023c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023c4:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80023c6:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	3341      	adds	r3, #65	@ 0x41
 80023ca:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023cc:	7058      	strb	r0, [r3, #1]
    __HAL_UNLOCK(hi2c);
 80023ce:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80023d0:	e7b9      	b.n	8002346 <HAL_I2C_Master_Transmit+0x42>
      xfermode = I2C_RELOAD_MODE;
 80023d2:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d4:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80023d6:	045b      	lsls	r3, r3, #17
 80023d8:	e7ca      	b.n	8002370 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	f7ff fe55 	bl	8002088 <I2C_WaitOnTXISFlagUntilTimeout>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d1b0      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80023e8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ea:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80023ec:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80023ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80023f0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80023f8:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80023fc:	b292      	uxth	r2, r2
 80023fe:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ce      	beq.n	80023a2 <HAL_I2C_Master_Transmit+0x9e>
 8002404:	2a00      	cmp	r2, #0
 8002406:	d1cc      	bne.n	80023a2 <HAL_I2C_Master_Transmit+0x9e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002408:	2180      	movs	r1, #128	@ 0x80
 800240a:	0020      	movs	r0, r4
 800240c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800240e:	9500      	str	r5, [sp, #0]
 8002410:	f7ff fe68 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8002414:	2800      	cmp	r0, #0
 8002416:	d000      	beq.n	800241a <HAL_I2C_Master_Transmit+0x116>
 8002418:	e794      	b.n	8002344 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800241c:	2bff      	cmp	r3, #255	@ 0xff
 800241e:	d905      	bls.n	800242c <HAL_I2C_Master_Transmit+0x128>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002420:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002422:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002424:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002426:	045b      	lsls	r3, r3, #17
 8002428:	9000      	str	r0, [sp, #0]
 800242a:	e7b6      	b.n	800239a <HAL_I2C_Master_Transmit+0x96>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242c:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 800242e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002430:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002432:	b292      	uxth	r2, r2
 8002434:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	9000      	str	r0, [sp, #0]
 800243a:	e7ae      	b.n	800239a <HAL_I2C_Master_Transmit+0x96>
 800243c:	80002000 	.word	0x80002000
 8002440:	fe00e800 	.word	0xfe00e800

08002444 <HAL_I2C_Master_Receive>:
{
 8002444:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002446:	0007      	movs	r7, r0
{
 8002448:	b087      	sub	sp, #28
 800244a:	9103      	str	r1, [sp, #12]
 800244c:	9204      	str	r2, [sp, #16]
 800244e:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002450:	3741      	adds	r7, #65	@ 0x41
 8002452:	783b      	ldrb	r3, [r7, #0]
{
 8002454:	0004      	movs	r4, r0
    __HAL_LOCK(hi2c);
 8002456:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	2b20      	cmp	r3, #32
 800245a:	d114      	bne.n	8002486 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 800245c:	0023      	movs	r3, r4
 800245e:	3340      	adds	r3, #64	@ 0x40
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	2a01      	cmp	r2, #1
 8002464:	d00f      	beq.n	8002486 <HAL_I2C_Master_Receive+0x42>
 8002466:	2601      	movs	r6, #1
 8002468:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800246a:	f7ff fc17 	bl	8001c9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800246e:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8002470:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002472:	9000      	str	r0, [sp, #0]
 8002474:	2319      	movs	r3, #25
 8002476:	0032      	movs	r2, r6
 8002478:	0020      	movs	r0, r4
 800247a:	0209      	lsls	r1, r1, #8
 800247c:	f7ff fe32 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8002480:	2800      	cmp	r0, #0
 8002482:	d002      	beq.n	800248a <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8002484:	2001      	movs	r0, #1
}
 8002486:	b007      	add	sp, #28
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800248a:	2322      	movs	r3, #34	@ 0x22
 800248c:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800248e:	0027      	movs	r7, r4
 8002490:	3b12      	subs	r3, #18
 8002492:	3742      	adds	r7, #66	@ 0x42
 8002494:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8002496:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002498:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800249a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800249c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800249e:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 80024a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80024a4:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_I2C_Master_Receive+0x118>)
 80024a6:	2aff      	cmp	r2, #255	@ 0xff
 80024a8:	d920      	bls.n	80024ec <HAL_I2C_Master_Receive+0xa8>
      hi2c->XferSize = 1U;
 80024aa:	8526      	strh	r6, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	0032      	movs	r2, r6
 80024b2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b4:	0020      	movs	r0, r4
 80024b6:	9903      	ldr	r1, [sp, #12]
 80024b8:	f7ff fd52 	bl	8001f60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024be:	002a      	movs	r2, r5
 80024c0:	0020      	movs	r0, r4
 80024c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
    while (hi2c->XferCount > 0U)
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d119      	bne.n	80024fc <HAL_I2C_Master_Receive+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c8:	f7ff fe43 	bl	8002152 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1d9      	bne.n	8002484 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d0:	2120      	movs	r1, #32
 80024d2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80024d4:	4d22      	ldr	r5, [pc, #136]	@ (8002560 <HAL_I2C_Master_Receive+0x11c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	402a      	ands	r2, r5
 80024dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024de:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80024e0:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	3341      	adds	r3, #65	@ 0x41
 80024e4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024e6:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 80024e8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80024ea:	e7cc      	b.n	8002486 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 80024ec:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80024ee:	b292      	uxth	r2, r2
 80024f0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	049b      	lsls	r3, r3, #18
 80024fa:	e7db      	b.n	80024b4 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fc:	f7ff fe54 	bl	80021a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002500:	2800      	cmp	r0, #0
 8002502:	d1bf      	bne.n	8002484 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002508:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800250a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800250c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800250e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002510:	3301      	adds	r3, #1
 8002512:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002514:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002516:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002518:	3b01      	subs	r3, #1
 800251a:	b29b      	uxth	r3, r3
 800251c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800251e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002520:	b292      	uxth	r2, r2
 8002522:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0c9      	beq.n	80024bc <HAL_I2C_Master_Receive+0x78>
 8002528:	2a00      	cmp	r2, #0
 800252a:	d1c7      	bne.n	80024bc <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	0020      	movs	r0, r4
 8002530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002532:	9500      	str	r5, [sp, #0]
 8002534:	f7ff fdd6 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8002538:	2800      	cmp	r0, #0
 800253a:	d1a3      	bne.n	8002484 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800253c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800253e:	2bff      	cmp	r3, #255	@ 0xff
 8002540:	d905      	bls.n	800254e <HAL_I2C_Master_Receive+0x10a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002542:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002544:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002546:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002548:	045b      	lsls	r3, r3, #17
 800254a:	9000      	str	r0, [sp, #0]
 800254c:	e7b2      	b.n	80024b4 <HAL_I2C_Master_Receive+0x70>
          hi2c->XferSize = hi2c->XferCount;
 800254e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002550:	b292      	uxth	r2, r2
 8002552:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	9000      	str	r0, [sp, #0]
 8002558:	e7cd      	b.n	80024f6 <HAL_I2C_Master_Receive+0xb2>
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	80002400 	.word	0x80002400
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <HAL_I2C_Mem_Write>:
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002566:	0007      	movs	r7, r0
{
 8002568:	b087      	sub	sp, #28
 800256a:	9303      	str	r3, [sp, #12]
 800256c:	ab0c      	add	r3, sp, #48	@ 0x30
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	3741      	adds	r7, #65	@ 0x41
{
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	9204      	str	r2, [sp, #16]
 8002578:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	783b      	ldrb	r3, [r7, #0]
{
 800257c:	0004      	movs	r4, r0
 800257e:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8002580:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002582:	2b20      	cmp	r3, #32
 8002584:	d108      	bne.n	8002598 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002586:	2a00      	cmp	r2, #0
 8002588:	d002      	beq.n	8002590 <HAL_I2C_Mem_Write+0x2c>
 800258a:	9b05      	ldr	r3, [sp, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002596:	2001      	movs	r0, #1
}
 8002598:	b007      	add	sp, #28
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800259c:	0023      	movs	r3, r4
 800259e:	3340      	adds	r3, #64	@ 0x40
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	2002      	movs	r0, #2
 80025a4:	2a01      	cmp	r2, #1
 80025a6:	d0f7      	beq.n	8002598 <HAL_I2C_Mem_Write+0x34>
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80025ac:	f7ff fb76 	bl	8001c9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b0:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 80025b2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b4:	9000      	str	r0, [sp, #0]
 80025b6:	2319      	movs	r3, #25
 80025b8:	2201      	movs	r2, #1
 80025ba:	0020      	movs	r0, r4
 80025bc:	0209      	lsls	r1, r1, #8
 80025be:	f7ff fd91 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d1e7      	bne.n	8002596 <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c6:	2321      	movs	r3, #33	@ 0x21
 80025c8:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ca:	0027      	movs	r7, r4
 80025cc:	331f      	adds	r3, #31
 80025ce:	3742      	adds	r7, #66	@ 0x42
 80025d0:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 80025d2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80025d6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025d8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80025da:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 80025dc:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025de:	466b      	mov	r3, sp
 80025e0:	7b1a      	ldrb	r2, [r3, #12]
 80025e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002710 <HAL_I2C_Mem_Write+0x1ac>)
 80025e4:	0031      	movs	r1, r6
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	0020      	movs	r0, r4
 80025ec:	045b      	lsls	r3, r3, #17
 80025ee:	f7ff fcb7 	bl	8001f60 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f2:	002a      	movs	r2, r5
 80025f4:	0020      	movs	r0, r4
 80025f6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80025f8:	f7ff fd46 	bl	8002088 <I2C_WaitOnTXISFlagUntilTimeout>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d129      	bne.n	8002654 <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002600:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002602:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002604:	2a01      	cmp	r2, #1
 8002606:	d116      	bne.n	8002636 <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002608:	466a      	mov	r2, sp
 800260a:	7a12      	ldrb	r2, [r2, #8]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	0020      	movs	r0, r4
 8002614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002616:	9500      	str	r5, [sp, #0]
 8002618:	f7ff fd64 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 800261c:	2800      	cmp	r0, #0
 800261e:	d119      	bne.n	8002654 <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002620:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002622:	2bff      	cmp	r3, #255	@ 0xff
 8002624:	d81a      	bhi.n	800265c <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002626:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002628:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800262a:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800262c:	b292      	uxth	r2, r2
 800262e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	9000      	str	r0, [sp, #0]
 8002634:	e017      	b.n	8002666 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002636:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800263a:	0a12      	lsrs	r2, r2, #8
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002640:	002a      	movs	r2, r5
 8002642:	f7ff fd21 	bl	8002088 <I2C_WaitOnTXISFlagUntilTimeout>
 8002646:	2800      	cmp	r0, #0
 8002648:	d104      	bne.n	8002654 <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800264a:	466b      	mov	r3, sp
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	7a1b      	ldrb	r3, [r3, #8]
 8002650:	6293      	str	r3, [r2, #40]	@ 0x28
 8002652:	e7dc      	b.n	800260e <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8002654:	2300      	movs	r3, #0
 8002656:	3440      	adds	r4, #64	@ 0x40
 8002658:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800265a:	e79c      	b.n	8002596 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800265c:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800265e:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002660:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002662:	045b      	lsls	r3, r3, #17
 8002664:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002666:	0031      	movs	r1, r6
 8002668:	0020      	movs	r0, r4
 800266a:	f7ff fc79 	bl	8001f60 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266e:	002a      	movs	r2, r5
 8002670:	0020      	movs	r0, r4
 8002672:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002674:	f7ff fd08 	bl	8002088 <I2C_WaitOnTXISFlagUntilTimeout>
 8002678:	2800      	cmp	r0, #0
 800267a:	d000      	beq.n	800267e <HAL_I2C_Mem_Write+0x11a>
 800267c:	e78b      	b.n	8002596 <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800267e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002680:	6822      	ldr	r2, [r4, #0]
 8002682:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002684:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002686:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002688:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800268a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800268c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800268e:	3b01      	subs	r3, #1
 8002690:	b29b      	uxth	r3, r3
 8002692:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002694:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002696:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002698:	b292      	uxth	r2, r2
 800269a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800269c:	2b00      	cmp	r3, #0
 800269e:	d016      	beq.n	80026ce <HAL_I2C_Mem_Write+0x16a>
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d114      	bne.n	80026ce <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	0020      	movs	r0, r4
 80026a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80026aa:	9500      	str	r5, [sp, #0]
 80026ac:	f7ff fd1a 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d000      	beq.n	80026b6 <HAL_I2C_Mem_Write+0x152>
 80026b4:	e76f      	b.n	8002596 <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026b8:	2bff      	cmp	r3, #255	@ 0xff
 80026ba:	d921      	bls.n	8002700 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026bc:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026be:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026c2:	045b      	lsls	r3, r3, #17
 80026c4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c6:	0031      	movs	r1, r6
 80026c8:	0020      	movs	r0, r4
 80026ca:	f7ff fc49 	bl	8001f60 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80026ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1cc      	bne.n	800266e <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	002a      	movs	r2, r5
 80026d6:	0020      	movs	r0, r4
 80026d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80026da:	f7ff fd3a 	bl	8002152 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d000      	beq.n	80026e4 <HAL_I2C_Mem_Write+0x180>
 80026e2:	e758      	b.n	8002596 <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e4:	2120      	movs	r1, #32
 80026e6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80026e8:	4d0a      	ldr	r5, [pc, #40]	@ (8002714 <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	402a      	ands	r2, r5
 80026f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80026f4:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	3341      	adds	r3, #65	@ 0x41
 80026f8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026fa:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 80026fc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80026fe:	e74b      	b.n	8002598 <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002700:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002702:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002704:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002706:	b292      	uxth	r2, r2
 8002708:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	9000      	str	r0, [sp, #0]
 800270e:	e7da      	b.n	80026c6 <HAL_I2C_Mem_Write+0x162>
 8002710:	80002000 	.word	0x80002000
 8002714:	fe00e800 	.word	0xfe00e800

08002718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	0004      	movs	r4, r0
 800271c:	3441      	adds	r4, #65	@ 0x41
 800271e:	7822      	ldrb	r2, [r4, #0]
{
 8002720:	0003      	movs	r3, r0
 8002722:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	b2d6      	uxtb	r6, r2
 8002728:	2a20      	cmp	r2, #32
 800272a:	d118      	bne.n	800275e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800272c:	001d      	movs	r5, r3
 800272e:	3540      	adds	r5, #64	@ 0x40
 8002730:	782a      	ldrb	r2, [r5, #0]
 8002732:	2a01      	cmp	r2, #1
 8002734:	d013      	beq.n	800275e <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3a23      	subs	r2, #35	@ 0x23
 800273e:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002740:	4807      	ldr	r0, [pc, #28]	@ (8002760 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002742:	4391      	bics	r1, r2
 8002744:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800274c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	4339      	orrs	r1, r7
 8002752:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800275a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800275c:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002760:	ffffefff 	.word	0xffffefff

08002764 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002764:	0002      	movs	r2, r0
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	3241      	adds	r2, #65	@ 0x41
 800276a:	7814      	ldrb	r4, [r2, #0]
{
 800276c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002770:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	2c20      	cmp	r4, #32
 8002774:	d117      	bne.n	80027a6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002776:	001c      	movs	r4, r3
 8002778:	3440      	adds	r4, #64	@ 0x40
 800277a:	7826      	ldrb	r6, [r4, #0]
 800277c:	2e01      	cmp	r6, #1
 800277e:	d012      	beq.n	80027a6 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002780:	3022      	adds	r0, #34	@ 0x22
 8002782:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3823      	subs	r0, #35	@ 0x23
 8002788:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	4f07      	ldr	r7, [pc, #28]	@ (80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800278c:	4386      	bics	r6, r0
 800278e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002790:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002792:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002794:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002796:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002798:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	4308      	orrs	r0, r1
 800279e:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80027a4:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a8:	fffff0ff 	.word	0xfffff0ff

080027ac <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	000e      	movs	r6, r1
 80027b0:	b085      	sub	sp, #20
 80027b2:	0015      	movs	r5, r2
 80027b4:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027b6:	f7ff fa71 	bl	8001c9c <HAL_GetTick>
 80027ba:	19ad      	adds	r5, r5, r6
 80027bc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80027be:	f7ff fa6d 	bl	8001c9c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027c2:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80027c6:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	015b      	lsls	r3, r3, #5
 80027cc:	0d1b      	lsrs	r3, r3, #20
 80027ce:	436b      	muls	r3, r5
 80027d0:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d2:	6822      	ldr	r2, [r4, #0]
 80027d4:	6893      	ldr	r3, [r2, #8]
 80027d6:	0018      	movs	r0, r3
 80027d8:	4038      	ands	r0, r7
 80027da:	423b      	tst	r3, r7
 80027dc:	d032      	beq.n	8002844 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027de:	1c73      	adds	r3, r6, #1
 80027e0:	d0f8      	beq.n	80027d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027e2:	f7ff fa5b 	bl	8001c9c <HAL_GetTick>
 80027e6:	9b01      	ldr	r3, [sp, #4]
 80027e8:	1ac0      	subs	r0, r0, r3
 80027ea:	42a8      	cmp	r0, r5
 80027ec:	d32c      	bcc.n	8002848 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ee:	21e0      	movs	r1, #224	@ 0xe0
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	438a      	bics	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f8:	2282      	movs	r2, #130	@ 0x82
 80027fa:	6861      	ldr	r1, [r4, #4]
 80027fc:	0052      	lsls	r2, r2, #1
 80027fe:	4291      	cmp	r1, r2
 8002800:	d10c      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	68a2      	ldr	r2, [r4, #8]
 8002806:	0209      	lsls	r1, r1, #8
 8002808:	428a      	cmp	r2, r1
 800280a:	d003      	beq.n	8002814 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	00c9      	lsls	r1, r1, #3
 8002810:	428a      	cmp	r2, r1
 8002812:	d103      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002814:	2140      	movs	r1, #64	@ 0x40
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	438a      	bics	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800281c:	2180      	movs	r1, #128	@ 0x80
 800281e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002820:	0189      	lsls	r1, r1, #6
 8002822:	428a      	cmp	r2, r1
 8002824:	d106      	bne.n	8002834 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	480d      	ldr	r0, [pc, #52]	@ (8002860 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 800282a:	4001      	ands	r1, r0
 800282c:	6019      	str	r1, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002834:	0023      	movs	r3, r4
 8002836:	2201      	movs	r2, #1
 8002838:	335d      	adds	r3, #93	@ 0x5d
 800283a:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800283c:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 800283e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002840:	345c      	adds	r4, #92	@ 0x5c
 8002842:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8002844:	b005      	add	sp, #20
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002848:	9b03      	ldr	r3, [sp, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d000      	beq.n	8002850 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 800284e:	002b      	movs	r3, r5
      count--;
 8002850:	9a03      	ldr	r2, [sp, #12]
 8002852:	001d      	movs	r5, r3
 8002854:	3a01      	subs	r2, #1
 8002856:	9203      	str	r2, [sp, #12]
 8002858:	e7bb      	b.n	80027d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	20000008 	.word	0x20000008
 8002860:	ffffdfff 	.word	0xffffdfff

08002864 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002868:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800286a:	b085      	sub	sp, #20
 800286c:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 800286e:	ab02      	add	r3, sp, #8
 8002870:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002872:	0004      	movs	r4, r0
 8002874:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002876:	f7ff fa11 	bl	8001c9c <HAL_GetTick>
 800287a:	19ed      	adds	r5, r5, r7
 800287c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800287e:	f7ff fa0d 	bl	8001c9c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002882:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002884:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8002886:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002888:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800288a:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4353      	muls	r3, r2
 8002890:	0d1b      	lsrs	r3, r3, #20
 8002892:	436b      	muls	r3, r5
 8002894:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002896:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8002898:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 800289a:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 800289c:	688b      	ldr	r3, [r1, #8]
 800289e:	0018      	movs	r0, r3
 80028a0:	4030      	ands	r0, r6
 80028a2:	4233      	tst	r3, r6
 80028a4:	d03b      	beq.n	800291e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028a6:	23c0      	movs	r3, #192	@ 0xc0
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	429e      	cmp	r6, r3
 80028ac:	d104      	bne.n	80028b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 80028ae:	9b01      	ldr	r3, [sp, #4]
 80028b0:	7b1b      	ldrb	r3, [r3, #12]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028b6:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028b8:	1c7b      	adds	r3, r7, #1
 80028ba:	d0ef      	beq.n	800289c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028bc:	f7ff f9ee 	bl	8001c9c <HAL_GetTick>
 80028c0:	9b00      	ldr	r3, [sp, #0]
 80028c2:	1ac0      	subs	r0, r0, r3
 80028c4:	42a8      	cmp	r0, r5
 80028c6:	d32c      	bcc.n	8002922 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028c8:	21e0      	movs	r1, #224	@ 0xe0
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	438a      	bics	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d2:	2282      	movs	r2, #130	@ 0x82
 80028d4:	6861      	ldr	r1, [r4, #4]
 80028d6:	0052      	lsls	r2, r2, #1
 80028d8:	4291      	cmp	r1, r2
 80028da:	d10c      	bne.n	80028f6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 80028dc:	2180      	movs	r1, #128	@ 0x80
 80028de:	68a2      	ldr	r2, [r4, #8]
 80028e0:	0209      	lsls	r1, r1, #8
 80028e2:	428a      	cmp	r2, r1
 80028e4:	d003      	beq.n	80028ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028e6:	2180      	movs	r1, #128	@ 0x80
 80028e8:	00c9      	lsls	r1, r1, #3
 80028ea:	428a      	cmp	r2, r1
 80028ec:	d103      	bne.n	80028f6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ee:	2140      	movs	r1, #64	@ 0x40
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	438a      	bics	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f6:	2180      	movs	r1, #128	@ 0x80
 80028f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80028fa:	0189      	lsls	r1, r1, #6
 80028fc:	428a      	cmp	r2, r1
 80028fe:	d106      	bne.n	800290e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	480d      	ldr	r0, [pc, #52]	@ (8002938 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8002904:	4001      	ands	r1, r0
 8002906:	6019      	str	r1, [r3, #0]
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800290e:	0023      	movs	r3, r4
 8002910:	2201      	movs	r2, #1
 8002912:	335d      	adds	r3, #93	@ 0x5d
 8002914:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002916:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8002918:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800291a:	345c      	adds	r4, #92	@ 0x5c
 800291c:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 800291e:	b005      	add	sp, #20
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002922:	9b03      	ldr	r3, [sp, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d000      	beq.n	800292a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8002928:	002b      	movs	r3, r5
      count--;
 800292a:	9a03      	ldr	r2, [sp, #12]
 800292c:	001d      	movs	r5, r3
 800292e:	3a01      	subs	r2, #1
 8002930:	9203      	str	r2, [sp, #12]
 8002932:	e7b0      	b.n	8002896 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8002934:	20000008 	.word	0x20000008
 8002938:	ffffdfff 	.word	0xffffdfff

0800293c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800293e:	0013      	movs	r3, r2
{
 8002940:	000d      	movs	r5, r1
 8002942:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002944:	000a      	movs	r2, r1
 8002946:	21c0      	movs	r1, #192	@ 0xc0
 8002948:	0149      	lsls	r1, r1, #5
{
 800294a:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800294c:	f7ff ff8a 	bl	8002864 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002950:	2800      	cmp	r0, #0
 8002952:	d005      	beq.n	8002960 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002954:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8002956:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002958:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800295a:	4313      	orrs	r3, r2
 800295c:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800295e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	0032      	movs	r2, r6
 8002962:	0029      	movs	r1, r5
 8002964:	0020      	movs	r0, r4
 8002966:	f7ff ff21 	bl	80027ac <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800296a:	2800      	cmp	r0, #0
 800296c:	d1f2      	bne.n	8002954 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800296e:	21c0      	movs	r1, #192	@ 0xc0
 8002970:	0033      	movs	r3, r6
 8002972:	002a      	movs	r2, r5
 8002974:	0020      	movs	r0, r4
 8002976:	00c9      	lsls	r1, r1, #3
 8002978:	f7ff ff74 	bl	8002864 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800297c:	2800      	cmp	r0, #0
 800297e:	d0ee      	beq.n	800295e <SPI_EndRxTxTransaction+0x22>
 8002980:	e7e8      	b.n	8002954 <SPI_EndRxTxTransaction+0x18>
	...

08002984 <HAL_SPI_Init>:
{
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002988:	2001      	movs	r0, #1
  if (hspi == NULL)
 800298a:	2c00      	cmp	r4, #0
 800298c:	d067      	beq.n	8002a5e <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800298e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d165      	bne.n	8002a60 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002994:	2282      	movs	r2, #130	@ 0x82
 8002996:	6861      	ldr	r1, [r4, #4]
 8002998:	0052      	lsls	r2, r2, #1
 800299a:	4291      	cmp	r1, r2
 800299c:	d000      	beq.n	80029a0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800299e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a4:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a6:	355d      	adds	r5, #93	@ 0x5d
 80029a8:	782b      	ldrb	r3, [r5, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80029b0:	0023      	movs	r3, r4
 80029b2:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80029b4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80029b6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80029b8:	f7ff f8b4 	bl	8001b24 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80029bc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80029be:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80029c0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80029c2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c4:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80029c6:	680b      	ldr	r3, [r1, #0]
 80029c8:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ca:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 80029cc:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ce:	00d2      	lsls	r2, r2, #3
 80029d0:	2300      	movs	r3, #0
 80029d2:	4296      	cmp	r6, r2
 80029d4:	d948      	bls.n	8002a68 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029d6:	22f0      	movs	r2, #240	@ 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029d8:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	4296      	cmp	r6, r2
 80029de:	d000      	beq.n	80029e2 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e2:	2282      	movs	r2, #130	@ 0x82
 80029e4:	2784      	movs	r7, #132	@ 0x84
 80029e6:	6863      	ldr	r3, [r4, #4]
 80029e8:	0052      	lsls	r2, r2, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	68a2      	ldr	r2, [r4, #8]
 80029ee:	023f      	lsls	r7, r7, #8
 80029f0:	403a      	ands	r2, r7
 80029f2:	2702      	movs	r7, #2
 80029f4:	4313      	orrs	r3, r2
 80029f6:	6922      	ldr	r2, [r4, #16]
 80029f8:	69a5      	ldr	r5, [r4, #24]
 80029fa:	403a      	ands	r2, r7
 80029fc:	4313      	orrs	r3, r2
 80029fe:	2201      	movs	r2, #1
 8002a00:	6967      	ldr	r7, [r4, #20]
 8002a02:	4017      	ands	r7, r2
 8002a04:	433b      	orrs	r3, r7
 8002a06:	2780      	movs	r7, #128	@ 0x80
 8002a08:	00bf      	lsls	r7, r7, #2
 8002a0a:	402f      	ands	r7, r5
 8002a0c:	433b      	orrs	r3, r7
 8002a0e:	69e7      	ldr	r7, [r4, #28]
 8002a10:	3237      	adds	r2, #55	@ 0x37
 8002a12:	4017      	ands	r7, r2
 8002a14:	433b      	orrs	r3, r7
 8002a16:	6a27      	ldr	r7, [r4, #32]
 8002a18:	3248      	adds	r2, #72	@ 0x48
 8002a1a:	4017      	ands	r7, r2
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	433b      	orrs	r3, r7
 8002a20:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8002a22:	0192      	lsls	r2, r2, #6
 8002a24:	4017      	ands	r7, r2
 8002a26:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a28:	2710      	movs	r7, #16
 8002a2a:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a2c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a30:	0c2d      	lsrs	r5, r5, #16
 8002a32:	403b      	ands	r3, r7
 8002a34:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8002a36:	4017      	ands	r7, r2
 8002a38:	433b      	orrs	r3, r7
 8002a3a:	27f0      	movs	r7, #240	@ 0xf0
 8002a3c:	013f      	lsls	r7, r7, #4
 8002a3e:	403e      	ands	r6, r7
 8002a40:	4333      	orrs	r3, r6
 8002a42:	2604      	movs	r6, #4
 8002a44:	4035      	ands	r5, r6
 8002a46:	432b      	orrs	r3, r5
 8002a48:	4303      	orrs	r3, r0
 8002a4a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a4c:	69cb      	ldr	r3, [r1, #28]
 8002a4e:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <HAL_SPI_Init+0xec>)
 8002a50:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a54:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002a56:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a58:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a5a:	345d      	adds	r4, #93	@ 0x5d
 8002a5c:	7023      	strb	r3, [r4, #0]
}
 8002a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a64:	6163      	str	r3, [r4, #20]
 8002a66:	e79b      	b.n	80029a0 <HAL_SPI_Init+0x1c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a68:	2080      	movs	r0, #128	@ 0x80
 8002a6a:	0140      	lsls	r0, r0, #5
 8002a6c:	e7b6      	b.n	80029dc <HAL_SPI_Init+0x58>
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	fffff7ff 	.word	0xfffff7ff

08002a74 <HAL_SPI_Transmit>:
{
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	b085      	sub	sp, #20
 8002a78:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	335c      	adds	r3, #92	@ 0x5c
{
 8002a7e:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8002a80:	781a      	ldrb	r2, [r3, #0]
{
 8002a82:	0004      	movs	r4, r0
 8002a84:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8002a86:	2702      	movs	r7, #2
 8002a88:	2a01      	cmp	r2, #1
 8002a8a:	d100      	bne.n	8002a8e <HAL_SPI_Transmit+0x1a>
 8002a8c:	e082      	b.n	8002b94 <HAL_SPI_Transmit+0x120>
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002a92:	f7ff f903 	bl	8001c9c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a96:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002a98:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9a:	335d      	adds	r3, #93	@ 0x5d
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	b2d7      	uxtb	r7, r2
 8002aa0:	2a01      	cmp	r2, #1
 8002aa2:	d000      	beq.n	8002aa6 <HAL_SPI_Transmit+0x32>
 8002aa4:	e0a6      	b.n	8002bf4 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8002aa6:	2d00      	cmp	r5, #0
 8002aa8:	d071      	beq.n	8002b8e <HAL_SPI_Transmit+0x11a>
 8002aaa:	2e00      	cmp	r6, #0
 8002aac:	d06f      	beq.n	8002b8e <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aae:	3202      	adds	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab2:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8002ab4:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ab8:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aba:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002abc:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002abe:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8002ac0:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8002ac2:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ac4:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac6:	2280      	movs	r2, #128	@ 0x80
 8002ac8:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8002aca:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002acc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ace:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8002ad0:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad2:	4291      	cmp	r1, r2
 8002ad4:	d108      	bne.n	8002ae8 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8002ad6:	2140      	movs	r1, #64	@ 0x40
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	438a      	bics	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	01d2      	lsls	r2, r2, #7
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	4211      	tst	r1, r2
 8002aee:	d102      	bne.n	8002af6 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af6:	21e0      	movs	r1, #224	@ 0xe0
 8002af8:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afa:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002afc:	00c9      	lsls	r1, r1, #3
 8002afe:	4288      	cmp	r0, r1
 8002b00:	d94b      	bls.n	8002b9a <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_SPI_Transmit+0x96>
 8002b06:	2e01      	cmp	r6, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002b10:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b12:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b1a:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8002b1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d119      	bne.n	8002b56 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b22:	0020      	movs	r0, r4
 8002b24:	9a01      	ldr	r2, [sp, #4]
 8002b26:	9900      	ldr	r1, [sp, #0]
 8002b28:	f7ff ff08 	bl	800293c <SPI_EndRxTxTransaction>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d15e      	bne.n	8002bee <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b30:	68a3      	ldr	r3, [r4, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b36:	9303      	str	r3, [sp, #12]
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	9203      	str	r2, [sp, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	9303      	str	r3, [sp, #12]
 8002b42:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b44:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	d121      	bne.n	8002b8e <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	0023      	movs	r3, r4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b50:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8002b52:	7019      	strb	r1, [r3, #0]
 8002b54:	e01b      	b.n	8002b8e <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	6893      	ldr	r3, [r2, #8]
 8002b5a:	422b      	tst	r3, r5
 8002b5c:	d009      	beq.n	8002b72 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b60:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b62:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b64:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b66:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b68:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002b70:	e7d4      	b.n	8002b1c <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b72:	f7ff f893 	bl	8001c9c <HAL_GetTick>
 8002b76:	9b01      	ldr	r3, [sp, #4]
 8002b78:	1ac0      	subs	r0, r0, r3
 8002b7a:	9b00      	ldr	r3, [sp, #0]
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	d3cd      	bcc.n	8002b1c <HAL_SPI_Transmit+0xa8>
 8002b80:	3301      	adds	r3, #1
 8002b82:	d0cb      	beq.n	8002b1c <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8002b84:	0023      	movs	r3, r4
 8002b86:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8002b88:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8002b8a:	335d      	adds	r3, #93	@ 0x5d
 8002b8c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	345c      	adds	r4, #92	@ 0x5c
 8002b92:	7023      	strb	r3, [r4, #0]
}
 8002b94:	0038      	movs	r0, r7
 8002b96:	b005      	add	sp, #20
 8002b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_SPI_Transmit+0x12e>
 8002b9e:	2e01      	cmp	r6, #1
 8002ba0:	d108      	bne.n	8002bb4 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ba2:	782a      	ldrb	r2, [r5, #0]
 8002ba4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ba6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ba8:	3301      	adds	r3, #1
 8002baa:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002bac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb4:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8002bb6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0b2      	beq.n	8002b22 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	422a      	tst	r2, r5
 8002bc2:	d00a      	beq.n	8002bda <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002bcc:	3301      	adds	r3, #1
 8002bce:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bd0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002bd8:	e7ed      	b.n	8002bb6 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bda:	f7ff f85f 	bl	8001c9c <HAL_GetTick>
 8002bde:	9b01      	ldr	r3, [sp, #4]
 8002be0:	1ac0      	subs	r0, r0, r3
 8002be2:	9b00      	ldr	r3, [sp, #0]
 8002be4:	4298      	cmp	r0, r3
 8002be6:	d3e6      	bcc.n	8002bb6 <HAL_SPI_Transmit+0x142>
 8002be8:	3301      	adds	r3, #1
 8002bea:	d0e4      	beq.n	8002bb6 <HAL_SPI_Transmit+0x142>
 8002bec:	e7ca      	b.n	8002b84 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	6623      	str	r3, [r4, #96]	@ 0x60
 8002bf2:	e79d      	b.n	8002b30 <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 8002bf4:	2702      	movs	r7, #2
 8002bf6:	e7ca      	b.n	8002b8e <HAL_SPI_Transmit+0x11a>

08002bf8 <HAL_SPI_TransmitReceive>:
{
 8002bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bfa:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	335c      	adds	r3, #92	@ 0x5c
{
 8002c00:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8002c02:	781a      	ldrb	r2, [r3, #0]
{
 8002c04:	0004      	movs	r4, r0
 8002c06:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8002c08:	2002      	movs	r0, #2
 8002c0a:	2a01      	cmp	r2, #1
 8002c0c:	d01b      	beq.n	8002c46 <HAL_SPI_TransmitReceive+0x4e>
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002c12:	f7ff f843 	bl	8001c9c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002c16:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002c18:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8002c1a:	335d      	adds	r3, #93	@ 0x5d
 8002c1c:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002c1e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002c20:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d009      	beq.n	8002c3a <HAL_SPI_TransmitReceive+0x42>
 8002c26:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8002c28:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4299      	cmp	r1, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x48>
 8002c36:	2a04      	cmp	r2, #4
 8002c38:	d102      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d104      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8002c3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8002c40:	2300      	movs	r3, #0
 8002c42:	345c      	adds	r4, #92	@ 0x5c
 8002c44:	7023      	strb	r3, [r4, #0]
}
 8002c46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c48:	2f00      	cmp	r7, #0
 8002c4a:	d0f8      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x46>
 8002c4c:	2e00      	cmp	r6, #0
 8002c4e:	d0f6      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c50:	0023      	movs	r3, r4
 8002c52:	335d      	adds	r3, #93	@ 0x5d
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	2a04      	cmp	r2, #4
 8002c58:	d001      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8002c5e:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c60:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8002c62:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c64:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c66:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002c68:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002c6a:	1da2      	adds	r2, r4, #6
 8002c6c:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c6e:	22e0      	movs	r2, #224	@ 0xe0
 8002c70:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8002c72:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c74:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c76:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c78:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8002c7a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002c7c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c7e:	00d2      	lsls	r2, r2, #3
 8002c80:	4290      	cmp	r0, r2
 8002c82:	d935      	bls.n	8002cf0 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4f60      	ldr	r7, [pc, #384]	@ (8002e08 <HAL_SPI_TransmitReceive+0x210>)
 8002c88:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c8a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8c:	2240      	movs	r2, #64	@ 0x40
 8002c8e:	681f      	ldr	r7, [r3, #0]
 8002c90:	4217      	tst	r7, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8002c94:	681f      	ldr	r7, [r3, #0]
 8002c96:	433a      	orrs	r2, r7
 8002c98:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c9a:	22e0      	movs	r2, #224	@ 0xe0
 8002c9c:	00d2      	lsls	r2, r2, #3
 8002c9e:	4290      	cmp	r0, r2
 8002ca0:	d961      	bls.n	8002d66 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_SPI_TransmitReceive+0xb2>
 8002ca6:	2e01      	cmp	r6, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cae:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002cb0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb2:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002cba:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cbc:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cbe:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d119      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x102>
 8002cc6:	0023      	movs	r3, r4
 8002cc8:	3308      	adds	r3, #8
 8002cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d114      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	9a01      	ldr	r2, [sp, #4]
 8002cd4:	9908      	ldr	r1, [sp, #32]
 8002cd6:	f7ff fe31 	bl	800293c <SPI_EndRxTxTransaction>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d000      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0xe8>
 8002cde:	e08f      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x208>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ab      	bne.n	8002c3e <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	0023      	movs	r3, r4
 8002ce8:	2201      	movs	r2, #1
 8002cea:	335d      	adds	r3, #93	@ 0x5d
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e7a7      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cf0:	2280      	movs	r2, #128	@ 0x80
 8002cf2:	685f      	ldr	r7, [r3, #4]
 8002cf4:	0152      	lsls	r2, r2, #5
 8002cf6:	433a      	orrs	r2, r7
 8002cf8:	e7c7      	b.n	8002c8a <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	6883      	ldr	r3, [r0, #8]
 8002cfe:	423b      	tst	r3, r7
 8002d00:	d00e      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x128>
 8002d02:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x128>
 8002d08:	2d01      	cmp	r5, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d0e:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d10:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d12:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d16:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8002d1e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d20:	6883      	ldr	r3, [r0, #8]
 8002d22:	0019      	movs	r1, r3
 8002d24:	4031      	ands	r1, r6
 8002d26:	4233      	tst	r3, r6
 8002d28:	d00e      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x150>
 8002d2a:	0022      	movs	r2, r4
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8002d34:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d36:	68c0      	ldr	r0, [r0, #12]
 8002d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d3a:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d40:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d48:	f7fe ffa8 	bl	8001c9c <HAL_GetTick>
 8002d4c:	9b01      	ldr	r3, [sp, #4]
 8002d4e:	1ac0      	subs	r0, r0, r3
 8002d50:	9b08      	ldr	r3, [sp, #32]
 8002d52:	4298      	cmp	r0, r3
 8002d54:	d3b4      	bcc.n	8002cc0 <HAL_SPI_TransmitReceive+0xc8>
 8002d56:	3301      	adds	r3, #1
 8002d58:	d0b2      	beq.n	8002cc0 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8002d5a:	0023      	movs	r3, r4
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8002d60:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8002d62:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d64:	e76c      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x176>
 8002d6a:	2e01      	cmp	r6, #1
 8002d6c:	d108      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d6e:	782a      	ldrb	r2, [r5, #0]
 8002d70:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d74:	3301      	adds	r3, #1
 8002d76:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d78:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002d80:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d82:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d84:	002e      	movs	r6, r5
 8002d86:	e032      	b.n	8002dee <HAL_SPI_TransmitReceive+0x1f6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	423a      	tst	r2, r7
 8002d8e:	d00f      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x1b8>
 8002d90:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002d92:	2a00      	cmp	r2, #0
 8002d94:	d00c      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x1b8>
 8002d96:	2d01      	cmp	r5, #1
 8002d98:	d109      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x1b6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d9a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002da0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002da2:	3301      	adds	r3, #1
 8002da4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002da6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8002dae:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	0011      	movs	r1, r2
 8002db6:	4031      	ands	r1, r6
 8002db8:	4232      	tst	r2, r6
 8002dba:	d00f      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x1e4>
 8002dbc:	0022      	movs	r2, r4
 8002dbe:	3208      	adds	r2, #8
 8002dc0:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 8002dc6:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dc8:	7b1b      	ldrb	r3, [r3, #12]
 8002dca:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002dcc:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8002dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8002dd4:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ddc:	f7fe ff5e 	bl	8001c9c <HAL_GetTick>
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	1ac0      	subs	r0, r0, r3
 8002de4:	9b08      	ldr	r3, [sp, #32]
 8002de6:	4298      	cmp	r0, r3
 8002de8:	d301      	bcc.n	8002dee <HAL_SPI_TransmitReceive+0x1f6>
 8002dea:	3301      	adds	r3, #1
 8002dec:	d1b5      	bne.n	8002d5a <HAL_SPI_TransmitReceive+0x162>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1c9      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x190>
 8002df4:	0023      	movs	r3, r4
 8002df6:	3308      	adds	r3, #8
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1c4      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x190>
 8002dfe:	e767      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0xd8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e00:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e04:	6623      	str	r3, [r4, #96]	@ 0x60
 8002e06:	e76b      	b.n	8002ce0 <HAL_SPI_TransmitReceive+0xe8>
 8002e08:	ffffefff 	.word	0xffffefff

08002e0c <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002e10:	6803      	ldr	r3, [r0, #0]
{
 8002e12:	b530      	push	{r4, r5, lr}
 8002e14:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e16:	2041      	movs	r0, #65	@ 0x41
  uint32_t itsource = hspi->Instance->CR2;
 8002e18:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002e1a:	689a      	ldr	r2, [r3, #8]
{
 8002e1c:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e1e:	4010      	ands	r0, r2
 8002e20:	2801      	cmp	r0, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e24:	0648      	lsls	r0, r1, #25
 8002e26:	d504      	bpl.n	8002e32 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 8002e28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    hspi->TxISR(hspi);
 8002e2a:	0020      	movs	r0, r4
 8002e2c:	4798      	blx	r3
}
 8002e2e:	b005      	add	sp, #20
 8002e30:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e32:	0790      	lsls	r0, r2, #30
 8002e34:	d503      	bpl.n	8002e3e <HAL_SPI_IRQHandler+0x2e>
 8002e36:	0608      	lsls	r0, r1, #24
 8002e38:	d501      	bpl.n	8002e3e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002e3a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002e3c:	e7f5      	b.n	8002e2a <HAL_SPI_IRQHandler+0x1a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e3e:	20b0      	movs	r0, #176	@ 0xb0
 8002e40:	0040      	lsls	r0, r0, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e42:	4202      	tst	r2, r0
 8002e44:	d0f3      	beq.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e46:	0688      	lsls	r0, r1, #26
 8002e48:	d5f1      	bpl.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e4a:	0650      	lsls	r0, r2, #25
 8002e4c:	d50f      	bpl.n	8002e6e <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e4e:	0020      	movs	r0, r4
 8002e50:	305d      	adds	r0, #93	@ 0x5d
 8002e52:	7800      	ldrb	r0, [r0, #0]
 8002e54:	2803      	cmp	r0, #3
 8002e56:	d050      	beq.n	8002efa <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e58:	2004      	movs	r0, #4
 8002e5a:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8002e5c:	4328      	orrs	r0, r5
 8002e5e:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e60:	2000      	movs	r0, #0
 8002e62:	9000      	str	r0, [sp, #0]
 8002e64:	68d8      	ldr	r0, [r3, #12]
 8002e66:	9000      	str	r0, [sp, #0]
 8002e68:	6898      	ldr	r0, [r3, #8]
 8002e6a:	9000      	str	r0, [sp, #0]
 8002e6c:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e6e:	0690      	lsls	r0, r2, #26
 8002e70:	d50c      	bpl.n	8002e8c <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e72:	2001      	movs	r0, #1
 8002e74:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8002e76:	4328      	orrs	r0, r5
 8002e78:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	2540      	movs	r5, #64	@ 0x40
 8002e7e:	9002      	str	r0, [sp, #8]
 8002e80:	6898      	ldr	r0, [r3, #8]
 8002e82:	9002      	str	r0, [sp, #8]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	43a8      	bics	r0, r5
 8002e88:	6018      	str	r0, [r3, #0]
 8002e8a:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e8c:	05d2      	lsls	r2, r2, #23
 8002e8e:	d508      	bpl.n	8002ea2 <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e90:	2208      	movs	r2, #8
 8002e92:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002e94:	4302      	orrs	r2, r0
 8002e96:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	9203      	str	r2, [sp, #12]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	9203      	str	r2, [sp, #12]
 8002ea0:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ea2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d0c2      	beq.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ea8:	20e0      	movs	r0, #224	@ 0xe0
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4382      	bics	r2, r0
 8002eae:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	0022      	movs	r2, r4
 8002eb2:	38df      	subs	r0, #223	@ 0xdf
 8002eb4:	325d      	adds	r2, #93	@ 0x5d
 8002eb6:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002eb8:	3002      	adds	r0, #2
 8002eba:	4201      	tst	r1, r0
 8002ebc:	d025      	beq.n	8002f0a <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 8002ec2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ec4:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <HAL_SPI_IRQHandler+0x104>)
 8002ecc:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ece:	f7fe ff4d 	bl	8001d6c <HAL_DMA_Abort_IT>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ed6:	2340      	movs	r3, #64	@ 0x40
 8002ed8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002eda:	4313      	orrs	r3, r2
 8002edc:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002ede:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d0a4      	beq.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_SPI_IRQHandler+0x104>)
 8002ee6:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ee8:	f7fe ff40 	bl	8001d6c <HAL_DMA_Abort_IT>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d09e      	beq.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ef0:	2340      	movs	r3, #64	@ 0x40
 8002ef2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	6623      	str	r3, [r4, #96]	@ 0x60
 8002ef8:	e799      	b.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002efa:	2200      	movs	r2, #0
 8002efc:	9201      	str	r2, [sp, #4]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	9201      	str	r2, [sp, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	9b01      	ldr	r3, [sp, #4]
        return;
 8002f08:	e791      	b.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
        HAL_SPI_ErrorCallback(hspi);
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f7ff ff7e 	bl	8002e0c <HAL_SPI_ErrorCallback>
 8002f10:	e78d      	b.n	8002e2e <HAL_SPI_IRQHandler+0x1e>
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	08002f19 	.word	0x08002f19

08002f18 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f18:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	0002      	movs	r2, r0
{
 8002f1e:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 8002f20:	3208      	adds	r2, #8
 8002f22:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002f24:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8002f26:	f7ff ff71 	bl	8002e0c <HAL_SPI_ErrorCallback>
}
 8002f2a:	bd10      	pop	{r4, pc}

08002f2c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f2c:	4b01      	ldr	r3, [pc, #4]	@ (8002f34 <LL_SetSystemCoreClock+0x8>)
 8002f2e:	6018      	str	r0, [r3, #0]
}
 8002f30:	4770      	bx	lr
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	20000008 	.word	0x20000008

08002f38 <memset>:
 8002f38:	0003      	movs	r3, r0
 8002f3a:	1882      	adds	r2, r0, r2
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <memset+0xa>
 8002f40:	4770      	bx	lr
 8002f42:	7019      	strb	r1, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	e7f9      	b.n	8002f3c <memset+0x4>

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	4c0c      	ldr	r4, [pc, #48]	@ (8002f80 <__libc_init_array+0x38>)
 8002f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002f84 <__libc_init_array+0x3c>)
 8002f50:	1b64      	subs	r4, r4, r5
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	2600      	movs	r6, #0
 8002f5a:	f000 f819 	bl	8002f90 <_init>
 8002f5e:	4c0a      	ldr	r4, [pc, #40]	@ (8002f88 <__libc_init_array+0x40>)
 8002f60:	4d0a      	ldr	r5, [pc, #40]	@ (8002f8c <__libc_init_array+0x44>)
 8002f62:	1b64      	subs	r4, r4, r5
 8002f64:	10a4      	asrs	r4, r4, #2
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	00b3      	lsls	r3, r6, #2
 8002f6e:	58eb      	ldr	r3, [r5, r3]
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	00b3      	lsls	r3, r6, #2
 8002f78:	58eb      	ldr	r3, [r5, r3]
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	080037f8 	.word	0x080037f8
 8002f84:	080037f8 	.word	0x080037f8
 8002f88:	080037fc 	.word	0x080037fc
 8002f8c:	080037f8 	.word	0x080037f8

08002f90 <_init>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr

08002f9c <_fini>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr
